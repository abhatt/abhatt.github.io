[{"content": "<![CDATA[<p>Scott, it might be helpful to note that there <em>are</em> uncontroversial extra axioms of set theory, even if they do not address CH. Choice, of course. Large cardinal axioms are probably even less controversial, although only conditional on choice.</p>\n]]>", "author": "Douglas Knight", "published": "2015-12-15 01:40:06+00:00", "title": "By: Douglas Knight"}, {"content": "<![CDATA[<p>Douglas #71: Are you kidding?  AC was controversial through much of the 20th century, and controversy still flares up occasionally.</p>\n<p>I agree that large cardinal axioms are a different story&#8212;if you use ZF at all, then presumably you should believe in a large enough cardinal to construct a model for ZF, and a model for ZF+Con(ZF), and so on.  But then there are even larger cardinals, which I understand can again become controversial.</p>\n]]>", "author": "Scott", "published": "2015-12-15 01:57:33+00:00", "title": "By: Scott"}, {"content": "<![CDATA[<p>They&#8217;re a lot less controversial than axioms which imply CH.</p>\n<p>I think most recent controversy about AC is confused and really should be about something much weaker or much stronger.</p>\n<p>I think it is rare to talk about large cardinal axioms in the absence of choice. With choice, different axioms are usually comparable: one implies a larger cardinal than the other. Without choice, I think that there are a lot of variants and it&#8217;s a mess. I think that this is a big aesthetic motivation for AC among set theorists. And the (conditional) coherence of the large cardinal axioms into a tower is a big aesthetic motivation for accepting them.</p>\n]]>", "author": "Douglas Knight", "published": "2015-12-15 02:20:38+00:00", "title": "By: Douglas Knight"}, {"content": "<![CDATA[<p>Douglas #73: It probably depends what area of math you&#8217;re in.  If you&#8217;re a set theorist, of course you like AC since otherwise even measuring cardinalities is a mess.  On the other hand, if you&#8217;re doing measure theory or probability theory, and just want monstrous non-measurable sets to go away, you prefer not(AC).</p>\n]]>", "author": "Scott", "published": "2015-12-15 02:28:20+00:00", "title": "By: Scott"}, {"content": "<![CDATA[<p>@Jair #69:</p>\n<p>See <a href=\"http://arxiv.org/abs/math/0211398\" rel=\"nofollow\">http://arxiv.org/abs/math/0211398</a>.</p>\n]]>", "author": "James", "published": "2015-12-15 03:37:44+00:00", "title": "By: James"}, {"content": "<![CDATA[<p>Scott 74, No, all pure mathematicians use AC. It&#8217;s too baked in to what everyone else is using to be able to escape. Maybe people could rearrange their abstractions to avoid it and keep the same perspective, but they don&#8217;t. It seems to me that analysts are <em>more</em> enthusiastic about it than other mathematicians, probably because they run into it quicker.</p>\n<p>Measurable sets aren&#8217;t a big deal. Practically no one assumes not(AC) to avoid them. The very fact of that independence theorem tells you that there&#8217;s no danger of accidentally constructing a non-measurable set to which theorems won&#8217;t apply. People could assume not(AC) at that stage, but in functional analysis it shows up a lot more and it would be a lot harder to escape. eg, Krein-Milman shapes how people view the whole subject. And it looks a lot less like the free lunch of no non-measurable sets and more like shoving around the bump in the carpet.</p>\n]]>", "author": "Douglas Knight", "published": "2015-12-15 03:59:21+00:00", "title": "By: Douglas Knight"}, {"content": "<![CDATA[<p>Scott #58: It&#8217;s not exactly obvious what &#8220;uncomputability of the n-body problem&#8221; should even mean. Let&#8217;s say we have n bodies in three dimensions interacting gravitationally, and further assume that the total momentum of these bodies is zero. Then we need 6(n-1) numbers to specify the positions and velocities of the bodies. Of course if we actually know the positions and velocities of the bodies at one time, we can compute them for any other time, but the problem with this is that any uncertainty in the initial values tends to blow up when we go too far into the future (or past). So we would prefer to have 6(n-1)-1 constants that can be computed from the initial values; then we can use these constants and time to compute the positions and velocities with better precision. The problem is that (when n>2) we don&#8217;t have any idea how to even define these constants (except for the total energy). While something that can&#8217;t be defined obviously can&#8217;t be computed either, I don&#8217;t think that&#8217;s really what &#8220;uncomputable&#8221; should be used for&#8230;</p>\n]]>", "author": "Aula", "published": "2015-12-15 12:02:24+00:00", "title": "By: Aula"}, {"content": "<![CDATA[<p>Douglas Knight #7: As the author of the Nature news story, I would like to clarify a point that is often the source of confusion. There is no denying that Nature&#8217;s news team is part of Nature magazine. However we are editorially independent of the manuscript editors&#8217; side (the ones who get papers peer reviewed and published) and of the press team that sends out press releases. The week before publication of the paper, I received the same press release that other reporters did, It mentioned the paper by Cubitt et al. rather buried down and only as a paper title: In other words, in this case Nature&#8217;s press team did not even deliberately decide to promote this article. In any case, when I (or another Nature journalist) decide to cover results that come out in a Nature journal we base the decision on its scientific significance and its news value: we do not do it to promote the journal itself.</p>\n]]>", "author": "Davide Castelvecchi", "published": "2015-12-15 13:44:34+00:00", "title": "By: Davide Castelvecchi"}, {"content": "<![CDATA[<p>Aula #77: What I had in mind was, you specify the positions and velocities at t=0 as algebraic numbers, or as elements of some other denumerable set.  Then, the problem is to determine the highest-order bits of precision of the positions and velocities at some future time.</p>\n]]>", "author": "Scott", "published": "2015-12-15 14:03:38+00:00", "title": "By: Scott"}, {"content": "<![CDATA[<p>Vadim Re #57. The short answer is that such a computer would not be able to solve its own halting problem.  But a longer answer is still interesting on what such a computer could look like (there&#8217;s more than one possibility depending on how powerful you want it), so I&#8217;d recommend David Madore&#8217;s recent blog entry on this at <a href=\"http://www.madore.org/~david/weblog/d.2015-11-16.2337.html\" rel=\"nofollow\">http://www.madore.org/~david/weblog/d.2015-11-16.2337.html</a> .  That also contains the necessary definitions Scott #60 asked for.</p>\n]]>", "author": "jonas", "published": "2015-12-15 15:05:06+00:00", "title": "By: jonas"}, {"content": "<![CDATA[<p>Scott #79: OK, that&#8217;s a pretty reasonable mathematical definition of the problem (even though it&#8217;s completely impractical physically). By that definition, the three-body problem is computable, because the positions and velocities are expressible as infinite series that are known to always converge, but I don&#8217;t know if anything is known about the computability of the problem for four or more bodies.</p>\n]]>", "author": "Aula", "published": "2015-12-16 14:04:07+00:00", "title": "By: Aula"}, {"content": "<![CDATA[<p>Scott #58 &#8220;It is known, I think, that you can get \u201cZeno-like behavior,\u201d with the velocities of two orbiting bodies diverging to infinity in finite time, and that certainly raises the possibility of uncomputability, but to complete the argument you\u2019d need to show how to encode a Turing machine into celestial mechanics.&#8221;</p>\n<p>Are proof strategies like this common? I remembered a comment by Terry Tao on Navier-Stokes, &#8220;If one could somehow create enough \u201clogic gates\u201d out of ideal fluid, one could presumably build a sort of \u201cfluid computer\u201d, at which point the task of building a von Neumann machine appears to reduce to a software engineering exercise rather than a PDE problem (providing that the gates are suitably stable with respect to perturbations, but (as with actual computers) this can presumably be done by converting the analog signals of fluid mechanics into a more error-resistant digital form). The key thing missing in this program (in both senses of the word) to establish blowup for Navier-Stokes is to construct the logic gates within the laws of ideal fluids&#8221;</p>\n<p><a href=\"https://terrytao.wordpress.com/2014/02/04/finite-time-blowup-for-an-averaged-three-dimensional-navier-stokes-equation/\" rel=\"nofollow\">https://terrytao.wordpress.com/2014/02/04/finite-time-blowup-for-an-averaged-three-dimensional-navier-stokes-equation/</a></p>\n<p>Perhaps there are more than superficial similarities here?</p>\n]]>", "author": "JollyJoker", "published": "2015-12-16 14:57:34+00:00", "title": "By: JollyJoker"}, {"content": "<![CDATA[<p>JollyJoker #82: Well, the way you prove pretty much <i>anything</i> uncomputable is to take some known uncomputable problem&#8212;the original halting problem often works, although the Post correspondence problem, matrix mortality, etc. are sometimes more convenient&#8212;and then encode that problem into your thing.  So in particular, <i>any</i> proof that a physics problem is uncomputable will, at a super-high level, involve showing that the physical system you care about can encode Boolean logic gates, conditionals, memory, and other computer-like paraphernalia.  The differences will all lie in the details of the encoding&#8212;for which there&#8217;s no upper bound on the amount of cleverness that can be needed.</p>\n<p>With Terry Tao&#8217;s exciting ideas about Navier-Stokes, the crucial twist is that there he wants to encode a universal computer into a differential equation, not only to show uncomputability, but even just to show that <i>the differential equation can take smooth initial data and make it singular</i>&#8212;which is a perfectly &#8220;classical&#8221; question in differential equations, not something that itself asks about computability or algorithms.  So if his strategy works, it will provide a dramatic example of what, in my post on his paper a couple years ago, I called <a href=\"http://www.scottaaronson.com/blog/?p=1697\" rel=\"nofollow\">&#8220;the long reach of computation&#8221;</a>.</p>\n]]>", "author": "Scott", "published": "2015-12-16 15:21:15+00:00", "title": "By: Scott"}, {"content": "<![CDATA[<p>Incidentally, a request for anyone who has any experience with WordPress:</p>\n<p>In my last few posts, the paragraph justification has often been messed up, with many lines having far fewer words than would actually fit on them, and huge, unsightly spaces between the words.  The only way I found to fix the problem was to rewrite the paragraphs from scratch (!)&#8212;which suggests that, as I edited the paragraph, WordPress was inserting &#8220;secret linebreaks&#8221; that are invisible to me in the editor, and which only a rewrite will get rid of.  Googling didn&#8217;t turn up anything directly relevant either.  Does anyone know a solution to this?</p>\n]]>", "author": "Scott", "published": "2015-12-16 15:26:41+00:00", "title": "By: Scott"}, {"content": "<![CDATA[<p>Scott #83: When you put it like that, the question becomes; if you&#8217;ve proven that a system supports universal computing, how on earth is the fact that it can encode uncomputable problems more than a footnote? (A rhetorical question, I guess)</p>\n]]>", "author": "JollyJoker", "published": "2015-12-16 15:46:48+00:00", "title": "By: JollyJoker"}, {"content": "<![CDATA[<p><a href=\"http://www.smbc-comics.com/index.php?id=3958\" rel=\"nofollow\">http://www.smbc-comics.com/index.php?id=3958</a> seems on topic to both this and the recent D-Wave hoopla.</p>\n]]>", "author": "Joshua Zelinsky", "published": "2015-12-16 19:38:19+00:00", "title": "By: Joshua Zelinsky"}, {"content": "<![CDATA[<p>Scott #83</p>\n<p>&#8220;So in particular, any proof that a physics problem is uncomputable will, at a super-high level, involve showing that the physical system you care about can encode Boolean logic gates, conditionals, memory, and other computer-like paraphernalia. &#8221;</p>\n<p>What I don&#8217;t get though:<br />\nany physical system is by definition finite, so just like for any real life computer, the number of possible states is finite (although huge), so, in theory, such practical halting problem is computable, no? Any non-halting program is bound to eventually cycle through the same series of internal states, so it could be detected?</p>\n]]>", "author": "fred", "published": "2015-12-16 23:14:20+00:00", "title": "By: fred"}, {"content": "<![CDATA[<p>fred #87: Well, yes, in addition to the ability to encode Boolean logic gates, etc., to get uncomputability you also need some infinite or unbounded element in your problem.  In the case of the spectral gap, the unbounded element is the lattice size.  In the case of differential equations (including, conjecturally, Navier-Stokes), it might be that you could speed things up in a Zeno-like manner, and thereby do infinitely many steps in finite time.</p>\n<p>Again, <b>there&#8217;s no claim that this is physically realistic.</b>  The point is just that, if you define the problem in such-and-such a way, then you get a problem that&#8217;s uncomputable.  The mathematical definition doesn&#8217;t care about the fact that &#8216;in real life,&#8217; other physical constraints (like the Planck scale or the size of our observable universe) would ultimately come into play to prevent the uncomputability from rearing its head.</p>\n]]>", "author": "Scott", "published": "2015-12-16 23:58:09+00:00", "title": "By: Scott"}]