[{"content": "<![CDATA[<p>Is there a circuit implementation of the non-uniform distribution used in Raz & Tal&#8217;s paper?</p>\n<p>They seem to refer to your paper in their oracle construction &#8211; i&#8217;m looking under &#8220;Oracle Separation Result&#8221;.</p>\n<p>Basically, is there an example oracle we could experiment with, or has it only been shown to be possible? Is that perhaps why you mentioned that &#8220;we don\u2019t really know how to instantiate [the oracle problem] explicitly&#8221;?</p>\n]]>", "author": "Job", "published": "2018-06-06 05:48:46+00:00", "title": "By: Job"}, {"content": "<![CDATA[<p>Job #35: What, specifically, would you be hoping to learn from an experiment?</p>\n<p>You could certainly code up a program to draw pairs of Boolean functions (f,g) from Raz and Tal&#8217;s probability distribution D&#8212;that&#8217;s by far the most relevant thing; the use of D to create an infinite oracle is just boring diagonalization stuff.  And they tell you exactly how to draw from D in Section 4.1 of their paper.</p>\n<p>That will give you yes-instances of the noisy Forrelation problem.  To generate the no-instances is as easy as picking f and g completely at random!</p>\n<p>And then, given these instances, you could certainly experiment with various algorithms to solve them.  If you had a quantum computer (able to query the truth tables of f and g stored in a memory somewhere), you could even run the quantum algorithm for noisy Forrelation, and see that it gave you the expected result.</p>\n]]>", "author": "Scott", "published": "2018-06-06 06:06:59+00:00", "title": "By: Scott"}, {"content": "<![CDATA[<blockquote><p>What, specifically, would you be hoping to learn from an experiment?</p></blockquote>\n<p>I was wondering what the minimum gate set is that can implement the oracle.</p>\n<p>For example, if it can be implemented using a non-universal quantum gate set, then you might have a separation between PH and wanna-BQP, the class containing all not-quite-quantum simulators that do ok with non-universal gate sets like H+CNOT.</p>\n]]>", "author": "Job", "published": "2018-06-06 06:13:34+00:00", "title": "By: Job"}, {"content": "<![CDATA[<p>Job #37: If the oracle is implemented using H and CNOT gates only, then it can only express functions that are linear over GF(2), so Forrelation will be trivially in P.  (Indeed, I believe the two Boolean functions will <i>never</i> be forrelated, since the Fourier transform of a GF(2) linear function is a point function and is therefore not Boolean!)</p>\n<p>More broadly, what I meant in saying that we have no &#8220;explicit instantiation&#8221; of Forrelation, more precisely, is that we don&#8217;t know how to generate small circuits for the Boolean functions f and g, in such a way that</p>\n<p>(1) the forrelation between f and g is either very large or very small (so the quantum algorithm can distinguish the two cases), but</p>\n<p>(2) you actually <i>need</i> the quantum algorithm to tell you the answer (i.e., there&#8217;s nothing about the circuits that makes the problem easy classically).</p>\n<p>Maybe this can be achieved using modern obfuscation techniques from cryptography; I&#8217;m not sure (but even then, it wouldn&#8217;t be a &#8220;natural&#8221; instantiation).</p>\n<p>On the other hand, if you&#8217;re willing to have f and g be loaded from giant truth tables stored in a memory somewhere (in other words, work directly in the black-box model), then there&#8217;s no problem doing concrete experiments with Forrelation, either with a classical simulator or with a quantum computer if you have one.</p>\n]]>", "author": "Scott", "published": "2018-06-06 07:24:36+00:00", "title": "By: Scott"}, {"content": "<![CDATA[<p>Pooya #32: It&#8217;s awesome that your techniques were able to be used for this!  And I sincerely apologize for having &#8220;left you out.&#8221;  I&#8217;m also sorry that we didn&#8217;t get to talk more, with me being away on sabbatical this year.</p>\n]]>", "author": "Scott", "published": "2018-06-06 07:29:14+00:00", "title": "By: Scott"}, {"content": "<![CDATA[<p>Scott #23: Doesn&#8217;t matter much to me, as long as we&#8217;re made aware on this blog about where to ask the questions!</p>\n]]>", "author": "lewikee", "published": "2018-06-06 13:08:19+00:00", "title": "By: lewikee"}, {"content": "<![CDATA[<p>I&#8217;m curious about this: Boiled down, how does this relate, if at all, to the question of whether or not that quantum computers could solve NP-complete problems in sub-exponential time?</p>\n]]>", "author": "Michael Moldenhauer", "published": "2018-06-10 02:59:51+00:00", "title": "By: Michael Moldenhauer"}, {"content": "<![CDATA[<p>That is, does this have consequences for the truth or falsity of the &#8220;NP Hardness Assumption&#8221; you&#8217;ve conjectured about physics elsewhere? (i.e. that the laws of physics are such that no physical process can make NP complete problems tractable)</p>\n]]>", "author": "Michael Moldenhauer", "published": "2018-06-10 03:01:15+00:00", "title": "By: Michael Moldenhauer"}, {"content": "<![CDATA[<p>Michael #41-42: No, it has no direct implications for that question&#8212;if it did, I would&#8217;ve said so in the post! \ud83d\ude42</p>\n<p>You&#8217;re asking about whether NP is contained in BQP, whereas Raz and Tal&#8217;s result is about nearly the converse: whether BQP is contained in a generalization of NP.</p>\n<p>The closest thing to a connection I know, is a trivial observation I made a decade ago: namely, if BQP turned out to be contained in AM (something that we had no oracle evidence against before Raz and Tal), then BQP couldn&#8217;t contain NP without PH collapsing to the second level.  Again, though, most of us do indeed think that NP&nsub;BQP.  Just not because we think that BQP&sube;AM, but for a dozen other reasons instead.</p>\n]]>", "author": "Scott", "published": "2018-06-10 12:06:30+00:00", "title": "By: Scott"}, {"content": "<![CDATA[<p>[&#8230;] Scott Aaronson on the separation of QBP from the polynomial hierarchy. [&#8230;]</p>\n]]>", "author": "Links for June 2018  foreXiv", "published": "2018-06-15 16:16:40+00:00", "title": "By: Links for June 2018 \u2013 foreXiv"}, {"content": "<![CDATA[<p>Wow, awesome result! Could this also be used to give an oracle separation between BQP and PH/poly (or even just P/poly)?</p>\n]]>", "author": "RandomOracle", "published": "2018-06-03 16:01:57+00:00", "title": "By: RandomOracle"}]