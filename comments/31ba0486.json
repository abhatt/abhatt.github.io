[{"content": "re: Linear probing. Bin Fan has pointed out that linear probing is not so great for high-load hash tables like the 95% you can get with cuckoo hashing and buckets of size 4.", "author": "Anonymous", "published": "2014-10-22 22:47:06.449000-04:00", "title": ""}, {"content": "This comment has been removed by the author.", "author": "<a href=\"http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/h/Hammond:Mark.html\">Mark Hammond</a>", "published": "2014-10-23 01:13:15.542000-04:00", "title": ""}, {"content": "Thanks for the comparative analysis with quotient filter and BQF and CF variants. <br />Given it&#39;s appealing properties I found the performance statistics for standard operations enlightening.<br />", "author": "<a href=\"http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/h/Hammond:Mark.html\">Mark Hammond</a>", "published": "2014-10-23 02:25:31.212000-04:00", "title": ""}, {"content": "One clarification regarding a frequently asked question: why does it use &quot;xor Hash(fingerprint)&quot; rather than &quot;xor fingerprint&quot; to derive the second hash bucket index. <br /><br />This is because when fingerprint is relatively small (e.g., a few bits), &quot;xor fingerprint&quot; results in moving elements in a very small area in the table space, leading to higher chance of cuckoo failures and worse space utilization; while &quot;xor hash(fingerprint)&quot; makes the kick operations of cuckoo hashing &quot;global&quot; to the table, and achieving high space utilization.", "author": "<a href=\"http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/f/Fan:Bin.html\">Bin Fan</a>", "published": "2014-10-23 14:05:28.782000-04:00", "title": ""}]