[{"content": "<![CDATA[<p>Is it possible that Runkeeper detected &#8212; through a lookup table of known tracks, or just by analyzing the shape of your trace &#8212; that you were running around a 400 meter track and adjusted its measured total accordingly?</p>\n]]>", "author": "Chris", "published": "2015-11-16 03:17:17+00:00", "title": "By: Chris"}, {"content": "<![CDATA[<p>Was that only GPS or GPS with assist of some service. My phone (Galaxy S5) always done very well with drawing paths. I&#8217;m using Nike+ Running application w/ all GPS services open (GPS & Wi-Fi & Mobile Network together).</p>\n]]>", "author": "Enes", "published": "2015-11-16 12:32:50+00:00", "title": "By: Enes"}, {"content": "<![CDATA[<p>What matters isn&#8217;t the expected distance, but rather the variance.  If you know that the expected distance is 1.08, then the software can just divide everything by 1.08 to fix this systematic error.  I don&#8217;t know how sophisticated your particular software is, but I wouldn&#8217;t expect the authors to be completely mathematically naive.</p>\n]]>", "author": "Ben", "published": "2015-11-16 14:08:24+00:00", "title": "By: Ben"}, {"content": "<![CDATA[<p>Very interesting! Wouldn&#8217;t the space for \\( \\hat{p} \\) be a circle of radius \\( \\epsilon \\), rather than a square of edge \\( 2\\epsilon \\) ?</p>\n<p>Also, for your experiment you could try to gather the raw GPS location data using a GPS app, rather than rely on an app such as Runkeeper which may have some corrective algorithm in place. &#8220;GPS Test, Coordinates, Logger &#8211; FREE&#8221; was the first to come up on a Google search for such Android apps.</p>\n<p>Thanks for the article, was a great read!</p>\n]]>", "author": "Simon", "published": "2015-11-16 14:48:37+00:00", "title": "By: Simon"}, {"content": "<![CDATA[<p>Faith in GPS is fodder for jokes. Radio waves are subject to all kinds of changes as they pass thru the atmosphere from space. Many of these changes are due to weather, therefore not repeatable. GPS is good enough to get a missile warhead close enough to its target, most of the time. That&#8217;s the design constraint. Math and digital gizmos are not the same as the real world, and never will be. Get used to it. Reality, what a concept.</p>\n]]>", "author": "Roland", "published": "2015-11-16 15:06:20+00:00", "title": "By: Roland"}, {"content": "<![CDATA[<p>I found there is an easy 20-50 meter discrepancy when dealing with GPS during my development projects.</p>\n<p>It is also very much weather dependent.</p>\n]]>", "author": "Shane", "published": "2015-11-16 16:20:03+00:00", "title": "By: Shane"}, {"content": "<![CDATA[<p>At my local high school track, slow pokes are asked to use the outer lanes so that folks doing a serious workout (intervals, etc.) can use the inside lanes. This correction would make us slow pokes even more discouraged at our slow paces!</p>\n]]>", "author": "Paul Dulaney", "published": "2015-11-16 17:47:36+00:00", "title": "By: Paul Dulaney"}, {"content": "<![CDATA[<p>Ah, yes, like the compiler that recognizes the LINPACK benchmarks and optimizes away the whole computation. Seems rather a lot of trouble, don&#8217;t you think?</p>\n]]>", "author": "<a href=\"http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/h/Hayes:Brian.html\">Brian Hayes</a>", "published": "2015-11-16 19:24:03+00:00", "title": "By: Brian Hayes"}, {"content": "<![CDATA[<p>The app&#8217;s decumentation mentions only GPS, and it refuses to start recording if it can&#8217;t get a GPS fix. In any case, the track I was running on is built atop an old sanitary landfill and is a few hundred meters from the nearest buildings; wifi reception can&#8217;t be very good up there.</p>\n]]>", "author": "<a href=\"http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/h/Hayes:Brian.html\">Brian Hayes</a>", "published": "2015-11-16 19:33:49+00:00", "title": "By: Brian Hayes"}, {"content": "<![CDATA[<p>If the app were simply trying to give a best estimate of total distance, your strategy would be appealing. But the app is doing more than that: It plots position and speed at frequent intervals. All the waypoints along the trajectory somehow have to be reconciled with the total speed and distance. I suppose you could apply the adjustment to each segment of the path, but I don&#8217;t believe that&#8217;s being done.</p>\n<p>The app dumps the position data in a file format called KML (an XML variant). The file includes the full list of lat/lon pairs (in decimal degrees, e.g., 42.3891314, -71.1362197) and the distances between successive points calculated to a precision of one-tenth meter. I have checked that the distances listed in the file have not been adjusted. I calculated the great-circle distances between successive points, using the <a href=\"http://www.movable-type.co.uk/scripts/latlong.html\" rel=\"nofollow\">haversine algorithm</a>; the results agree with the distances in the KML file to within the roundoff error.</p>\n]]>", "author": "<a href=\"http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/h/Hayes:Brian.html\">Brian Hayes</a>", "published": "2015-11-16 19:59:25+00:00", "title": "By: Brian Hayes"}, {"content": "<![CDATA[<p>An error circle does indeed seem more plausible than an error square. In my first calculations I actually used a two-dimensional normal distribution, which seemed even more likely than a uniform circular one. But when I started trying to work out a closed-form expression for the distance between two random points, I wanted the simplest case possible, and having independent, uniformly distributed <em>x</em> and <em>y</em> variables seemed like the best bet.</p>\n<p>I agree that using a black-box app like Runmeter is not the best approach. The Ranacher paper includes some experiments done with better technology.</p>\n]]>", "author": "<a href=\"http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/h/Hayes:Brian.html\">Brian Hayes</a>", "published": "2015-11-16 20:07:27+00:00", "title": "By: Brian Hayes"}]