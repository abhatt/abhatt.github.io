[{"content": "Dear Prof Goldberg,<br /><br />Your post was eye-catching.<br /><br />It turns out that all the used to be NP-complete problems are NP-complete iff (NOT) NP-complete.<br /><br />Just by addressing the question:<br />&quot;Is Paradox Recognition decidable?&quot;<br /><br />Theorem:  P=NP iff P!=NP.<br />SAT is NP-complete  iff  SAT is (NOT) NP-complete <br /><br />The Kleene-Rosser paradox is a counter-example to NP-completeness.<br />================================================<br />Russell&#39;s Paradox: The set that contains all the sets that do not contain themselves. If you ask the question:&quot;Does it contain itself?&quot;. The answer would be it contains itself iff it does not contain itself.<br /><br />The Kleene-Rosser Paradox: Roughly, the function that may not be applied to itself, when combined with itself, it negates itself.<br /><br />This function is a lambda expression as &quot;k:= NOT (x x)&quot; which reads: The meaning of k is:  &quot;x&quot; may not be applied to &quot;x&quot;. Then deriving &quot;kk&quot; results in the paradox:<br />kk= NOT kk<br />If you assume that this function is total, you derive a contradiction, then it is not total. Then, if you assume that it is not total, again, a contradiction is derived, then it is total. So, it is total iff it is not total. The Church-Rosser argument shows that this function is undefined. Here, <br />https://www.academia.edu/7160422/Mathematics_is_Inconsistent<br />it has been shown as defined iff it is undefined and decidable iff it is undecidable, both on the lambda-calculus and Turing machines. Below is a proof sketch.<br /><br />================================================<br />Step 1. Cook_Levin: For all w in L in NP, <br />M accepts  w iff \\exists A(w)=SAT.<br /><br />Step 2. Assume M_KR Kleene-Rosser Paradox Recognizer Turing machine, then:<br />M_KR accepts w_KR iff e^-1(w_KR)= NOT e^-1(w_KR).<br /><br />Step 3. Put M=M_KR and w=w_KR.<br />==&gt; L.H.S. of (1) = L.H.S. of (2).<br />==&gt; R.H.S. of (1) = R.H.S. of (2).<br />==&gt; There is no SAT(w_KR).<br />==&gt; SAT is (NOT) NP-complete.<br />==&gt; SAT is NP-complete &lt;==&gt; SAT is (NOT) NP-complete,<br />         Cook&#39;s proof is still correct despite the contradiction.<br />==&gt; P=NP iff P!=NP.<br />================================================<br /><br />best,<br />Rafee Kamouna.", "author": "Anonymous", "published": "2015-03-26 06:07:06.871000-07:00", "title": ""}, {"content": "Pedantically, isn&#39;t the appropriate term NP-hard rather than NP-complete? For a problem to be NP-complete, it must be in NP, and a search problem cannot be, since it is not a decision problem.", "author": "Anonymous", "published": "2015-03-26 07:57:57.178000-07:00", "title": ""}, {"content": "Answer to comment 2: a partial search problem, e.g. &quot;find a satisfying assignment to a given boolean formula&quot; can be (and is) NP-complete. (The word &quot;partial&quot; refers to the fact that some but not all formulae have solutions, i.e the unsatisfiable ones don&#39;t have solutions. Same usage as &quot;partial function&quot;.<br /><br />NASH and FACTORING are NP total search problems (any instances have easy-to-check solutions). They are not to be confused with total search problems not in NP, like the search for a winning move in chess (to be safe, I should say something like, identify a player who can guarantee not to lose, and a move that retains that guarantee after he makes it). There&#39;s no obvious way to check that such a move has the claimed property.<br /><br />I think the title of the post is technically correct (subject to complexity theoretic assumptions etc), and if you want to replace NP-complete with NP-hard, you would also have to say &quot;NP total search problem&quot; rather than just &quot;total search problem&quot;.", "author": "Paul Goldberg", "published": "2015-03-26 08:56:38.406000-07:00", "title": ""}, {"content": "What about paradox recognition?<br /><br />The banned question in all TCS conferences/journals.<br /><br />best,<br /><br />Rafee Kamouna.", "author": "Anonymous", "published": "2015-03-27 05:37:15.473000-07:00", "title": ""}]