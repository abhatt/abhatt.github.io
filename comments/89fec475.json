[{"content": "<![CDATA[<p>WIth three topics you get comments on all three and reading through them is&#8230; surreal. I&#8217;ll comment briefly on all three</p>\n<p>1) Removing the Large Cardinal hypothesis. Actually I rather liked that a concrete statement seemed to need an LC hypothesis. Oh well.</p>\n<p>2) Data Science- very interesting business model!</p>\n<p>3) Uber- I thought that Uber/Lyft would force Taxi companies to improve their service to compete. NOT their prices, which perhaps they can&#8217;t improve, but their service. I still don&#8217;t know why this hasn&#8217;t happened.</p>\n<p>I&#8217;ve heard that Uber does not want to label as such since then Cab drivers may vandalize their cars.</p>\n]]>", "author": "gasarch", "published": "2016-05-11 16:03:53+00:00", "title": "By: gasarch"}, {"content": "<![CDATA[<p>code golf addict #33: Thanks so much, and sorry for missing the link earlier!!</p>\n]]>", "author": "Scott", "published": "2016-05-11 17:04:15+00:00", "title": "By: Scott"}, {"content": "<![CDATA[<p>gasarch #38, simply because of scalability. Software enables scalability that &#8220;hard business&#8221; aren&#8217;t even able to embrace, they don&#8217;t have the mindset/flexibility necessary. They have been doing business locally for decades&#8230; A company that scales will have a better software and particularly *data* to such a point the local business won&#8217;t be able to compete with&#8230;</p>\n]]>", "author": "Flavio Botelho", "published": "2016-05-11 17:59:40+00:00", "title": "By: Flavio Botelho"}, {"content": "<![CDATA[<p>(1) Something almost worse than the worst case: New Scientist write a piece explaining the result while getting almost everything wrong:</p>\n<p><a href=\"https://www.newscientist.com/article/2087845-this-turing-machine-should-run-forever-unless-maths-is-wrong/?utm_source=NSNS&#038;utm_medium=SOC&#038;utm_campaign=hoot&#038;cmpid=SOC\" rel=\"nofollow\">https://www.newscientist.com/article/2087845-this-turing-machine-should-run-forever-unless-maths-is-wrong/?utm_source=NSNS&#038;utm_medium=SOC&#038;utm_campaign=hoot&#038;cmpid=SOC</a>|NSNS|2016-GLOBAL-hoot</p>\n]]>", "author": "Peter", "published": "2016-05-11 18:47:18+00:00", "title": "By: Peter"}, {"content": "<![CDATA[<p>#35 &#8220;[&#8230;]which are just about shaming the people who use these services (presumably most of us?) as complacent bourgeoisie.&#8221;  </p>\n<p>To be fair, my assumption is also that most of us are indeed both complacent and bourgeois.   I could be wrong about one of those \ud83d\ude42</p>\n<p>About Uber again, the problem really isn&#8217;t only tax.  Imagine if much of the economy of country X took this same form. That is the population of economy X mostly pay 25% of their salary to some company in California (which pays almost no tax within Xistan), all these workers within Xistan are on a minimal salary with none of them in senior or even middle ranked positions in the company, those workers have next to no workers&#8217; right as their government won&#8217;t regulate as they live in fear of the jobs disappearing, their government has no real influence over the company as the company is too big to challenge and in any case is backed by the US government in trade talks, the only way to setup a competing business is a multi-billion pound capital expenditure which people in Xistan simply don&#8217;t have.</p>\n<p>This is a significant triumph of capital over labor which is not necessarily a good thing.</p>\n<p>And&#8230; yes it is the same me.</p>\n]]>", "author": "dorothy", "published": "2016-05-11 19:33:44+00:00", "title": "By: dorothy"}, {"content": "<![CDATA[<blockquote><p><b>Flavio Botelho</b> avows (#38)  &#8220;Software enables scalability that &#8216;hard business&#8217; aren\u2019t even able to embrace, they don\u2019t have the mindset/flexibility necessary.</p></blockquote>\n<p>This statement (which is accurate as far as it goes) expands naturally to<br />\n<blockquote>&#8220;Software maximizes objectives that &#8217;empathic humans&#8217; aren\u2019t willing to embrace, in that humans decline subordination to the inflexible objectives that software prioritizes.&#8221;</p></blockquote>\n<p>It is interesting that David Foster Wallace&#8217;s later essays (which recent <i>Shtetl Optimized</i> comments have mentioned) reflect both propositions.</p>\n<p>Wallace&#8217;s article &#8220;Rhetoric and the math melodrama&#8221; (<i>Science</i> 2000) describes mathematics as a intrinsically &#8220;hard business&#8221; (compatibly with the viewpoint of comment #38).  </p>\n<p>In opposition, Wallace&#8217;s subsequent speech &#8220;This is water&#8221; (Kenyon College Commencement Speech, 2005) concisely summarizes and vigorously advocates (what amounts to) the post-rational faith-and-practice tenets of the <a href=\"https://en.wikipedia.org/wiki/Peace_churches\" rel=\"nofollow\">Peace Churches</a> (during the previous decade Wallace had been intermittently a Mennonite &#8220;attendee&#8221;, as they are called).  </p>\n<p>Search engines readily find both Wallace&#8217;s 2000 article and his 2005 speech. It is greatly to be regretted (as it seems to me), and mighty sobering too, that David Foster Wallace never achieved a personal synthesis of the points-of-view that his two works present.</p>\n<p><b>Conclusion</b>&nbsp; Grappling with these tough issues requires all of the rationality that we can muster, and all of the humanity too.</p>\n]]>", "author": "John Sidles", "published": "2016-05-11 22:25:30+00:00", "title": "By: John Sidles"}, {"content": "<![CDATA[<p>drdeca #32: I think you are right. Your function Q is uncomputable and yet slower-growing than the function I mentioned in #23. However, the function Scott mentions in #26 would be even slower-growing, because an oracle for your Q *would* allow you to solve the halting problem.</p>\n<p>By the way, your technique is interesting. Suppose we apply it to Ackermann&#8217;s function A(n), and we let f(n) = A(1+alpha(n)). Then f(n) is like taking one &#8220;step&#8221; back from A. Meaning, if A is called A_omega, where omega is the first infinite ordinal, then f could be called &#8220;A_{omega-1}&#8221;.</p>\n]]>", "author": "<a href=\"http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/n/Nivasch:Gabriel.html\">Gabriel Nivasch</a>", "published": "2016-05-12 06:34:23+00:00", "title": "By: Gabriel Nivasch"}, {"content": "<![CDATA[<p>Here is a detailed write-up of my 73-state Goldbach TM, which I&#8217;ve reduced to 47 states but which has nonetheless beaten soundly by code golf addict.  <a href=\"https://gist.github.com/jms137/cbb66fb58dde067b0bece12873fadc76\" rel=\"nofollow\">Goldbach 47 Gist</a>  This is well-tested (it can print Goldbach sums very fast, and if 7 is artificially treated as composite, it halts on N=12) and carefully explained, but not formally proven.</p>\n<p>My high-level algorithm is, for each N:</p>\n<p>1. Perform the sieve of Eratosthenes on an array from 1 to N-2, inclusive.  Each element of the arrays is a data/mark pair of cells on the tape.  The data cells hold the primality, and the markers allow the TM to keep track of what it&#8217;s doing.</p>\n<p>2. Simultaneously move a pair of markers inward, checking the primality of each pair from (2,N-2) to (N/2,N/2).  If any of these pairs are both prime, add 2 to N and start over.  Otherwise, halt.</p>\n<p>I haven&#8217;t verified code golf addict&#8217;s solution yet, but the description is sound and I would expect it to need significantly fewer states than mine by virtue of not operating on pairs of cells.  The core unary primality test is similar enough to &#8220;filtering&#8221; phase of my sieve that I make this judgment with confidence.  Nonetheless, I did not make the leap until I saw addict&#8217;s solution, so I happily concede.</p>\n<p>Geoffrey Irving #11: You can download goldbach73.c from the Gist above and verify that I posted its SHA-256 sum a week ago.  Obviously that post wasn&#8217;t supposed to prove anything by itself.  What you didn&#8217;t see is that I&#8217;d e-mailed the file to Scott, so he wasn&#8217;t operating on blind faith.</p>\n]]>", "author": "Jared S", "published": "2016-05-12 14:31:11+00:00", "title": "By: Jared S"}, {"content": "<![CDATA[<p>Jared S #45:<br />\nAlso, I noticed that the sha256 from Geoffrey Irving #11 is<br />\n$ echo &#8220;Yo.&#8221; | sha256sum<br />\n5cebf541ae783c67b3565be8ec0e48f29e41dbf0c7a84269207db84ca28f7259</p>\n<p>I think some of the people here miss the point of the code golf.  The hash is merely a timestamp, and of course the proof will be revealed at the end, but it ruins the fun to see other people&#8217;s solutions before that.</p>\n<p>code golf #33:<br />\nThanks for sharing! I wonder what other CS questions which would be interesting with code golf.</p>\n]]>", "author": "Curious Nerd", "published": "2016-05-12 19:26:51+00:00", "title": "By: Curious Nerd"}, {"content": "<![CDATA[<p>Curious Nerd #46: Wow, do you have a SHA-256 rainbow table? haha</p>\n]]>", "author": "Jared S", "published": "2016-05-12 23:13:51+00:00", "title": "By: Jared S"}]