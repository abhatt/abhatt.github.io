[{"content": "<![CDATA[<p>Julians is passe. The hip new thing is Gregorians.</p>\n]]>", "author": "jd", "published": "2015-07-03 00:36:24+00:00", "title": "By: jd"}, {"content": "<![CDATA[<p>At first glance, it looks like the faster runtime of fibmat is a result of the fact that the algorithm is logarithmic in n, whereas fib is linear. But while this is surely part of the story, the high memory requirements in fib seem to imply a more subtle difference. Could part of the slowness of fib arise from inefficient garbage collection in the loop?</p>\n]]>", "author": "Zvika", "published": "2015-07-05 17:24:23+00:00", "title": "By: Zvika"}, {"content": "<![CDATA[<p>I would bet on that log <em>n</em> algorithm, but there are certainly plenty of other possible factors, and I don&#8217;t know enough to estimate their importance.</p>\n<p>The 5 megabyte memory allocation in the iterative version is probably not enough to tickle the garbage collector, but it <em>does</em> indicate that all the successive fibonacci numbers are being allocated on the heap. (The sum of the decimal digit counts for <code>fib(1) .. fib(10000)</code> is 10,454,023.) One might wish for an in-place algorithm that would reuse a single block of memory, but that&#8217;s a lot to ask with bignums.</p>\n<p>I wondered if the cute tuple shuffle, <code>a, b = b, a+b</code>, might be slowing things down. So I tried rewriting it with an explicit temporary variable for the swap:</p>\n<pre>    for i = 1:n\n        tmp = a\n        a = b\n        b += tmp\n    end\n</pre>\n<p>It made no difference. Memory allocation was identical, and timings were very similar.</p>\n<p>In any case, I wasn&#8217;t trying to benchmark these algorithms. I&#8217;m too much of a beginner in the language to do it right. I just thought it worth noting that this language created by a bunch of matrix mavens implements matrix operations in very spiffy style.</p>\n]]>", "author": "<a href=\"http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/h/Hayes:Brian.html\">Brian Hayes</a>", "published": "2015-07-05 20:58:53+00:00", "title": "By: Brian Hayes"}]