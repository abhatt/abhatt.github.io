<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:planet="http://planet.intertwingly.net/" xmlns:indexing="urn:atom-extension:indexing" indexing:index="no"><access:restriction xmlns:access="http://www.bloglines.com/about/specs/fac-1.0" relationship="deny"/>
  <title>Theory of Computing Blog Aggregator</title>
  <updated>2020-02-26T09:22:02Z</updated>
  <generator uri="http://intertwingly.net/code/venus/">Venus</generator>
  <author>
    <name>Arnab Bhattacharyya, Suresh Venkatasubramanian</name>
    <email>arbhat+cstheoryfeed@gmail.com</email>
  </author>
  <id>http://www.cstheory-feed.org/atom.xml</id>
  <link href="http://www.cstheory-feed.org/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="http://www.cstheory-feed.org/" rel="alternate"/>

  <entry>
    <id>https://decentralizedthoughts.github.io/2020-02-26-selfish-mining/</id>
    <link href="https://decentralizedthoughts.github.io/2020-02-26-selfish-mining/" rel="alternate" type="text/html"/>
    <title>Blockchain Selfish Mining</title>
    <summary>Proof of Work (PoW) Blockchains implement a form of State Machine Replication (SMR). Unlike classical SMR protocols, they are open, i.e., anyone can join the system, and the system incentivizes participants, called miners, to follow the protocol. Therefore, unlike classical SMR protocols, reasoning about blockchain security relies not only on...</summary>
    <updated>2020-02-26T15:00:00Z</updated>
    <published>2020-02-26T15:00:00Z</published>
    <source>
      <id>https://decentralizedthoughts.github.io</id>
      <author>
        <name>Ittai Abraham</name>
      </author>
      <link href="https://decentralizedthoughts.github.io" rel="alternate" type="text/html"/>
      <link href="https://decentralizedthoughts.github.io/feed.xml" rel="self" type="application/atom+xml"/>
      <subtitle>Decentralized thoughts about decentralization</subtitle>
      <title>Decentralized Thoughts</title>
      <updated>2020-02-26T09:22:02Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>https://eccc.weizmann.ac.il/report/2020/026</id>
    <link href="https://eccc.weizmann.ac.il/report/2020/026" rel="alternate" type="text/html"/>
    <title>TR20-026 |  Spectral Sparsification via Bounded-Independence Sampling | 

	Dean Doron, 

	Jack Murtagh, 

	Salil Vadhan, 

	David Zuckerman</title>
    <summary>We give a deterministic, nearly logarithmic-space algorithm for mild spectral sparsification of undirected graphs. Given a weighted, undirected graph $G$ on $n$ vertices described by a binary string of length $N$, an integer $k\leq \log n$ and an error parameter $\varepsilon &gt; 0$, our algorithm runs in space $\tilde{O}(k\log (N\cdot w_{\mathrm{max}}/w_{\mathrm{min}}))$ where $w_{\mathrm{max}}$ and $w_{\mathrm{min}}$ are the maximum and minimum edge weights in $G$, and produces a weighted graph $H$ with $\tilde{O}(n^{1+2/k}/\varepsilon^2)$ expected edges that spectrally approximates $G$, in the sense of Spielmen and Teng [ST04], up to an error of $\varepsilon$.

Our algorithm is based on a new bounded-independence analysis of Spielman and Srivastava's effective resistance based edge sampling algorithm [SS08] and uses results from recent work on space-bounded Laplacian solvers [MRSV17].  In particular, we demonstrate an inherent tradeoff (via upper and lower bounds) between the amount of (bounded) independence used in the edge sampling algorithm, denoted by $k$ above, and the resulting sparsity that can be achieved.</summary>
    <updated>2020-02-26T04:13:25Z</updated>
    <published>2020-02-26T04:13:25Z</published>
    <source>
      <id>https://eccc.weizmann.ac.il/</id>
      <author>
        <name>ECCC papers</name>
      </author>
      <link href="https://eccc.weizmann.ac.il/" rel="alternate" type="text/html"/>
      <link href="https://example.com/feeds/reports/" rel="self" type="application/atom+xml"/>
      <subtitle>Latest Reports published at https://eccc.weizmann.ac.il</subtitle>
      <title>ECCC - Reports</title>
      <updated>2020-02-26T09:20:34Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/2002.10958</id>
    <link href="http://arxiv.org/abs/2002.10958" rel="alternate" type="text/html"/>
    <title>Improved Lower Bound for Competitive Graph Exploration</title>
    <feedworld_mtime>1582675200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/b/Birx:Alexander.html">Alexander Birx</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/d/Disser:Yann.html">Yann Disser</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/h/Hopp:Alexander_V=.html">Alexander V. Hopp</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/k/Karousatou:Christina.html">Christina Karousatou</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/2002.10958">PDF</a><br/><b>Abstract: </b>We give an improved lower bound of 10/3 on the competitive ratio for the
exploration of an undirected, edge-weighted graph with a single agent that
needs to return to the starting location after visiting all vertices. We assume
that the agent has full knowledge of all edges incident to visited vertices,
and, in particular, vertices have unique identifiers. Our bound improves a
lower bound of 2.5 by Dobrev et al. [SIROCCO'12] and also holds for planar
graphs, where it complements an upper bound of 16 by Kalyanasundaram and
Pruhs[TCS'94]. The question whether a constant competitive ratio can be
achieved in general remains open.
</p></div>
    </summary>
    <updated>2020-02-26T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2020-02-26T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/2002.10927</id>
    <link href="http://arxiv.org/abs/2002.10927" rel="alternate" type="text/html"/>
    <title>Integer Plane Multiflow Maximisation:Flow-Cut Gap and One-Quarter-Approximation</title>
    <feedworld_mtime>1582675200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/g/Garg:Naveen.html">Naveen Garg</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/k/Kumar:Nikhil.html">Nikhil Kumar</a>, András Sebő <br/><b>Download:</b> <a href="http://arxiv.org/pdf/2002.10927">PDF</a><br/><b>Abstract: </b>In this paper, we bound the integrality gap and the approximation ratio for
maximum plane multiflow problems and deduce bounds on the flow-cut-gap.
Planarity means here that the union of the supply and demand graph is planar.
We first prove that there exists a multiflow of value at least half of the
capacity of a minimum multicut. We then show how to convert any multiflow into
a half-integer one of value at least half of the original multiflow. Finally,
we round any half-integer multiflow into an integer multiflow, losing again at
most half of the value, in polynomial time, achieving a $1/4$-approximation
algorithm for maximum integer multiflows in the plane, and an integer-flow-cut
gap of $8$.
</p></div>
    </summary>
    <updated>2020-02-26T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2020-02-26T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/2002.10898</id>
    <link href="http://arxiv.org/abs/2002.10898" rel="alternate" type="text/html"/>
    <title>Hedonic Seat Arrangement Problems</title>
    <feedworld_mtime>1582675200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/b/Bodlaender:Hans_L=.html">Hans L. Bodlaender</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/h/Hanaka:Tesshu.html">Tesshu Hanaka</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/j/Jaffke:Lars.html">Lars Jaffke</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/o/Ono:Hirotaka.html">Hirotaka Ono</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/o/Otachi:Yota.html">Yota Otachi</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/z/Zanden:Tom_C=_van_der.html">Tom C. van der Zanden</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/2002.10898">PDF</a><br/><b>Abstract: </b>In this paper, we study a variant of hedonic games, called \textsc{Seat
Arrangement}. The model is defined by a bijection from agents with preferences
to vertices in a graph. The utility of an agent depends on the neighbors
assigned in the graph. More precisely, it is the sum over all neighbors of the
preferences that the agent has towards the agent assigned to the neighbor. We
first consider the price of stability and fairness for different classes of
preferences. In particular, we show that there is an instance such that the
price of fairness ({\sf PoF}) is unbounded in general. Moreover, we show an
upper bound $\tilde{d}(G)$ and an almost tight lower bound $\tilde{d}(G)-1/4$
of {\sf PoF}, where $\tilde{d}(G)$ is the average degree of an input graph.
Then we investigate the computational complexity of problems to find certain
``good'' seat arrangements, say \textsc{Maximum Welfare Arrangement},
\textsc{Maximin Utility Arrangement}, \textsc{Stable Arrangement}, and
\textsc{Envy-free Arrangement}. We give dichotomies of computational complexity
of four \textsc{Seat Arrangement} problems from the perspective of the maximum
order of connected components in an input graph. For the parameterized
complexity, \textsc{Maximum Welfare Arrangement} can be solved in time
$n^{O(\gamma)}$, while it cannot be solved in time $f(\gamma)^{o(\gamma)}$
under ETH, where $\gamma$ is the vertex cover number of an input graph.
Moreover, we show that \textsc{Maximin Utility Arrangement} and
\textsc{Envy-free Arrangement} are weakly NP-hard even on graphs of bounded
vertex cover number. Finally, we prove that determining whether a stable
arrangement can be obtained from a given arrangement by $k$ swaps is W[1]-hard
when parameterized by $k+\gamma$, whereas it can be solved in time $n^{O(k)}$.
</p></div>
    </summary>
    <updated>2020-02-26T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2020-02-26T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/2002.10889</id>
    <link href="http://arxiv.org/abs/2002.10889" rel="alternate" type="text/html"/>
    <title>Efficient and Simple Algorithms for Fault Tolerant Spanners</title>
    <feedworld_mtime>1582675200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/d/Dinitz:Michael.html">Michael Dinitz</a>, Caleb Robelle <br/><b>Download:</b> <a href="http://arxiv.org/pdf/2002.10889">PDF</a><br/><b>Abstract: </b>It was recently shown that a version of the greedy algorithm gives a
construction of fault-tolerant spanners that is size-optimal, at least for
vertex faults. However, the algorithm to construct this spanner is not
polynomial-time, and the best-known polynomial time algorithm is significantly
suboptimal. Designing a polynomial-time algorithm to construct (near-)optimal
fault-tolerant spanners was given as an explicit open problem in the two most
recent papers on fault-tolerant spanners ([Bodwin, Dinitz, Parter, Vassilevka
Williams SODA '18] and [Bodwin, Patel PODC '19]). We give a surprisingly simple
algorithm which runs in polynomial time and constructs fault-tolerant spanners
that are extremely close to optimal (off by only a linear factor in the
stretch) by modifying the greedy algorithm to run in polynomial time. To
complement this result, we also give simple distributed constructions in both
the LOCAL and CONGEST models.
</p></div>
    </summary>
    <updated>2020-02-26T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2020-02-26T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/2002.10888</id>
    <link href="http://arxiv.org/abs/2002.10888" rel="alternate" type="text/html"/>
    <title>Lower bounds for prams over Z</title>
    <feedworld_mtime>1582675200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/p/Pellissier:Luc.html">Luc Pellissier</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/s/Seiller:Thomas.html">Thomas Seiller</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/2002.10888">PDF</a><br/><b>Abstract: </b>This paper presents a new abstract method for proving lower bounds in
computational complexity. Based on the notion of topological entropy for
dynamical systems, the method captures four previous lower bounds results from
the literature in algebraic complexity. Among these results lies Mulmuley's
proof that "prams without bit operations" do not compute the maxflow problem in
polylogarithmic time, which was the best known lower bounds in the quest for a
proof that NC = Ptime. Inspired from a refinement of Steele and Yao's lower
bounds, due to Ben-Or, we strengthen Mulmuley's result to a larger class of
machines, showing that prams over integer do not compute maxflow in
polylogarithmic time.
</p></div>
    </summary>
    <updated>2020-02-26T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Complexity"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CC" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Complexity (cs.CC) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CC updates on arXiv.org</title>
      <updated>2020-02-26T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/2002.10870</id>
    <link href="http://arxiv.org/abs/2002.10870" rel="alternate" type="text/html"/>
    <title>AMP Chain Graphs: Minimal Separators and Structure Learning Algorithms</title>
    <feedworld_mtime>1582675200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/j/Javidian:Mohammad_Ali.html">Mohammad Ali Javidian</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/v/Valtorta:Marco.html">Marco Valtorta</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/j/Jamshidi:Pooyan.html">Pooyan Jamshidi</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/2002.10870">PDF</a><br/><b>Abstract: </b>We address the problem of finding a minimal separator in an
Andersson-Madigan-Perlman chain graph (AMP CG), namely, finding a set Z of
nodes that separate a given non-adjacent pair of nodes such that no proper
subset of Z separates that pair. We analyze several versions of this problem
and offer polynomial-time algorithms for each. These include finding a minimal
separator from a restricted set of nodes, finding a minimal separator for two
given disjoint sets, and testing whether a given separator is minimal. We
provide an extension of the decomposition approach for learning Bayesian
networks (BNs) proposed by (Xie et. al.) to learn AMP CGs, which include BNs as
a special case, under the faithfulness assumption and prove its correctness
using the minimal separator results. The advantages of this decomposition
approach hold in the more general setting: reduced complexity and increased
power of computational independence tests. In addition, we show that the
PC-like algorithm is order-dependent, in the sense that the output can depend
on the order in which the variables are given. We propose two modifications of
the PC-like algorithm that remove part or all of this order-dependence.
Simulations under a variety of settings demonstrate the competitive performance
of our decomposition-based method, called LCD-AMP, in comparison with the
(modified version of) PC-like algorithm. In fact, the decomposition-based
algorithm usually outperforms the PC-like algorithm. We empirically show that
the results of both algorithms are more accurate and stable when the sample
size is reasonably large and the underlying graph is sparse.
</p></div>
    </summary>
    <updated>2020-02-26T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2020-02-26T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/2002.10859</id>
    <link href="http://arxiv.org/abs/2002.10859" rel="alternate" type="text/html"/>
    <title>Well-partitioned chordal graphs: obstruction set and disjoint paths</title>
    <feedworld_mtime>1582675200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/a/Ahn:Jungho.html">Jungho Ahn</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/j/Jaffke:Lars.html">Lars Jaffke</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/k/Kwon:O=joung.html">O-joung Kwon</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/l/Lima:Paloma_T=.html">Paloma T. Lima</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/2002.10859">PDF</a><br/><b>Abstract: </b>We introduce a new subclass of chordal graphs that generalizes split graphs,
which we call well-partitioned chordal graphs. Split graphs are graphs that
admit a partition of the vertex set into cliques that can be arranged in a star
structure, the leaves of which are of size one. Well-partitioned chordal graphs
are a generalization of this concept in the following two ways. First, the
cliques in the partition can be arranged in a tree structure, and second, each
clique is of arbitrary size. We provide a characterization of well-partitioned
chordal graphs by forbidden induced subgraphs, and give a polynomial-time
algorithm that given any graph, either finds an obstruction, or outputs a
partition of its vertex set that asserts that the graph is well-partitioned
chordal. We demonstrate the algorithmic use of this graph class by showing that
two variants of the problem of finding pairwise disjoint paths between k given
pairs of vertices is in FPT parameterized by k on well-partitioned chordal
graphs, while on chordal graphs, these problems are only known to be in XP.
From the other end, we observe that there are problems that are polynomial-time
solvable on split graphs, but become NP-complete on well-partitioned chordal
graphs.
</p></div>
    </summary>
    <updated>2020-02-26T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2020-02-26T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/2002.10841</id>
    <link href="http://arxiv.org/abs/2002.10841" rel="alternate" type="text/html"/>
    <title>Routing in Unit Disk Graphs without Dynamic Headers</title>
    <feedworld_mtime>1582675200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/m/Mulzer:Wolfgang.html">Wolfgang Mulzer</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/w/Willert:Max.html">Max Willert</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/2002.10841">PDF</a><br/><b>Abstract: </b>Let $V\subset\mathbb{R}^2$ be a set of $n$ sites in the plane. The unit disk
graph $DG(V)$ of $V$ is the graph with vertex set $V$ in which two sites $v$
and $w$ are adjacent if and only if their Euclidean distance is at most $1$. We
develop a compact routing scheme for $DG(V)$. The routing scheme preprocesses
$DG(V)$ by assigning a label $l(v)$ to every site $v$ in $V$. After that, for
any two sites $s$ and $t$, the scheme must be able to route a packet from $s$
to $t$ as follows: given the label of a current vertex $r$ (initially, $r=s$)
and the label of the target vertex $t$, the scheme determines a neighbor $r'$
of $r$. Then, the packet is forwarded to $r'$, and the process continues until
the packet reaches its desired target $t$. The resulting path between the
source $s$ and the target $t$ is called the routing path of $s$ and $t$. The
stretch of the routing scheme is the maximum ratio of the total Euclidean
length of the routing path and of the shortest path in $DG(V)$, between any two
sites $s, t \in V$. We show that for any given $\varepsilon&gt;0$, we can
construct a routing scheme for $DG(V)$ with diameter $D$ that achieves stretch
$1+\varepsilon$ and label size $O(\log D\log^3n/\log\log n)$ (the constant in
the $O$-Notation depends on $\varepsilon$). In the past, several routing
schemes for unit disk graphs have been proposed. Our scheme is the first one to
achieve poly-logarithmic label size and arbitrarily small stretch without
storing any additional information in the packet.
</p></div>
    </summary>
    <updated>2020-02-26T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Geometry"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CG" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Geometry (cs.CG) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CG updates on arXiv.org</title>
      <updated>2020-02-26T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/2002.10809</id>
    <link href="http://arxiv.org/abs/2002.10809" rel="alternate" type="text/html"/>
    <title>A Tight Composition Theorem for the Randomized Query Complexity of Partial Functions</title>
    <feedworld_mtime>1582675200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/b/Ben=David:Shalev.html">Shalev Ben-David</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/b/Blais:Eric.html">Eric Blais</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/2002.10809">PDF</a><br/><b>Abstract: </b>We prove two new results about the randomized query complexity of composed
functions. First, we show that the randomized composition conjecture is false:
there are families of partial Boolean functions $f$ and $g$ such that $R(f\circ
g)\ll R(f) R(g)$. In fact, we show that the left hand side can be polynomially
smaller than the right hand side (though in our construction, both sides are
polylogarithmic in the input size of $f$).
</p>
<p>Second, we show that for all $f$ and $g$, $R(f\circ
g)=\Omega(\mathop{noisyR}(f)\cdot R(g))$, where $\mathop{noisyR}(f)$ is a
measure describing the cost of computing $f$ on noisy oracle inputs. We show
that this composition theorem is the strongest possible of its type: for any
measure $M(\cdot)$ satisfying $R(f\circ g)=\Omega(M(f)R(g))$ for all $f$ and
$g$, it must hold that $\mathop{noisyR}(f)=\Omega(M(f))$ for all $f$. We also
give a clean characterization of the measure $\mathop{noisyR}(f)$: it satisfies
$\mathop{noisyR}(f)=\Theta(R(f\circ gapmaj_n)/R(gapmaj_n))$, where $n$ is the
input size of $f$ and $gapmaj_n$ is the $\sqrt{n}$-gap majority function on $n$
bits.
</p></div>
    </summary>
    <updated>2020-02-26T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Complexity"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CC" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Complexity (cs.CC) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CC updates on arXiv.org</title>
      <updated>2020-02-26T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/2002.10802</id>
    <link href="http://arxiv.org/abs/2002.10802" rel="alternate" type="text/html"/>
    <title>A New Minimax Theorem for Randomized Algorithms</title>
    <feedworld_mtime>1582675200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/b/Ben=David:Shalev.html">Shalev Ben-David</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/b/Blais:Eric.html">Eric Blais</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/2002.10802">PDF</a><br/><b>Abstract: </b>The celebrated minimax principle of Yao (1977) says that for any
Boolean-valued function $f$ with finite domain, there is a distribution $\mu$
over the domain of $f$ such that computing $f$ to error $\epsilon$ against
inputs from $\mu$ is just as hard as computing $f$ to error $\epsilon$ on
worst-case inputs. Notably, however, the distribution $\mu$ depends on the
target error level $\epsilon$: the hard distribution which is tight for bounded
error might be trivial to solve to small bias, and the hard distribution which
is tight for a small bias level might be far from tight for bounded error
levels.
</p>
<p>In this work, we introduce a new type of minimax theorem which can provide a
hard distribution $\mu$ that works for all bias levels at once. We show that
this works for randomized query complexity, randomized communication
complexity, some randomized circuit models, quantum query and communication
complexities, approximate polynomial degree, and approximate logrank. We also
prove an improved version of Impagliazzo's hardcore lemma.
</p>
<p>Our proofs rely on two innovations over the classical approach of using Von
Neumann's minimax theorem or linear programming duality. First, we use Sion's
minimax theorem to prove a minimax theorem for ratios of bilinear functions
representing the cost and score of algorithms.
</p>
<p>Second, we introduce a new way to analyze low-bias randomized algorithms by
viewing them as "forecasting algorithms" evaluated by a proper scoring rule.
The expected score of the forecasting version of a randomized algorithm appears
to be a more fine-grained way of analyzing the bias of the algorithm. We show
that such expected scores have many elegant mathematical properties: for
example, they can be amplified linearly instead of quadratically. We anticipate
forecasting algorithms will find use in future work in which a fine-grained
analysis of small-bias algorithms is required.
</p></div>
    </summary>
    <updated>2020-02-26T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Complexity"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CC" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Complexity (cs.CC) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CC updates on arXiv.org</title>
      <updated>2020-02-26T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/2002.10755</id>
    <link href="http://arxiv.org/abs/2002.10755" rel="alternate" type="text/html"/>
    <title>Coloring triangle-free L-graphs with $O(\log\log n)$ colors</title>
    <feedworld_mtime>1582675200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/w/Walczak:Bartosz.html">Bartosz Walczak</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/2002.10755">PDF</a><br/><b>Abstract: </b>It is proved that triangle-free intersection graphs of $n$ L-shapes in the
plane have chromatic number $O(\log\log n)$. This improves the previous bound
of $O(\log n)$ (McGuinness, 1996) and matches the known lower bound
construction (Pawlik et al., 2013).
</p></div>
    </summary>
    <updated>2020-02-26T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Geometry"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CG" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Geometry (cs.CG) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CG updates on arXiv.org</title>
      <updated>2020-02-26T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/2002.10672</id>
    <link href="http://arxiv.org/abs/2002.10672" rel="alternate" type="text/html"/>
    <title>Algorithms for Subpath Convex Hull Queries and Ray-Shooting Among Segments</title>
    <feedworld_mtime>1582675200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/w/Wang:Haitao.html">Haitao Wang</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/2002.10672">PDF</a><br/><b>Abstract: </b>In this paper, we first consider the subpath convex hull query problem: Given
a simple path $\pi$ of $n$ vertices, preprocess it so that the convex hull of
any query subpath of $\pi$ can be quickly obtained. Previously, Guibas,
Hershberger, and Snoeyink [SODA 90'] proposed a data structure of $O(n)$ space
and $O(\log n\log\log n)$ query time; reducing the query time to $O(\log n)$
increases the space to $O(n\log\log n)$. We present an improved result that
uses $O(n)$ space while achieving $O(\log n)$ query time. Like the previous
work, our query algorithm returns a compact interval tree representing the
convex hull so that standard binary-search-based queries on the hull can be
performed in $O(\log n)$ time each. Our new result leads to improvements for
several other problems.
</p>
<p>In particular, with the help of the above result, we present new algorithms
for the ray-shooting problem among segments. Given a set of $n$ (possibly
intersecting) line segments in the plane, preprocess it so that the first
segment hit by a query ray can be quickly found. We give a data structure of
$O(n\log n)$ space that can answer each query in $(\sqrt{n}\log n)$ time. If
the segments are nonintersecting or if the segments are lines, then the space
can be reduced to $O(n)$. All these are classical problems that have been
studied extensively. Previously data structures of $\widetilde{O}(\sqrt{n})$
query time (the notation $\widetilde{O}$ suppresses a polylogarithmic factor)
were known in early 1990s; nearly no progress has been made for over two
decades. For all problems, our results provide improvements by reducing the
space of the data structures by at least a logarithmic factor while the
preprocessing and query times are the same as before or even better.
</p></div>
    </summary>
    <updated>2020-02-26T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Geometry"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CG" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Geometry (cs.CG) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CG updates on arXiv.org</title>
      <updated>2020-02-26T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/2002.10658</id>
    <link href="http://arxiv.org/abs/2002.10658" rel="alternate" type="text/html"/>
    <title>The Power of Recourse: Better Algorithms for Facility Location in Online and Dynamic Models</title>
    <feedworld_mtime>1582675200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/g/Guo:Xiangyu.html">Xiangyu Guo</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/k/Kulkarni:Janardhan.html">Janardhan Kulkarni</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/l/Li:Shi.html">Shi Li</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/x/Xian:Jiayi.html">Jiayi Xian</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/2002.10658">PDF</a><br/><b>Abstract: </b>In this paper we study the facility location problem in the online with
recourse and dynamic algorithm models. In the online with recourse model,
clients arrive one by one and our algorithm needs to maintain good solutions at
all time steps with only a few changes to the previously made decisions (called
recourse). We show that the classic local search technique can lead to a
$(1+\sqrt{2}+\epsilon)$-competitive online algorithm for facility location with
only $O\left(\frac{\log n}{\epsilon}\log\frac1\epsilon\right)$ amortized
facility and client recourse. We then turn to the dynamic algorithm model for
the problem, where the main goal is to design fast algorithms that maintain
good solutions at all time steps. We show that the result for online facility
location, combined with the randomized local search technique of Charikar and
Guha [10], leads to an $O(1+\sqrt{2}+\epsilon)$ approximation dynamic algorithm
with amortized update time of $\tilde O(n)$ in the incremental setting. Notice
that the running time is almost optimal, since in general metric space it takes
$\Omega(n)$ time to specify a new client's position. The approximation factor
of our algorithm also matches the best offline analysis of the classic local
search algorithm. Finally, we study the fully dynamic model for facility
location, where clients can both arrive and depart. Our main result is an
$O(1)$-approximation algorithm in this model with $O(|F|)$ preprocessing time
and $O(\log^3 D)$ amortized update time for the HST metric spaces. Using the
seminal results of Bartal [4] and Fakcharoenphol, Rao and Talwar [17], which
show that any arbitrary $N$-point metric space can be embedded into a
distribution over HSTs such that the expected distortion is at most $O(\log
N)$, we obtain a $O(\log |F|)$ approximation with preprocessing time of
$O(|F|^2\log |F|)$ and $O(\log^3 D)$ amortized update time.
</p></div>
    </summary>
    <updated>2020-02-26T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2020-02-26T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/2002.10654</id>
    <link href="http://arxiv.org/abs/2002.10654" rel="alternate" type="text/html"/>
    <title>The Power of Many Samples in Query Complexity</title>
    <feedworld_mtime>1582675200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b>Andrew Bassilakis, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/d/Drucker:Andrew.html">Andrew Drucker</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/g/G=ouml==ouml=s:Mika.html">Mika Göös</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/h/Hu:Lunjia.html">Lunjia Hu</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/m/Ma:Weiyun.html">Weiyun Ma</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/t/Tan:Li=Yang.html">Li-Yang Tan</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/2002.10654">PDF</a><br/><b>Abstract: </b>The randomized query complexity $R(f)$ of a boolean function
$f\colon\{0,1\}^n\to\{0,1\}$ is famously characterized (via Yao's minimax) by
the least number of queries needed to distinguish a distribution $D_0$ over
$0$-inputs from a distribution $D_1$ over $1$-inputs, maximized over all pairs
$(D_0,D_1)$. We ask: Does this task become easier if we allow query access to
infinitely many samples from either $D_0$ or $D_1$? We show the answer is no:
There exists a hard pair $(D_0,D_1)$ such that distinguishing $D_0^\infty$ from
$D_1^\infty$ requires $\Theta(R(f))$ many queries. As an application, we show
that for any composed function $f\circ g$ we have $R(f\circ g) \geq
\Omega(\mathrm{fbs}(f)R(g))$ where $\mathrm{fbs}$ denotes fractional block
sensitivity.
</p></div>
    </summary>
    <updated>2020-02-26T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Complexity"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CC" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Complexity (cs.CC) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CC updates on arXiv.org</title>
      <updated>2020-02-26T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/2002.10646</id>
    <link href="http://arxiv.org/abs/2002.10646" rel="alternate" type="text/html"/>
    <title>A Note on Empty Balanced Tetrahedra in Two colored Point sets in $\mathbb{R}^3$</title>
    <feedworld_mtime>1582675200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b>José M. Díaz-Bañez, Ruy Fabila-Monroy, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/u/Urrutia:Jorge.html">Jorge Urrutia</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/2002.10646">PDF</a><br/><b>Abstract: </b>Let $S$ be a set of $n$ red and $n$ blue points in general position in
$\mathbb{R}^3$. Let $\tau$ be a tetrahedra with vertices on $S$. We say that
$\tau$ is \emph{empty} if it does not contain any point of $S$ in its interior.
We say that $\tau$ is \emph{balanced} if it contains two blue vertices and two
red vertices. In this paper we show that $S$ spans $\Omega(n^{5/2})$ empty
balanced tetrahedra.
</p></div>
    </summary>
    <updated>2020-02-26T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Geometry"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CG" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Geometry (cs.CG) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CG updates on arXiv.org</title>
      <updated>2020-02-26T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/2002.10553</id>
    <link href="http://arxiv.org/abs/2002.10553" rel="alternate" type="text/html"/>
    <title>Neural Networks are Convex Regularizers: Exact Polynomial-time Convex Optimization Formulations for Two-Layer Networks</title>
    <feedworld_mtime>1582675200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/p/Pilanci:Mert.html">Mert Pilanci</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/e/Ergen:Tolga.html">Tolga Ergen</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/2002.10553">PDF</a><br/><b>Abstract: </b>We develop exact representations of two layer neural networks with rectified
linear units in terms of a single convex program with number of variables
polynomial in the number of training samples and number of hidden neurons. Our
theory utilizes semi-infinite duality and minimum norm regularization.
Moreover, we show that certain standard multi-layer convolutional neural
networks are equivalent to L1 regularized linear models in a polynomial sized
discrete Fourier feature space. We also introduce exact semi-definite
programming representations of convolutional and fully connected linear
multi-layer networks which are polynomial size in both the sample size and
dimension.
</p></div>
    </summary>
    <updated>2020-02-26T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Complexity"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CC" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Complexity (cs.CC) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CC updates on arXiv.org</title>
      <updated>2020-02-26T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/2002.10499</id>
    <link href="http://arxiv.org/abs/2002.10499" rel="alternate" type="text/html"/>
    <title>Upper Tail Analysis of Bucket Sort and Random Tries</title>
    <feedworld_mtime>1582675200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b>Ioana O. Bercea, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/e/Even:Guy.html">Guy Even</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/2002.10499">PDF</a><br/><b>Abstract: </b>Bucket Sort is known to run in expected linear time when the input keys are
distributed independently and uniformly at random in the interval $[0,1)$. The
analysis holds even when a quadratic time algorithm is used to sort the keys in
each bucket. We show how to obtain linear time guarantees on the running time
of Bucket Sort that hold with very high probability. Specifically, we
investigate the asymptotic behavior of the exponent in the upper tail
probability of the running time of Bucket Sort. We consider large additive
deviations from the expectation, of the form $cn$ for large enough (constant)
$c$, where $n$ is the number of keys that are sorted.
</p>
<p>Our analysis shows a profound difference between variants of Bucket Sort that
use a quadratic time algorithm within each bucket and variants that use a
$\Theta(b\log b)$ time algorithm for sorting $b$ keys in a bucket. When a
quadratic time algorithm is used to sort the keys in a bucket, the probability
that Bucket Sort takes $cn$ more time than expected is exponential in
$\Theta(\sqrt{n}\log n)$. When a $\Theta(b\log b)$ algorithm is used to sort
the keys in a bucket, the exponent becomes $\Theta(n)$. We prove this latter
theorem by showing an upper bound on the tail of a random variable defined on
tries, a result which we believe is of independent interest. This result also
enables us to analyze the upper tail probability of a well-studied trie
parameter, the external path length, and show that the probability that it
deviates from its expected value by an additive factor of $cn$ is exponential
in $\Theta(n)$.
</p></div>
    </summary>
    <updated>2020-02-26T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2020-02-26T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/2002.10490</id>
    <link href="http://arxiv.org/abs/2002.10490" rel="alternate" type="text/html"/>
    <title>On the complexity of zero gap MIP*</title>
    <feedworld_mtime>1582675200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/m/Mousavi:Hamoon.html">Hamoon Mousavi</a>, Seyed Sajjad Nezhadi, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/y/Yuen:Henry.html">Henry Yuen</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/2002.10490">PDF</a><br/><b>Abstract: </b>The class $\mathsf{MIP}^*$ is the set of languages decidable by multiprover
interactive proofs with quantum entangled provers. It was recently shown by Ji,
Natarajan, Vidick, Wright and Yuen that $\mathsf{MIP}^*$ is equal to
$\mathsf{RE}$, the set of recursively enumerable languages. In particular this
shows that the complexity of approximating the quantum value of a non-local
game $G$ is equivalent to the complexity of the Halting problem.
</p>
<p>In this paper we investigate the complexity of deciding whether the quantum
value of a non-local game $G$ is exactly $1$. This problem corresponds to a
complexity class that we call zero gap $\mathsf{MIP}^*$, denoted by
$\mathsf{MIP}^*_0$, where there is no promise gap between the verifier's
acceptance probabilities in the YES and NO cases. We prove that
$\mathsf{MIP}^*_0$ extends beyond the first level of the arithmetical hierarchy
(which includes $\mathsf{RE}$ and its complement $\mathsf{coRE}$), and in fact
is equal to $\Pi_2^0$, the class of languages that can be decided by quantified
formulas of the form $\forall y \, \exists z \, R(x,y,z)$.
</p>
<p>Combined with the previously known result that $\mathsf{MIP}^{co}_0$ (the
commuting operator variant of $\mathsf{MIP}^*_0$) is equal to $\mathsf{coRE}$,
our result further highlights the fascinating connection between various models
of quantum multiprover interactive proofs and different classes in
computability theory.
</p></div>
    </summary>
    <updated>2020-02-26T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Complexity"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CC" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Complexity (cs.CC) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CC updates on arXiv.org</title>
      <updated>2020-02-26T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/2002.07152</id>
    <link href="http://arxiv.org/abs/2002.07152" rel="alternate" type="text/html"/>
    <title>Weighted Additive Spanners</title>
    <feedworld_mtime>1582675200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b>Reyan Ahmed, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/b/Bodwin:Greg.html">Greg Bodwin</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/s/Sahneh:Faryad_Darabi.html">Faryad Darabi Sahneh</a>, Stephen Kobourov, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/s/Spence:Richard.html">Richard Spence</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/2002.07152">PDF</a><br/><b>Abstract: </b>A \emph{spanner} of a graph $G$ is a subgraph $H$ that approximately
preserves its pairwise distances. Spanners are commonly applied to compress
computation on metric spaces corresponding to weighted input graphs. Classic
spanner constructions can seamlessly handle edge weights, so long as error is
measured \emph{multiplicatively}. In this work, we investigate whether one can
similarly extend constructions of spanners with \emph{additive} error. These
extensions are not immediate, due to a key lemma about the size of shortest
path neighborhoods that fails for weighted graphs. Despite this, we recover a
suitable amortized version, which lets us prove direct extensions of classic
$+2$ and $+4$ unweighted spanners (both all-pairs and pairwise) to $+2W$ and
$+4W$ weighted spanners, where $W$ is the maximum edge weight. For a technical
reason, the $+6$ unweighted spanner becomes a $+8W$ weighted spanner; closing
this error gap is an interesting remaining open problem.
</p></div>
    </summary>
    <updated>2020-02-26T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2020-02-26T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/2002.10145</id>
    <link href="http://arxiv.org/abs/2002.10145" rel="alternate" type="text/html"/>
    <title>Hardness of equations over finite solvable groups under the exponential time hypothesis</title>
    <feedworld_mtime>1582588800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/w/Wei=szlig=:Armin.html">Armin Weiß</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/2002.10145">PDF</a><br/><b>Abstract: </b>Goldmann and Russell (2002) initiated the study of the complexity of the
equation satisfiability problem in finite groups by showing that it is in P for
nilpotent groups while it is NP-complete for non-solvable groups. Since then,
several results have appeared showing that the problem can be solved in
polynomial time in certain solvable groups of Fitting length two. In this work,
we present the first lower bounds for the equation satisfiability problem in
finite solvable groups: under the assumption of the exponential time
hypothesis, we show that it cannot be in P for any group of Fitting length at
least four and for certain groups of Fitting length three. Moreover, the same
hardness result applies to the equation identity problem.
</p></div>
    </summary>
    <updated>2020-02-25T23:20:42Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Complexity"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CC" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Complexity (cs.CC) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CC updates on arXiv.org</title>
      <updated>2020-02-25T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/2002.10142</id>
    <link href="http://arxiv.org/abs/2002.10142" rel="alternate" type="text/html"/>
    <title>Explicit and Implicit Dynamic Coloring of Graphs with Bounded Arboricity</title>
    <feedworld_mtime>1582588800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/h/Henzinger:Monika.html">Monika Henzinger</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/n/Neumann:Stefan.html">Stefan Neumann</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/w/Wiese:Andreas.html">Andreas Wiese</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/2002.10142">PDF</a><br/><b>Abstract: </b>Graph coloring is a fundamental problem in computer science. We study the
fully dynamic version of the problem in which the graph is undergoing edge
insertions and deletions and we wish to maintain a vertex-coloring with small
update time after each insertion and deletion.
</p>
<p>We show how to maintain an $O(\alpha \lg n)$-coloring with polylogarithmic
update time, where $n$ is the number of vertices in the graph and $\alpha$ is
the current arboricity of the graph. This improves upon a result by Solomon and
Wein (ESA'18) who maintained an $O(\alpha_{\max}\lg^2 n)$-coloring, where
$\alpha_{\max}$ is the maximum arboricity of the graph over all updates.
</p>
<p>Furthermore, motivated by a lower bound by Barba et al. (Algorithmica'19), we
initiate the study of implicit dynamic colorings. Barba et al. showed that
dynamic algorithms with polylogarithmic update time cannot maintain an
$f(\alpha)$-coloring for any function $f$ when the vertex colors are stored
explicitly, i.e., for each vertex the color is stored explicitly in the memory.
Previously, all dynamic algorithms maintained explicit colorings. Therefore, we
propose to study implicit colorings, i.e., the data structure only needs to
offer an efficient query procedure to return the color of a vertex (instead of
storing its color explicitly). We provide an algorithm which breaks the lower
bound and maintains an implicit $2^{O(\alpha)}$-coloring with polylogarithmic
update time. In particular, this yields the first dynamic $O(1)$-coloring for
graphs with constant arboricity such as planar graphs or graphs with bounded
tree-width, which is impossible using explicit colorings.
</p>
<p>We also show how to dynamically maintain a partition of the graph's edges
into $O(\alpha)$ forests with polylogarithmic update time. We believe this data
structure is of independent interest and might have more applications in the
future.
</p></div>
    </summary>
    <updated>2020-02-25T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2020-02-25T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/2002.10047</id>
    <link href="http://arxiv.org/abs/2002.10047" rel="alternate" type="text/html"/>
    <title>Parallel Clique Counting and Peeling Algorithms</title>
    <feedworld_mtime>1582588800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/s/Shi:Jessica.html">Jessica Shi</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/d/Dhulipala:Laxman.html">Laxman Dhulipala</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/s/Shun:Julian.html">Julian Shun</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/2002.10047">PDF</a><br/><b>Abstract: </b>Dense subgraphs capture strong communities in social networks and entities
possessing strong interactions in biological networks. In particular,
$k$-clique counting and listing have applications in identifying important
actors in a graph. However, finding $k$-cliques is computationally expensive,
and thus it is important to have fast parallel algorithms.
</p>
<p>We present a new parallel algorithm for $k$-clique counting that has
polylogarithmic span and is work-efficient with respect to the well-known
sequential algorithm for $k$-clique listing by Chiba and Nishizeki. Our
algorithm can be extended to support listing and enumeration, and is based on
computing low out-degree orientations. We present a new linear-work and
polylogarithmic span algorithm for computing such orientations, and new
parallel algorithms for producing unbiased estimations of clique counts.
Finally, we design new parallel work-efficient algorithms for approximating the
$k$-clique densest subgraph. Our first algorithm gives a $1/k$-approximation
and is based on iteratively peeling vertices with the lowest clique counts; our
algorithm is work-efficient, but we prove that this process is P-complete and
hence does not have polylogarithmic span. Our second algorithm gives a
$1/(k(1+\epsilon))$-approximation, is work-efficient, and has polylogarithmic
span.
</p>
<p>In addition, we implement these algorithms and propose optimizations. On a
60-core machine, we achieve 13.23-38.99x and 1.19-13.76x self-relative parallel
speedup for $k$-clique counting and $k$-clique densest subgraph, respectively.
Compared to the state-of-the-art parallel $k$-clique counting algorithms, we
achieve a 1.31-9.88x speedup, and compared to existing implementations of
$k$-clique densest subgraph, we achieve a 1.01-11.83x speedup. We are able to
compute the $4$-clique counts on the largest publicly-available graph with over
two hundred billion edges.
</p></div>
    </summary>
    <updated>2020-02-25T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2020-02-25T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/2002.10039</id>
    <link href="http://arxiv.org/abs/2002.10039" rel="alternate" type="text/html"/>
    <title>Computing Bi-Lipschitz Outlier Embeddings into the Line</title>
    <feedworld_mtime>1582588800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b>Karine Chubarian, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/s/Sidiropoulos:Anastasios.html">Anastasios Sidiropoulos</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/2002.10039">PDF</a><br/><b>Abstract: </b>The problem of computing a bi-Lipschitz embedding of a graphical metric into
the line with minimum distortion has received a lot of attention. The
best-known approximation algorithm computes an embedding with distortion
$O(c^2)$, where $c$ denotes the optimal distortion [B\u{a}doiu \etal~2005]. We
present a bi-criteria approximation algorithm that extends the above results to
the setting of \emph{outliers}.
</p>
<p>Specifically, we say that a metric space $(X,\rho)$ admits a
$(k,c)$-embedding if there exists $K\subset X$, with $|K|=k$, such that
$(X\setminus K, \rho)$ admits an embedding into the line with distortion at
most $c$. Given $k\geq 0$, and a metric space that admits a $(k,c)$-embedding,
for some $c\geq 1$, our algorithm computes a $({\mathsf p}{\mathsf o}{\mathsf
l}{\mathsf y}(k, c, \log n), {\mathsf p}{\mathsf o}{\mathsf l}{\mathsf
y}(c))$-embedding in polynomial time. This is the first algorithmic result for
outlier bi-Lipschitz embeddings. Prior to our work, comparable outlier
embeddings where known only for the case of additive distortion.
</p></div>
    </summary>
    <updated>2020-02-25T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2020-02-25T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/2002.09972</id>
    <link href="http://arxiv.org/abs/2002.09972" rel="alternate" type="text/html"/>
    <title>Structural Parameterizations with Modulator Oblivion</title>
    <feedworld_mtime>1582588800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/j/Jacob:Ashwin.html">Ashwin Jacob</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/p/Panolan:Fahad.html">Fahad Panolan</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/r/Raman:Venkatesh.html">Venkatesh Raman</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/s/Sahlot:Vibha.html">Vibha Sahlot</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/2002.09972">PDF</a><br/><b>Abstract: </b>It is known that problems like Vertex Cover, Feedback Vertex Set and Odd
Cycle Transversal are polynomial time solvable in the class of chordal graphs.
We consider these problems in a graph that has at most $k$ vertices whose
deletion results in a chordal graph, when parameterized by $k$. While this
investigation fits naturally into the recent trend of what are called
`structural parameterizations', here we assume that the deletion set is not
given.
</p>
<p>One method to solve them is to compute a $k$-sized or an approximate ($f(k)$
sized, for a function $f$) chordal vertex deletion set and then use the
structural properties of the graph to design an algorithm. This method leads to
at least $k^{\mathcal{O}(k)}n^{\mathcal{O}(1)}$ running time when we use the
known parameterized or approximation algorithms for finding a $k$-sized chordal
deletion set on an $n$ vertex graph.
</p>
<p>In this work, we design $2^{\mathcal{O}(k)}n^{\mathcal{O}(1)}$ time
algorithms for these problems. Our algorithms do not compute a chordal vertex
deletion set (or even an approximate solution). Instead, we construct a tree
decomposition of the given graph in time $2^{\mathcal{O}(k)}n^{\mathcal{O}(1)}$
where each bag is a union of four cliques and $\mathcal{O}(k)$ vertices. We
then apply standard dynamic programming algorithms over this special tree
decomposition. This special tree decomposition can be of independent interest.
</p>
<p>Our algorithms are adaptive (robust) in the sense that given an integer $k$,
they detect whether the graph has a chordal vertex deletion set of size at most
$k$ or output the special tree decomposition and solve the problem.
</p>
<p>We also show lower bounds for the problems we deal with under the Strong
Exponential Time Hypothesis (SETH).
</p></div>
    </summary>
    <updated>2020-02-25T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2020-02-25T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/2002.09925</id>
    <link href="http://arxiv.org/abs/2002.09925" rel="alternate" type="text/html"/>
    <title>ORCSolver: An Efficient Solver for Adaptive GUI Layout with OR-Constraints</title>
    <feedworld_mtime>1582588800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/j/Jiang:Yue.html">Yue Jiang</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/s/Stuerzlinger:Wolfgang.html">Wolfgang Stuerzlinger</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/z/Zwicker:Matthias.html">Matthias Zwicker</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/l/Lutteroth:Christof.html">Christof Lutteroth</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/2002.09925">PDF</a><br/><b>Abstract: </b>OR-constrained (ORC) graphical user interface layouts unify conventional
constraint-based layouts with flow layouts, which enables the definition of
flexible layouts that adapt to screens with different sizes, orientations, or
aspect ratios with only a single layout specification. Unfortunately, solving
ORC layouts with current solvers is time-consuming and the needed time
increases exponentially with the number of widgets and constraints. To address
this challenge, we propose ORCSolver, a novel solving technique for adaptive
ORC layouts, based on a branch-and-bound approach with heuristic preprocessing.
We demonstrate that ORCSolver simplifies ORC specifications at runtime and our
approach can solve ORC layout specifications efficiently at near-interactive
rates.
</p></div>
    </summary>
    <updated>2020-02-25T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2020-02-25T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/2002.09916</id>
    <link href="http://arxiv.org/abs/2002.09916" rel="alternate" type="text/html"/>
    <title>Extended formulation and valid inequalities for the multi-item inventory lot-sizing problem with supplier selection</title>
    <feedworld_mtime>1582588800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b>Leopoldo E. Cárdenas-Barrón, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/m/Melo:Rafael_A=.html">Rafael A. Melo</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/s/Santos:Marcio_C=.html">Marcio C. Santos</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/2002.09916">PDF</a><br/><b>Abstract: </b>This paper considers the multi-item inventory lot-sizing problem with
supplier selection. The problem consists in determining an optimal purchasing
plan in order to satisfy dynamic deterministic demands for multiple items over
a finite planning horizon, taking into account the fact that multiple suppliers
are available to purchase from. As the complexity of the problem was an open
question, we show that it is NP-hard. We propose a facility location extended
formulation for the problem which can be preprocessed based on the cost
structure and describe new valid inequalities in the original space of
variables, which we denote $(l,S_j)$-inequalities. Furthermore, we study the
projection of the extended formulation into the original space and show the
connection between the inequalities generated by this projection and the newly
proposed $(l,S_j)$-inequalities. Additionally, we present a simple and easy to
implement yet very effective MIP (mixed integer programming) heuristic using
the extended formulation. Computational results show that the preprocessed
facility location extended formulation outperforms all other formulations for
small and medium instances, as it can solve nearly all of them to optimality
within the time limit. Moreover, the presented MIP heuristic is able to obtain
solutions which strictly improve those achieved by a state-of-the art method
for all the large benchmark instances.
</p></div>
    </summary>
    <updated>2020-02-25T23:21:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Complexity"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CC" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Complexity (cs.CC) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CC updates on arXiv.org</title>
      <updated>2020-02-25T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/2002.09885</id>
    <link href="http://arxiv.org/abs/2002.09885" rel="alternate" type="text/html"/>
    <title>Speeding up the AIFV-$2$ dynamic programs by two orders of magnitude using Range Minimum Queries</title>
    <feedworld_mtime>1582588800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b>Mordecai Golin, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/h/Harb:Elfarouk.html">Elfarouk Harb</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/2002.09885">PDF</a><br/><b>Abstract: </b>AIFV-$2$ codes are a new method for constructing lossless codes for
memoryless sources that provide better worst-case redundancy than Huffman
codes. They do this by using two code trees instead of one and also allowing
some bounded delay in the decoding process. Known algorithms for constructing
AIFV-code are iterative; at each step they replace the current code tree pair
with a "better" one. The current state of the art for performing this
replacement is a pair of Dynamic Programming (DP) algorithms that use $O(n^5)$
time to fill in two tables, each of size $O(n^3)$ (where $n$ is the number of
different characters in the source).
</p>
<p>This paper describes how to reduce the time for filling in the DP tables by
two orders of magnitude, down to $O(n^3)$. It does this by introducing a
grouping technique that permits separating the $\Theta(n^3)$-space tables into
$\Theta(n)$ groups, each of size $O(n^2)$, and then using Two-Dimensional
Range-Minimum Queries (RMQs) to fill in that group's table entries in $O(n^2)$
time. This RMQ speedup technique seems to be new and might be of independent
interest.
</p></div>
    </summary>
    <updated>2020-02-25T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2020-02-25T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/2002.09880</id>
    <link href="http://arxiv.org/abs/2002.09880" rel="alternate" type="text/html"/>
    <title>Mixed Integer Programming for Searching Maximum Quasi-Bicliques</title>
    <feedworld_mtime>1582588800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/i/Ignatov:Dmitry_I=.html">Dmitry I. Ignatov</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/i/Ivanova:Polina.html">Polina Ivanova</a>, Albina Zamaletdinova <br/><b>Download:</b> <a href="http://arxiv.org/pdf/2002.09880">PDF</a><br/><b>Abstract: </b>This paper is related to the problem of finding the maximal quasi-bicliques
in a bipartite graph (bigraph). A quasi-biclique in the bigraph is its "almost"
complete subgraph. The relaxation of completeness can be understood variously;
here, we assume that the subgraph is a $\gamma$-quasi-biclique if it lacks a
certain number of edges to form a biclique such that its density is at least
$\gamma \in (0,1]$. For a bigraph and fixed $\gamma$, the problem of searching
for the maximal quasi-biclique consists of finding a subset of vertices of the
bigraph such that the induced subgraph is a quasi-biclique and its size is
maximal for a given graph. Several models based on Mixed Integer Programming
(MIP) to search for a quasi-biclique are proposed and tested for working
efficiency. An alternative model inspired by biclustering is formulated and
tested; this model simultaneously maximizes both the size of the quasi-biclique
and its density, using the least-square criterion similar to the one exploited
by triclustering \textsc{TriBox}.
</p></div>
    </summary>
    <updated>2020-02-25T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2020-02-25T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/2002.09812</id>
    <link href="http://arxiv.org/abs/2002.09812" rel="alternate" type="text/html"/>
    <title>Sketching Transformed Matrices with Applications to Natural Language Processing</title>
    <feedworld_mtime>1582588800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/l/Liang:Yingyu.html">Yingyu Liang</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/s/Song:Zhao.html">Zhao Song</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/w/Wang:Mengdi.html">Mengdi Wang</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/y/Yang:Lin_F=.html">Lin F. Yang</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/y/Yang:Xin.html">Xin Yang</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/2002.09812">PDF</a><br/><b>Abstract: </b>Suppose we are given a large matrix $A=(a_{i,j})$ that cannot be stored in
memory but is in a disk or is presented in a data stream. However, we need to
compute a matrix decomposition of the entry-wisely transformed matrix,
$f(A):=(f(a_{i,j}))$ for some function $f$. Is it possible to do it in a space
efficient way? Many machine learning applications indeed need to deal with such
large transformed matrices, for example word embedding method in NLP needs to
work with the pointwise mutual information (PMI) matrix, while the entrywise
transformation makes it difficult to apply known linear algebraic tools.
Existing approaches for this problem either need to store the whole matrix and
perform the entry-wise transformation afterwards, which is space consuming or
infeasible, or need to redesign the learning method, which is application
specific and requires substantial remodeling.
</p>
<p>In this paper, we first propose a space-efficient sketching algorithm for
computing the product of a given small matrix with the transformed matrix. It
works for a general family of transformations with provable small error bounds
and thus can be used as a primitive in downstream learning tasks. We then apply
this primitive to a concrete application: low-rank approximation. We show that
our approach obtains small error and is efficient in both space and time. We
complement our theoretical results with experiments on synthetic and real data.
</p></div>
    </summary>
    <updated>2020-02-25T23:22:17Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2020-02-25T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/2002.09807</id>
    <link href="http://arxiv.org/abs/2002.09807" rel="alternate" type="text/html"/>
    <title>Online Stochastic Max-Weight Matching: prophet inequality for vertex and edge arrival models</title>
    <feedworld_mtime>1582588800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/e/Ezra:Tomer.html">Tomer Ezra</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/f/Feldman:Michal.html">Michal Feldman</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/g/Gravin:Nick.html">Nick Gravin</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/t/Tang:Zhihao_Gavin.html">Zhihao Gavin Tang</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/2002.09807">PDF</a><br/><b>Abstract: </b>We provide prophet inequality algorithms for online weighted matching in
general (non-bipartite) graphs, under two well-studied arrival models, namely
edge arrival and vertex arrival. The weight of each edge is drawn independently
from an a-priori known probability distribution. Under edge arrival, the weight
of each edge is revealed upon arrival, and the algorithm decides whether to
include it in the matching or not. Under vertex arrival, the weights of all
edges from the newly arriving vertex to all previously arrived vertices are
revealed, and the algorithm decides which of these edges, if any, to include in
the matching. To study these settings, we introduce a novel unified framework
of batched prophet inequalities that captures online settings where elements
arrive in batches; in particular it captures matching under the two
aforementioned arrival models. Our algorithms rely on the construction of
suitable online contention resolution scheme (OCRS). We first extend the
framework of OCRS to batched-OCRS, we then establish a reduction from batched
prophet inequality to batched OCRS, and finally we construct batched OCRSs with
selectable ratios of 0.337 and 0.5 for edge and vertex arrival models,
respectively. Both results improve the state of the art for the corresponding
settings. For the vertex arrival, our result is tight. Interestingly, a
pricing-based prophet inequality with comparable competitive ratios is unknown.
</p></div>
    </summary>
    <updated>2020-02-25T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2020-02-25T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/2002.09745</id>
    <link href="http://arxiv.org/abs/2002.09745" rel="alternate" type="text/html"/>
    <title>Differentially Private Set Union</title>
    <feedworld_mtime>1582588800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/g/Gopi:Sivakanth.html">Sivakanth Gopi</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/g/Gulhane:Pankaj.html">Pankaj Gulhane</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/k/Kulkarni:Janardhan.html">Janardhan Kulkarni</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/s/Shen:Judy_Hanwen.html">Judy Hanwen Shen</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/s/Shokouhi:Milad.html">Milad Shokouhi</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/y/Yekhanin:Sergey.html">Sergey Yekhanin</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/2002.09745">PDF</a><br/><b>Abstract: </b>We study the basic operation of set union in the global model of differential
privacy. In this problem, we are given a universe $U$ of items, possibly of
infinite size, and a database $D$ of users. Each user $i$ contributes a subset
$W_i \subseteq U$ of items. We want an ($\epsilon$,$\delta$)-differentially
private algorithm which outputs a subset $S \subset \cup_i W_i$ such that the
size of $S$ is as large as possible. The problem arises in countless real world
applications; it is particularly ubiquitous in natural language processing
(NLP) applications as vocabulary extraction. For example, discovering words,
sentences, $n$-grams etc., from private text data belonging to users is an
instance of the set union problem.
</p>
<p>Known algorithms for this problem proceed by collecting a subset of items
from each user, taking the union of such subsets, and disclosing the items
whose noisy counts fall above a certain threshold. Crucially, in the above
process, the contribution of each individual user is always independent of the
items held by other users, resulting in a wasteful aggregation process, where
some item counts happen to be way above the threshold. We deviate from the
above paradigm by allowing users to contribute their items in a
$\textit{dependent fashion}$, guided by a $\textit{policy}$. In this new
setting ensuring privacy is significantly delicate. We prove that any policy
which has certain $\textit{contractive}$ properties would result in a
differentially private algorithm. We design two new algorithms, one using
Laplace noise and other Gaussian noise, as specific instances of policies
satisfying the contractive properties. Our experiments show that the new
algorithms significantly outperform previously known mechanisms for the
problem.
</p></div>
    </summary>
    <updated>2020-02-25T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2020-02-25T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/2002.09740</id>
    <link href="http://arxiv.org/abs/2002.09740" rel="alternate" type="text/html"/>
    <title>(Faster) Multi-Sided Boundary Labelling</title>
    <feedworld_mtime>1582588800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/b/Bose:Prosenjit.html">Prosenjit Bose</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/m/Mehrabi:Saeed.html">Saeed Mehrabi</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/m/Mondal:Debajyoti.html">Debajyoti Mondal</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/2002.09740">PDF</a><br/><b>Abstract: </b>A 1-bend boundary labelling problem consists of an axis-aligned rectangle
$B$, $n$ points (called sites) in the interior, and $n$ points (called ports)
on the labels along the boundary of $B$. The goal is to find a set of $n$
axis-aligned curves (called leaders), each having at most one bend and
connecting one site to one port, such that the leaders are pairwise disjoint. A
1-bend boundary labelling problem is $k$-sided ($1\leq k\leq 4$) if the ports
appear on $k$ different sides of $B$. Kindermann et al. ["Multi-Sided Boundary
Labeling", Algorithmica, 76(1): 225-258, 2016] showed that the 1-bend
three-sided and four-sided boundary labelling problems can be solved in
$O(n^4)$ and $O(n^9)$ time, respectively. Bose et al. [SWAT, 12:1-12:14, 2018]
improved the latter running time to $O(n^6)$ by reducing the problem to
computing maximum independent set in an outerstring graph. In this paper, we
improve both previous results by giving new algorithms with running times
$O(n^3\log n)$ and $O(n^5)$ to solve the 1-bend three-sided and four-sided
boundary labelling problems, respectively.
</p></div>
    </summary>
    <updated>2020-02-25T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Geometry"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CG" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Geometry (cs.CG) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CG updates on arXiv.org</title>
      <updated>2020-02-25T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/2002.09725</id>
    <link href="http://arxiv.org/abs/2002.09725" rel="alternate" type="text/html"/>
    <title>Testing the Agreement of Trees with Internal Labels</title>
    <feedworld_mtime>1582588800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/f/Fern=aacute=ndez=Baca:David.html">David Fernández-Baca</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/l/Liu:Lei.html">Lei Liu</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/2002.09725">PDF</a><br/><b>Abstract: </b>The input to the agreement problem is a collection $P = \{T_1, T_2, \dots ,
T_k\}$ of phylogenetic trees, called input trees, over partially overlapping
sets of taxa. The question is whether there exists a tree $T$, called an
agreement tree, whose taxon set is the union of the taxon sets of the input
trees, such that for each $i \in \{1, 2, \dots , k\}$, the restriction of $T$
to the taxon set of $T_i$ is isomorphic to $T_i$. We give a $O(n k (\sum_{i \in
[k]} d_i + \log^2(nk)))$ algorithm for a generalization of the agreement
problem in which the input trees may have internal labels, where $n$ is the
total number of distinct taxa in $P$, $k$ is the number of trees in $P$, and
$d_i$ is the maximum number of children of a node in $T_i$.
</p></div>
    </summary>
    <updated>2020-02-25T23:26:37Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2020-02-25T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/2002.09722</id>
    <link href="http://arxiv.org/abs/2002.09722" rel="alternate" type="text/html"/>
    <title>Checking Phylogenetic Decisiveness in Theory and in Practice</title>
    <feedworld_mtime>1582588800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b>Ghazaleh Parvini, Katherine Braught, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/f/Fern=aacute=ndez=Baca:David.html">David Fernández-Baca</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/2002.09722">PDF</a><br/><b>Abstract: </b>Suppose we have a set $X$ consisting of $n$ taxa and we are given information
from $k$ loci from which to construct a phylogeny for $X$. Each locus offers
information for only a fraction of the taxa. The question is whether this data
suffices to construct a reliable phylogeny. The decisiveness problem expresses
this question combinatorially. Although a precise characterization of
decisiveness is known, the complexity of the problem is open. Here we relate
decisiveness to a hypergraph coloring problem. We use this idea to (1) obtain
lower bounds on the amount of coverage needed to achieve decisiveness, (2)
devise an exact algorithm for decisiveness, (3) develop problem reduction
rules, and use them to obtain efficient algorithms for inputs with few loci,
and (4) devise an integer linear programming formulation of the decisiveness
problem, which allows us to analyze data sets that arise in practice.
</p></div>
    </summary>
    <updated>2020-02-25T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2020-02-25T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/2002.09707</id>
    <link href="http://arxiv.org/abs/2002.09707" rel="alternate" type="text/html"/>
    <title>Compression with wildcards: All spanning trees</title>
    <feedworld_mtime>1582588800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/w/Wild:Marcel.html">Marcel Wild</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/2002.09707">PDF</a><br/><b>Abstract: </b>By processing all minimal cutsets of a graph G, and by using novel wildcards,
all spanning trees of G can be compactly encoded. Thus, different from all
previous enumeration schemes, the spanning trees are not generated one-by-one.
The Mathematica implementation of one of our algorithms generated for a random
(11,50)-graph its 819'603'181 spanning trees, in bundles of size about 400,
within 52 seconds.
</p></div>
    </summary>
    <updated>2020-02-25T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2020-02-25T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/2002.09610</id>
    <link href="http://arxiv.org/abs/2002.09610" rel="alternate" type="text/html"/>
    <title>Improved MPC Algorithms for MIS, Matching, and Coloring on Trees and Beyond</title>
    <feedworld_mtime>1582588800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/g/Ghaffari:Mohsen.html">Mohsen Ghaffari</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/g/Grunau:Christoph.html">Christoph Grunau</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/j/Jin:Ce.html">Ce Jin</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/2002.09610">PDF</a><br/><b>Abstract: </b>We present $O(\log\log n)$ round scalable Massively Parallel Computation
algorithms for maximal independent set and maximal matching, in trees and more
generally graphs of bounded arboricity, as well as for constant coloring trees.
Following the standards, by a scalable MPC algorithm, we mean that these
algorithms can work on machines that have capacity/memory as small as
$n^{\delta}$ for any positive constant $\delta&lt;1$. Our results improve over the
$O(\log^2\log n)$ round algorithms of Behnezhad et al. [PODC'19]. Moreover, our
matching algorithm is presumably optimal as its bound matches an
$\Omega(\log\log n)$ conditional lower bound of Ghaffari, Kuhn, and Uitto
[FOCS'19].
</p></div>
    </summary>
    <updated>2020-02-25T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2020-02-25T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/2002.09597</id>
    <link href="http://arxiv.org/abs/2002.09597" rel="alternate" type="text/html"/>
    <title>On Layered Fan-Planar Graph Drawings</title>
    <feedworld_mtime>1582588800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b>Therese Biedl, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/c/Chaplick:Steven.html">Steven Chaplick</a>, Jiři Fiala, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/k/Kaufmann:Michael.html">Michael Kaufmann</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/m/Montecchiani:Fabrizio.html">Fabrizio Montecchiani</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/n/N=ouml=llenburg:Martin.html">Martin Nöllenburg</a>, Chrysanthi Raftopoulou <br/><b>Download:</b> <a href="http://arxiv.org/pdf/2002.09597">PDF</a><br/><b>Abstract: </b>In this paper, we study fan-planar drawings that use $h$ layers and are
proper, i.e., edges connect adjacent layers. We show that if the embedding of
the graph is fixed, then testing the existence of such drawings is
fixed-parameter tractable in $h$, via a reduction to a similar result for
planar graphs by Dujmovi\'{c} et al. If the embedding is not fixed, then we
give partial results for $h=2$: It was already known how to test existence of
fan-planar proper 2-layer drawings for 2-connected graphs, and we show here how
to test this for trees. Along the way, we exhibit other interesting results for
graphs with a fan-planar proper $h$-layer drawings; in particular we bound
their pathwidth and show that they have a bar-1-visibility representation.
</p></div>
    </summary>
    <updated>2020-02-25T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Geometry"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CG" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Geometry (cs.CG) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CG updates on arXiv.org</title>
      <updated>2020-02-25T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/2002.09534</id>
    <link href="http://arxiv.org/abs/2002.09534" rel="alternate" type="text/html"/>
    <title>Hyperbolic Minesweeper is in P</title>
    <feedworld_mtime>1582588800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b>Eryk Kopczyński <br/><b>Download:</b> <a href="http://arxiv.org/pdf/2002.09534">PDF</a><br/><b>Abstract: </b>We show that, while Minesweeper is NP-complete, its hyperbolic variant is in
P. Our proof does not rely on the rules of Minesweeper, but is valid for any
puzzle based on satisfying local constraints on a graph embedded in the
hyperbolic plane.
</p></div>
    </summary>
    <updated>2020-02-25T23:21:13Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Complexity"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CC" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Complexity (cs.CC) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CC updates on arXiv.org</title>
      <updated>2020-02-25T01:30:00Z</updated>
    </source>
  </entry>
</feed>
