<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:planet="http://planet.intertwingly.net/" xmlns:indexing="urn:atom-extension:indexing" indexing:index="no"><access:restriction xmlns:access="http://www.bloglines.com/about/specs/fac-1.0" relationship="deny"/>
  <title>Theory of Computing Blog Aggregator</title>
  <updated>2019-11-21T06:21:52Z</updated>
  <generator uri="http://intertwingly.net/code/venus/">Venus</generator>
  <author>
    <name>Arnab Bhattacharyya, Suresh Venkatasubramanian</name>
    <email>arbhat+cstheoryfeed@gmail.com</email>
  </author>
  <id>http://www.cstheory-feed.org/atom.xml</id>
  <link href="http://www.cstheory-feed.org/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="http://www.cstheory-feed.org/" rel="alternate"/>

  <entry xml:lang="en-us">
    <id>https://eccc.weizmann.ac.il/report/2019/167</id>
    <link href="https://eccc.weizmann.ac.il/report/2019/167" rel="alternate" type="text/html"/>
    <title>TR19-167 |  UTIME Easy-witness Lemma &amp;amp; Some Consequences | 

	Anant Dhayal, 

	Russell Impagliazzo</title>
    <summary>We prove an easy-witness lemma ($\ewl$) for unambiguous non-deterministic verfiers. We show that if $\utime(t)\subset\mathcal{C}$, then for every $L\in\utime(t)$, for every $\utime(t)$ verifier $V$ for $L$, and for every $x\in L$, there is a certificate $y$ satisfing $V(x,y)=1$, that can be encoded as a truth-table of a $\mathcal{C}$ circuit. Our technique is simple compared to the $\ntime$ $\ewl$s \cite{IKW02,Wil-ES13,MW18}, and yields fine-grained results in terms of the time and size parameters. It also works for all {\it typical} non-uniform circuit classes without any additional machinery. Using this $\ewl$ we prove a Karp-Lipton \cite{KL80} style theorem ($\klt$) for $\uexp$. We show that $\uexp\subset\size(poly)\implies\uexp=\ma$. We also prove similar $\ewl$ and $\klt$ for $\uexp\cap\couexp$ and $\fewexp$.

Circuit lower bound techniques that entail natural properties of Razborov and Rudich \cite{RR97} are called natural, and are known to contradict widely believed cryptographic assumptions in the course of proving strong lower bounds. Thus attempts have been made to understand un-natural techniques. Natural properties satisfy three conditions: usefulness, constructiveness, and largeness. Usefulness is unavoidable in any lower-bound technique. In \cite{Wil-NP16,Ig13} it was shown that obtaining $\nexp$ lower bounds is equivalent to obtaining $\pt$-constructive (with $\log n$ advice) properties.

In this paper we consider properties that avoid largeness. We introduce a new notion called unique properties, which is opposite to natural properties in the sense of largeness. A unique property contains exactly one element of each input length (that is a power of 2). We show that $\pt$-constructivity and uniqueness (opposite of largeness) both are unavoidable for certain lower bounds. We prove, $\uexp\cap\couexp\not\subset\mathcal{C}$ if and only if there is a $\pt$-constructive unique property against $\mathcal{C}$. We also establish equivalences between lower bounds against $\uexp$ (with and without advice), and the existence of different restrictions of $\pt$-constructive unique properties that use advice. 

The ``derandomization (of $\bpp$) from uniform/non-uniform lower bounds for $\Gamma$'' type of results are known for $\Gamma=\expo,\nexp,\nexp\cap\conexp,\rexp$ \cite{NW94,BFNW93,IW01,IKW02,Wil-NP16}. Using the above equivalences we obtain a super-set of these results that also includes the classes $\uexp,\uexp\cap\couexp,\zpexp$.  

One important application of the $\nexp$ $\ewl$ and $\klt$ is the connection between fast ($\sat$ and learning) algorithms and $\nexp$ lower bounds \cite{Wil-ES13,FK09,Ig13}. Using our $\utime$ $\ewl$ and $\klt$ we derive connections between fast unambiguous algorithms and $\utime$ lower bounds. Finally we show results that generalize the lower bound frameworks -- that work only for unrestricted Boolean circuits -- such that they work for any restricted typical circuit class. This will help us to get lower bounds against any typical circuit class from fast algorithms that work for that particular class (and not for the super-class of unrestricted Boolean circuits).</summary>
    <updated>2019-11-21T01:41:00Z</updated>
    <published>2019-11-21T01:41:00Z</published>
    <source>
      <id>https://eccc.weizmann.ac.il/</id>
      <author>
        <name>ECCC papers</name>
      </author>
      <link href="https://eccc.weizmann.ac.il/" rel="alternate" type="text/html"/>
      <link href="https://example.com/feeds/reports/" rel="self" type="application/atom+xml"/>
      <subtitle>Latest Reports published at https://eccc.weizmann.ac.il</subtitle>
      <title>ECCC - Reports</title>
      <updated>2019-11-21T06:20:26Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1911.09077</id>
    <link href="http://arxiv.org/abs/1911.09077" rel="alternate" type="text/html"/>
    <title>Grammar Compressed Sequences with Rank/Select Support</title>
    <feedworld_mtime>1574294400</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b>Alberto Ordóñez, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/n/Navarro:Gonzalo.html">Gonzalo Navarro</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/b/Brisaboa:Nieves_R=.html">Nieves R. Brisaboa</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1911.09077">PDF</a><br/><b>Abstract: </b>Sequence representations supporting not only direct access to their symbols,
but also rank/select operations, are a fundamental building block in many
compressed data structures. Several recent applications need to represent
highly repetitive sequences, and classical statistical compression proves
ineffective. We introduce, instead, grammar-based representations for
repetitive sequences, which use up to 6% of the space needed by statistically
compressed representations, and support direct access and rank/select
operations within tens of microseconds. We demonstrate the impact of our
structures in text indexing applications.
</p></div>
    </summary>
    <updated>2019-11-21T02:40:24Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-11-21T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1911.09065</id>
    <link href="http://arxiv.org/abs/1911.09065" rel="alternate" type="text/html"/>
    <title>The complexity of promise SAT on non-Boolean domains</title>
    <feedworld_mtime>1574294400</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/b/Brandts:Alex.html">Alex Brandts</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/w/Wrochna:Marcin.html">Marcin Wrochna</a>, Stanislav Živný <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1911.09065">PDF</a><br/><b>Abstract: </b>While 3-SAT is NP-hard, 2-SAT is solvable in polynomial time. Austrin,
Guruswami, and H\r{a}stad established, in precise terms, that the transition
from tractability to hardness occurs just after 2 [FOCS'14/SICOMP'17]. They
showed that the problem of distinguishing k-CNF formulas that are g-satisfiable
(i.e. some assignment satisfies at least g literals in every clause) from those
that are not even 1-satisfiable is NP-hard if $\frac{g}{k} &lt; \frac{1}{2}$ and
is in P otherwise. We study a generalisation of SAT on arbitrary finite
domains, with clauses that are disjunctions of unary constraints, and establish
analogous behaviour. Thus we give a dichotomy for a natural fragment of promise
constraint satisfaction problems (PCSPs) on arbitrary finite domains.
</p></div>
    </summary>
    <updated>2019-11-21T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Complexity"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CC" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Complexity (cs.CC) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CC updates on arXiv.org</title>
      <updated>2019-11-21T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1911.09044</id>
    <link href="http://arxiv.org/abs/1911.09044" rel="alternate" type="text/html"/>
    <title>New structures to solve aggregated queries for trips over public transportation networks</title>
    <feedworld_mtime>1574294400</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/b/Brisaboa:Nieves_R=.html">Nieves R. Brisaboa</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/f/Fari=ntilde=a:Antonio.html">Antonio Fariña</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/g/Galaktionov:Daniil.html">Daniil Galaktionov</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/r/Rodeiro:Tirso_V=.html">Tirso V. Rodeiro</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/r/Rodr=iacute=guez:M=_Andrea.html">M. Andrea Rodríguez</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1911.09044">PDF</a><br/><b>Abstract: </b>Representing the trajectories of mobile objects is a hot topic from the
widespread use of smartphones and other GPS devices. However, few works have
focused on representing trips over public transportation networks (buses,
subway, and trains) where a user's trips can be seen as a sequence of stages
performed within a vehicle shared with many other users. In this context,
representing vehicle journeys reduces the redundancy because all the passengers
inside a vehicle share the same arrival time for each stop. In addition, each
vehicle journey follows exactly the sequence of stops corresponding to its
line, which makes it unnecessary to represent that sequence for each journey.
</p>
<p>To solve data management for transportation systems, we designed a conceptual
model that gave us a better insight into this data domain and allowed us the
definition of relevant terms and the detection of redundancy sources among
those data. Then, we designed two compact representations focused on users'
trips (TTCTR) and on vehicle trips (AcumM), respectively. Each approach owns
some strengths and is able to answer some queries efficiently.
</p>
<p>We include experimental results over synthetic trips generated from accurate
schedules obtained from a real network description (from the bus transportation
system of Madrid) to show the space/time trade-off of both approaches. We
considered a wide range of different queries about the use of the
transportation network such as counting-based or aggregate queries regarding
the load of any line of the network at different times.
</p></div>
    </summary>
    <updated>2019-11-21T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-11-21T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1911.08971</id>
    <link href="http://arxiv.org/abs/1911.08971" rel="alternate" type="text/html"/>
    <title>Faster Dynamic Compressed d-ary Relations</title>
    <feedworld_mtime>1574294400</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/a/Arroyuelo:Diego.html">Diego Arroyuelo</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/b/Bernardo:Guillermo_de.html">Guillermo de Bernardo</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/g/Gagie:Travis.html">Travis Gagie</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/n/Navarro:Gonzalo.html">Gonzalo Navarro</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1911.08971">PDF</a><br/><b>Abstract: </b>The $k^2$-tree is a successful compact representation of binary relations
that exhibit sparseness and/or clustering properties. It can be extended to $d$
dimensions, where it is called a $k^d$-tree. The representation boils down to a
long bitvector. We show that interpreting the $k^d$-tree as a dynamic trie on
the Morton codes of the points, instead of as a dynamic representation of the
bitvector as done in previous work, yields operation times that are below the
lower bound of dynamic bitvectors and offers improved time performance in
practice.
</p></div>
    </summary>
    <updated>2019-11-21T02:27:10Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-11-21T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1911.08964</id>
    <link href="http://arxiv.org/abs/1911.08964" rel="alternate" type="text/html"/>
    <title>New Algorithms for Mixed Dominating Set</title>
    <feedworld_mtime>1574294400</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b>Louis Dublois, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/l/Lampis:Michael.html">Michael Lampis</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/p/Paschos:Vangelis_Th=.html">Vangelis Th. Paschos</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1911.08964">PDF</a><br/><b>Abstract: </b>A mixed dominating set is a collection of vertices and edges that dominates
all vertices and edges of a graph.We study the complexity of exact and
parameterized algorithms for MDS, resolving some open questions. In particular,
we settle the problem's complexity parameterized by treewidth and pathwidth by
giving an algorithm running in time $O^*(5^{tw})$ (improving the current best
$O^*(6^{tw})$), as well as a lower bound showing that our algorithm cannot be
improved under the SETH, even if parameterized by pathwidth (improving a lower
bound of $O^*((2 - \varepsilon)^{pw})$).
</p>
<p>Furthermore, by using a simple but so far overlooked observation on the
structure of minimal solutions, we obtain branching algorithms which improve
both the best known FPT algorithm for this problem, from $O^*(4.172^k)$ to
$O^*(3.510^k)$, and the best known exponential-time exact algorithm, from
$O^*(2^n)$ and exponential space, to $O^*(1.912^n)$ and polynomial space.
</p></div>
    </summary>
    <updated>2019-11-21T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-11-21T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1911.08937</id>
    <link href="http://arxiv.org/abs/1911.08937" rel="alternate" type="text/html"/>
    <title>A simple and efficient dichotomic search algorithm for multi-objective mixed integer linear programs</title>
    <feedworld_mtime>1574294400</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/p/Przybylski:Anthony.html">Anthony Przybylski</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/k/Klamroth:Kathrin.html">Kathrin Klamroth</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/l/Lacour:Renaud.html">Renaud Lacour</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1911.08937">PDF</a><br/><b>Abstract: </b>We present a simple and at the same time fficient algorithm to compute all
nondominated extreme points in the outcome set of multi-objective mixed integer
linear programmes in any dimension. The method generalizes the well-known
dichotomic scheme to compute the set of nondominated extreme points in the
outcome set of a bi-objective programme based on the iterative solution of
weighted sum scalarizations. It uses as a main routine a convex hull algorithm.
The algorithm is illustrated with, and numerically tested on, instances of
multi-objective assignment and knapsack problems. Experimental results confirm
the computational efficiency of the approach. Finally, an implementation in
incremental polynomial time with respect to the number of computed nondominated
extreme points is possible, under the assumption that the lexicographic version
of the problem can be solved in polynomial time.
</p></div>
    </summary>
    <updated>2019-11-21T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Geometry"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CG" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Geometry (cs.CG) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CG updates on arXiv.org</title>
      <updated>2019-11-21T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1911.08924</id>
    <link href="http://arxiv.org/abs/1911.08924" rel="alternate" type="text/html"/>
    <title>Geometric Planar Networks on Bichromatic Points</title>
    <feedworld_mtime>1574294400</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/b/Bandyapadhyay:Sayan.html">Sayan Bandyapadhyay</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/b/Banik:Aritra.html">Aritra Banik</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/b/Bhore:Sujoy.html">Sujoy Bhore</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/n/N=ouml=llenburg:Martin.html">Martin Nöllenburg</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1911.08924">PDF</a><br/><b>Abstract: </b>We study four classical graph problems -- Hamiltonian path, Traveling
salesman, Minimum spanning tree, and Minimum perfect matching on geometric
graphs induced by bichromatic (red and blue) points. These problems have been
widely studied for points in the Euclidean plane, and many of them are NP-hard.
In this work, we consider these problems in two restricted settings: (i)
collinear points and (ii) equidistant points on a circle. We show that almost
all of these problems can be solved in linear time in these constrained, yet
non-trivial settings.
</p></div>
    </summary>
    <updated>2019-11-21T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Geometry"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CG" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Geometry (cs.CG) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CG updates on arXiv.org</title>
      <updated>2019-11-21T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1911.08832</id>
    <link href="http://arxiv.org/abs/1911.08832" rel="alternate" type="text/html"/>
    <title>Streaming Frequent Items with Timestamps and Detecting Large Neighborhoods in Graph Streams</title>
    <feedworld_mtime>1574294400</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/k/Konrad:Christian.html">Christian Konrad</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1911.08832">PDF</a><br/><b>Abstract: </b>Detecting frequent items is a fundamental problem in data streaming research.
However, in many applications, besides the frequent items themselves, meta data
such as the timestamps of when the frequent items appeared or other
application-specific data that "arrives" with the frequent items needs to be
reported too.
</p>
<p>To this end, we introduce the Neighborhood Detection problem in graph
streams, which both accurately models situations such as those stated above,
and addresses the fundamental problem of detecting large neighborhoods or stars
in graph streams. In Neighborhood Detection, an algorithm receives the edges of
a bipartite graph $G=(A, B, E)$ with $|A| = n$ and $|B| = \text{poly}~n$ in
arbitrary order and is given a threshold parameter $d$. Provided that there is
at least one $A$-node of degree at least $d$, the objective is to output a node
$a \in A$ together with at least $\frac{d}{c}$ of its neighbors, where $c$ is
the approximation factor.
</p>
<p>We show that in insertion-only streams, there is a one-pass $\tilde{O}(n +
n^{\frac{1}{c}}d)$ space $c$-approximation streaming algorithm, for integral
values of $c \ge 2$. We complement this result with a lower bound, showing that
computing a $(c/1.01)$-approximation requires space $\Omega(n / c^2 +
n^{\frac{1}{c-1}}d / c^2)$, for any integral $c \ge 2$, which renders our
algorithm optimal for a large range of settings (up to logarithmic factors). In
insertion-deletion (turnstile) streams, we give a one-pass $c$-approximation
algorithm with space $\tilde{O}(\frac{dn}{c^2})$ (if $c \le \sqrt{n}$). We also
prove that this is best possible up to logarithmic factors.
</p>
<p>Our lower bounds are obtained by defining new multi-party and two-party
communication problems, respectively, and proving lower bounds on their
communication complexities using information theoretic arguments.
</p></div>
    </summary>
    <updated>2019-11-21T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-11-21T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1911.08704</id>
    <link href="http://arxiv.org/abs/1911.08704" rel="alternate" type="text/html"/>
    <title>Node Max-Cut and Computing Equilibria in Linear Weighted Congestion Games</title>
    <feedworld_mtime>1574294400</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/f/Fotakis:Dimitris.html">Dimitris Fotakis</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/k/Kandiros:Vardis.html">Vardis Kandiros</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/l/Lianeas:Thanasis.html">Thanasis Lianeas</a>, Nikos Mouzakis, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/p/Patsilinakos:Panagiotis.html">Panagiotis Patsilinakos</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/s/Skoulakis:Stratis.html">Stratis Skoulakis</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1911.08704">PDF</a><br/><b>Abstract: </b>Computing an equilibrium of a game is of central interest in Algorithmic Game
Theory. We study the complexity of computing a PNE in Weighted Congestion Games
with affine and linear delays, where O(1)-approximate Nash equilibria can be
computed in polynomial time and the only known PLS-hardness results follow from
those for unweighted Congestion Games.
</p>
<p>We first show that it is PLS-complete to compute a PNE even in
single-commodity Weighted Network Congestion Games on series-parallel networks
with linear latencies, a result indicating that equilibrium computation for
Weighted Congestion Games can be significantly more difficult than their
unweighted counterparts. Note that for unweighted Congestion Games on
single-commodity series parallel networks with general latency functions, a PNE
can be computed by a simple greedy algorithm. For that reduction, we use
exponential coefficients on the linear latency functions. To investigate the
impact of weighted players only, we restrict the game so that the linear
latencies can only have polynomial coefficients. We show that it is
PLS-complete to compute a PNE in Weighted Network Congestion Games with all
edges having the identity function. For the latter, none of the known
PLS-complete problems seems as a natural initial problem for the reduction.
Hence, we consider the problem of finding a maximal cut in NodeMaxCut, a
natural special case of MaxCut where the weights of the edges are the product
of the weights of their endpoints. Via an involved reduction, we show that
NodeMaxCut is PLS-complete, so that we can use it as our initial problem. The
result and the reduction themselves are of independent interest and they may
have more implications in proving other complexity results related to PLS.
</p></div>
    </summary>
    <updated>2019-11-21T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Complexity"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CC" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Complexity (cs.CC) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CC updates on arXiv.org</title>
      <updated>2019-11-21T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1911.08689</id>
    <link href="http://arxiv.org/abs/1911.08689" rel="alternate" type="text/html"/>
    <title>Corruption Robust Exploration in Episodic Reinforcement Learning</title>
    <feedworld_mtime>1574294400</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/l/Lykouris:Thodoris.html">Thodoris Lykouris</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/s/Simchowitz:Max.html">Max Simchowitz</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/s/Slivkins:Aleksandrs.html">Aleksandrs Slivkins</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/s/Sun:Wen.html">Wen Sun</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1911.08689">PDF</a><br/><b>Abstract: </b>We initiate the study of multi-stage episodic reinforcement learning under
adversarial manipulations in both the rewards and the transition probabilities
of the underlying system. Existing efficient algorithms heavily rely on the
"optimism under uncertainty" principle which dictates their behavior and does
not allow flexibility to perform corruption-robust exploration. We address this
by (i) departing from the optimistic behavior, and (ii) creating a general
framework that incorporates the principle of action-elimination. (This
principle has been essential for corruption-robust exploration in multi-armed
bandits, a degenerate special case of episodic reinforcement learning.) Despite
constructing a lower bound for a straightforward implementation of
action-elimination, we provide a clean and modular way to transfer it to
episodic reinforcement learning. Our algorithm enjoys near-optimal guarantees
in the absence of adversarial manipulations, has performance that degrades
gracefully as the amount of corruption increases, and does not need to know
this amount. Our results shed new light on the broader question of robust
exploration, and suggest a way to address a rather daunting mismatch between
optimistic algorithms and algorithms with higher flexibility. To demonstrate
the applicability of our framework, we provide a second instantiation thereof,
showing how it can provide efficient guarantees for the stochastic setting,
despite doing almost uniform exploration across plausibly optimal actions.
</p></div>
    </summary>
    <updated>2019-11-21T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-11-21T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1911.08600</id>
    <link href="http://arxiv.org/abs/1911.08600" rel="alternate" type="text/html"/>
    <title>Steepest ascent can be exponential in bounded treewidth problems</title>
    <feedworld_mtime>1574294400</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/c/Cohen:David_A=.html">David A. Cohen</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/c/Cooper:Martin_C=.html">Martin C. Cooper</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/k/Kaznatcheev:Artem.html">Artem Kaznatcheev</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/w/Wallace:Mark.html">Mark Wallace</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1911.08600">PDF</a><br/><b>Abstract: </b>We investigate the complexity of local search based on steepest ascent. We
show that even when all variables have domains of size two and the underlying
constraint graph (graph of variable interactions) has bounded treewidth (in our
construction, treewidth is 7), there are fitness landscapes for which an
exponential number of steps may be required to reach a local optimum. This is
an improvement on prior recursive constructions of long steepest ascents, which
we prove to need constraint graphs of unbounded treewidth.
</p></div>
    </summary>
    <updated>2019-11-21T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-11-21T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1911.08558</id>
    <link href="http://arxiv.org/abs/1911.08558" rel="alternate" type="text/html"/>
    <title>The Longest $(s, t)$-paths of $O$-shaped Supergrid Graphs</title>
    <feedworld_mtime>1574294400</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/h/Hung:Ruo=Wei.html">Ruo-Wei Hung</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/k/Keshavarz=Kohjerdi:Fatemeh.html">Fatemeh Keshavarz-Kohjerdi</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1911.08558">PDF</a><br/><b>Abstract: </b>In this paper, we continue the study of the Hamiltonian and longest $(s,
t)$-paths of supergrid graphs. The Hamiltonian $(s, t)$-path of a graph is a
Hamiltonian path between any two given vertices $s$ and $t$ in the graph, and
the longest $(s, t)$-path is a simple path with the maximum number of vertices
from $s$ to $t$ in the graph. A graph holds Hamiltonian connected property if
it contains a Hamiltonian $(s, t)$-path. These two problems are well-known
NP-complete for general supergrid graphs. An $O$-shaped supergrid graph is a
special kind of a rectangular grid graph with a rectangular hole. In this
paper, we first prove the Hamiltonian connectivity of $O$-shaped supergrid
graphs except few conditions. We then show that the longest $(s, t)$-path of an
$O$-shaped supergrid graph can be computed in linear time. The Hamiltonian and
longest $(s, t)$-paths of $O$-shaped supergrid graphs can be applied to compute
the minimum trace of computerized embroidery machine and 3D printer when a
hollow object is printed.
</p></div>
    </summary>
    <updated>2019-11-21T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Complexity"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CC" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Complexity (cs.CC) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CC updates on arXiv.org</title>
      <updated>2019-11-21T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1911.08529</id>
    <link href="http://arxiv.org/abs/1911.08529" rel="alternate" type="text/html"/>
    <title>Euclidean Bottleneck Bounded-Degree Spanning Tree Ratios</title>
    <feedworld_mtime>1574294400</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/b/Biniaz:Ahmad.html">Ahmad Biniaz</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1911.08529">PDF</a><br/><b>Abstract: </b>Inspired by the seminal works of Khuller et al. (STOC 1994) and Chan (SoCG
2003) we study the bottleneck version of the Euclidean bounded-degree spanning
tree problem. A bottleneck spanning tree is a spanning tree whose largest
edge-length is minimum, and a bottleneck degree-$K$ spanning tree is a
degree-$K$ spanning tree whose largest edge-length is minimum. Let $\beta_K$ be
the supremum ratio of the largest edge-length of the bottleneck degree-$K$
spanning tree to the largest edge-length of the bottleneck spanning tree, over
all finite point sets in the Euclidean plane. It is known that $\beta_5=1$, and
it is easy to verify that $\beta_2\ge 2$, $\beta_3\ge \sqrt{2}$, and
$\beta_4&gt;1.175$.
</p>
<p>It is implied by the Hamiltonicity of the cube of the bottleneck spanning
tree that $\beta_2\le 3$. The degree-3 spanning tree algorithm of Ravi et al.
(STOC 1993) implies that $\beta_3\le 2$. Andersen and Ras (Networks,
68(4):302-314, 2016) showed that $\beta_4\le \sqrt{3}$. We present the
following improved bounds: $\beta_2\ge\sqrt{7}$, $\beta_3\le \sqrt{3}$, and
$\beta_4\le \sqrt{2}$. As a result, we obtain better approximation algorithms
for Euclidean bottleneck degree-3 and degree-4 spanning trees. As parts of our
proofs of these bounds we present some structural properties of the Euclidean
minimum spanning tree which are of independent interest.
</p></div>
    </summary>
    <updated>2019-11-21T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Geometry"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CG" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Geometry (cs.CG) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CG updates on arXiv.org</title>
      <updated>2019-11-21T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1911.08376</id>
    <link href="http://arxiv.org/abs/1911.08376" rel="alternate" type="text/html"/>
    <title>Extending General Compact Querieable Representations to GIS Applications</title>
    <feedworld_mtime>1574294400</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/b/Brisaboa:Nieves_R=.html">Nieves R. Brisaboa</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/c/Cerdeira=Pena:Ana.html">Ana Cerdeira-Pena</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/b/Bernardo:Guillermo_de.html">Guillermo de Bernardo</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/n/Navarro:Gonzalo.html">Gonzalo Navarro</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/p/Pedreira:Oscar.html">Oscar Pedreira</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1911.08376">PDF</a><br/><b>Abstract: </b>The raster model is commonly used for the representation of images in many
domains, and is especially useful in Geographic Information Systems (GIS) to
store information about continuous variables of the space (elevation,
temperature, etc.). Current representations of raster data are usually designed
for external memory or, when stored in main memory, lack efficient query
capabilities. In this paper we propose compact representations to efficiently
store and query raster datasets in main memory. We present different
representations for binary raster data, general raster data and time-evolving
raster data. We experimentally compare our proposals with traditional storage
mechanisms such as linear quadtrees or compressed GeoTIFF files. Results show
that our structures are up to 10 times smaller than classical linear quadtrees,
and even comparable in space to non-querieable representations of raster data,
while efficiently answering a number of typical queries.
</p></div>
    </summary>
    <updated>2019-11-21T00:06:55Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-11-20T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1911.08374</id>
    <link href="http://arxiv.org/abs/1911.08374" rel="alternate" type="text/html"/>
    <title>Concurrent Expandable AMQs on the Basis of Quotient Filters</title>
    <feedworld_mtime>1574294400</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/m/Maier:Tobias.html">Tobias Maier</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/s/Sanders:Peter.html">Peter Sanders</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/w/Williger:Robert.html">Robert Williger</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1911.08374">PDF</a><br/><b>Abstract: </b>A quotient filter is a cache efficient AMQ data structure. Depending on the
fill degree of the filter most insertions and queries only need to access one
or two consecutive cache lines. This makes quotient filters fast compared to
the more commonly used Bloom filters that incur multiple cache misses. However,
concurrent Bloom filters are easy to implement and can be implemented lock-free
while concurrent quotient filters are not as simple. Usually concurrent
quotient filters work by using an external array of locks -- each protecting a
region of the table. Accessing this array incurs one additional cache miss per
operation. We propose a new locking scheme that has no memory overhead. Using
this new locking scheme we achieve 1.8 times higher speedups than with the
common external locking scheme.
</p>
<p>Another advantage of quotient filters over Bloom filters is that a quotient
filter can change its size when it is becoming full. We implement this growing
technique for our concurrent quotient filters and adapt it in a way that allows
unbounded growing while keeping a bounded false positive rate. We call the
resulting data structure a fully expandable quotient filter. Its design is
similar to scalable Bloom filters, but we exploit some concepts inherent to
quotient filters to improve the space efficiency and the query speed.
</p>
<p>We also propose quotient filter variants that are aimed to reduce the number
of status bits (2-status-bit variant) or to simplify concurrent implementations
(linear probing quotient filter). The linear probing quotient filter even leads
to a lock-free concurrent filter implementation. This is especially
interesting, since we show that any lock-free implementation of another common
quotient filter variant would incur significant overheads in the form of
additional data fields or multiple passes over the accessed data.
</p></div>
    </summary>
    <updated>2019-11-21T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-11-20T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1911.08130</id>
    <link href="http://arxiv.org/abs/1911.08130" rel="alternate" type="text/html"/>
    <title>Topological computing of arrangements with (co)chains</title>
    <feedworld_mtime>1574294400</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/p/Paoluzzi:Alberto.html">Alberto Paoluzzi</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/s/Shapiro:Vadim.html">Vadim Shapiro</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/d/DiCarlo:Antonio.html">Antonio DiCarlo</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/f/Furiani:Francesco.html">Francesco Furiani</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/m/Martella:Giulio.html">Giulio Martella</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/s/Scorzelli:Giorgio.html">Giorgio Scorzelli</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1911.08130">PDF</a><br/><b>Abstract: </b>In many areas of applied geometric/numeric computational mathematics,
including geo-mapping, computer vision, computer graphics, finite element
analysis, medical imaging, geometric design, and solid modeling, one has to
compute incidences, adjacencies and ordering of cells, generally using
disparate and often incompatible data structures and algorithms. This paper
introduces computational topology algorithms to discover the 2D/3D space
partition induced by a collection of geometric objects of dimension 1D/2D,
respectively. Methods and language are those of basic geometric and algebraic
topology. Only sparse vectors and matrices are used to compute both spaces and
maps, i.e., the chain complex, from dimension zero to three.
</p></div>
    </summary>
    <updated>2019-11-21T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Geometry"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CG" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Geometry (cs.CG) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CG updates on arXiv.org</title>
      <updated>2019-11-20T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1911.07976</id>
    <link href="http://arxiv.org/abs/1911.07976" rel="alternate" type="text/html"/>
    <title>Estimating Entropy of Distributions in Constant Space</title>
    <feedworld_mtime>1574294400</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/a/Acharya:Jayadev.html">Jayadev Acharya</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/b/Bhadane:Sourbh.html">Sourbh Bhadane</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/i/Indyk:Piotr.html">Piotr Indyk</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/s/Sun:Ziteng.html">Ziteng Sun</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1911.07976">PDF</a><br/><b>Abstract: </b>We consider the task of estimating the entropy of $k$-ary distributions from
samples in the streaming model, where space is limited. Our main contribution
is an algorithm that requires $O\left(\frac{k \log
(1/\varepsilon)^2}{\varepsilon^3}\right)$ samples and a constant $O(1)$ memory
words of space and outputs a $\pm\varepsilon$ estimate of $H(p)$. Without space
limitations, the sample complexity has been established as
$S(k,\varepsilon)=\Theta\left(\frac k{\varepsilon\log k}+\frac{\log^2
k}{\varepsilon^2}\right)$, which is sub-linear in the domain size $k$, and the
current algorithms that achieve optimal sample complexity also require
nearly-linear space in $k$.
</p>
<p>Our algorithm partitions $[0,1]$ into intervals and estimates the entropy
contribution of probability values in each interval. The intervals are designed
to trade off the bias and variance of these estimates.
</p></div>
    </summary>
    <updated>2019-11-20T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-11-20T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1805.00506</id>
    <link href="http://arxiv.org/abs/1805.00506" rel="alternate" type="text/html"/>
    <title>Adaptive View Planning for Aerial 3D Reconstruction</title>
    <feedworld_mtime>1574294400</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/p/Peng:Cheng.html">Cheng Peng</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/i/Isler:Volkan.html">Volkan Isler</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1805.00506">PDF</a><br/><b>Abstract: </b>With the proliferation of small aerial vehicles, acquiring close up aerial
imagery for high quality reconstruction of complex scenes is gaining
importance. We present an adaptive view planning method to collect such images
in an automated fashion. We start by sampling a small set of views to build a
coarse proxy to the scene. We then present (i)~a method that builds a view
manifold for view selection, and (ii) an algorithm to select a sparse set of
views. The vehicle then visits these viewpoints to cover the scene, and the
procedure is repeated until reconstruction quality converges or a desired level
of quality is achieved. The view manifold provides an effective
efficiency/quality compromise between using the entire 6 degree of freedom pose
space and using a single view hemisphere to select the views.
</p>
<p>Our results show that, in contrast to existing "explore and exploit" methods
which collect only two sets of views, reconstruction quality can be drastically
improved by adding a third set. They also indicate that three rounds of data
collection is sufficient even for very complex scenes. We compare our algorithm
to existing methods in three challenging scenes. We require each algorithm to
select the same number of views. Our algorithm generates views which produce
the least reconstruction error.
</p></div>
    </summary>
    <updated>2019-11-21T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Geometry"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CG" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Geometry (cs.CG) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CG updates on arXiv.org</title>
      <updated>2019-11-20T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://cstheory-jobs.org/2019/11/20/lecturer-assistant-director-undergraduate-studies-at-harvard-university-apply-by-january-1-2020/</id>
    <link href="https://cstheory-jobs.org/2019/11/20/lecturer-assistant-director-undergraduate-studies-at-harvard-university-apply-by-january-1-2020/" rel="alternate" type="text/html"/>
    <title>Lecturer / Assistant Director Undergraduate Studies at Harvard University (apply by January 1, 2020)</title>
    <summary>Harvard University seeks qualified candidates for the position of Assistant Director for Undergraduate Studies, with a concurrent Lectureship, in Computer Science. Responsibilities include teaching or co-teaching one one undergraduate Computer Science course per semester as well as hepling lead the Computer Science Undergraduate Advising team with faculty and staff. (see links for full info) Website: […]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Harvard University seeks qualified candidates for the position of Assistant Director for Undergraduate Studies, with a concurrent Lectureship, in Computer Science. Responsibilities include teaching or co-teaching one one undergraduate Computer Science course per semester as well as hepling lead the Computer Science Undergraduate Advising team with faculty and staff. (see links for full info)</p>
<p>Website: <a href="http://tiny.cc/harvardadus">http://tiny.cc/harvardadus</a><br/>
Email: cs-dus@seas.harvard.edu</p></div>
    </content>
    <updated>2019-11-20T19:58:34Z</updated>
    <published>2019-11-20T19:58:34Z</published>
    <category term="Uncategorized"/>
    <author>
      <name>shacharlovett</name>
    </author>
    <source>
      <id>https://cstheory-jobs.org</id>
      <logo>https://s0.wp.com/i/buttonw-com.png</logo>
      <link href="https://cstheory-jobs.org/feed/" rel="self" type="application/atom+xml"/>
      <link href="https://cstheory-jobs.org" rel="alternate" type="text/html"/>
      <link href="https://cstheory-jobs.org/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="https://cstheory-jobs.org/?pushpress=hub" rel="hub" type="text/html"/>
      <title>Theoretical Computer Science Jobs</title>
      <updated>2019-11-21T06:20:39Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>https://eccc.weizmann.ac.il/report/2019/166</id>
    <link href="https://eccc.weizmann.ac.il/report/2019/166" rel="alternate" type="text/html"/>
    <title>TR19-166 |  Top-down induction of decision trees: rigorous guarantees and inherent limitations | 

	Guy Blanc, 

	Jane Lange, 

	Li-Yang Tan</title>
    <summary>Consider the following heuristic for building a decision tree for a function $f : \{0,1\}^n \to \{\pm 1\}$.  Place the most influential variable $x_i$ of $f$ at the root, and recurse on the subfunctions $f_{x_i=0}$ and $f_{x_i=1}$ on the left and right subtrees respectively; terminate once the tree is an $\varepsilon$-approximation of $f$.   We analyze the quality of this heuristic, obtaining near-matching upper and lower bounds:  

$\circ$ Upper bound: For every $f$ with decision tree size $s$ and every $\varepsilon \in (0,\frac1{2})$, this heuristic builds a decision tree of size at most $s^{O(\log(s/\varepsilon)\log(1/\varepsilon))}$. 

$\circ$ Lower bound: For every $\varepsilon \in (0,\frac1{2})$ and $s \le 2^{\tilde{O}(\sqrt{n})}$, there is an $f$ with decision tree size $s$ such that this heuristic builds a decision tree of size $s^{\tilde{\Omega}(\log s)}$. 

We also obtain upper and lower bounds for monotone functions: $s^{O(\sqrt{\log s}/\varepsilon)}$ and $s^{\tilde{\Omega}(\sqrt[4]{\log s }
)}$ respectively.  The lower bound disproves conjectures of Fiat and Pechyony (2004) and Lee (2009).

Our upper bounds yield new algorithms for properly learning decision trees under the uniform distribution.  We show that these algorithms---which are motivated by widely employed and empirically successful top-down decision tree learning heuristics such as ID3, C4.5, and CART---achieve provable guarantees that compare favorably with those of the current fastest algorithm (Ehrenfeucht and Haussler, 1989), and even have certain qualitative advantages. Our lower bounds shed new light on the limitations of these heuristics. 

Finally, we revisit the classic work of Ehrenfeucht and Haussler.  We extend it to give the first uniform-distribution proper learning algorithm that achieves polynomial sample and memory complexity, while matching its state-of-the-art quasipolynomial runtime.</summary>
    <updated>2019-11-20T19:06:43Z</updated>
    <published>2019-11-20T19:06:43Z</published>
    <source>
      <id>https://eccc.weizmann.ac.il/</id>
      <author>
        <name>ECCC papers</name>
      </author>
      <link href="https://eccc.weizmann.ac.il/" rel="alternate" type="text/html"/>
      <link href="https://example.com/feeds/reports/" rel="self" type="application/atom+xml"/>
      <subtitle>Latest Reports published at https://eccc.weizmann.ac.il</subtitle>
      <title>ECCC - Reports</title>
      <updated>2019-11-21T06:20:26Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://cstheory-jobs.org/2019/11/20/postdoctoral-fellow-at-the-university-of-texas-at-austin-apply-by-january-15-2020-2/</id>
    <link href="https://cstheory-jobs.org/2019/11/20/postdoctoral-fellow-at-the-university-of-texas-at-austin-apply-by-january-15-2020-2/" rel="alternate" type="text/html"/>
    <title>Postdoctoral Fellow at The University of Texas at Austin (apply by January 15, 2020)</title>
    <summary>The Computer Science Department at UT Austin invites applications for a Postdoctoral Fellow in theoretical computer science for the 2020-21 academic year. The Fellow will work with Dana Moshkovitz and David Zuckerman on pseudorandomness and computational complexity. Review of applicants will begin on January 15, but applications will be accepted until the position is filled. […]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>The Computer Science Department at UT Austin invites applications for a Postdoctoral Fellow in theoretical computer science for the 2020-21 academic year. The Fellow will work with Dana Moshkovitz and David Zuckerman on pseudorandomness and computational complexity. Review of applicants will begin on January 15, but applications will be accepted until the position is filled.</p>
<p>Website: <a href="https://www.myworkday.com/utaustin/d/inst/15$158872/9925$9054.htmld">https://www.myworkday.com/utaustin/d/inst/15$158872/9925$9054.htmld</a><br/>
Email: maguilar@cs.utexas.edu</p></div>
    </content>
    <updated>2019-11-20T17:45:16Z</updated>
    <published>2019-11-20T17:45:16Z</published>
    <category term="Uncategorized"/>
    <author>
      <name>shacharlovett</name>
    </author>
    <source>
      <id>https://cstheory-jobs.org</id>
      <logo>https://s0.wp.com/i/buttonw-com.png</logo>
      <link href="https://cstheory-jobs.org/feed/" rel="self" type="application/atom+xml"/>
      <link href="https://cstheory-jobs.org" rel="alternate" type="text/html"/>
      <link href="https://cstheory-jobs.org/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="https://cstheory-jobs.org/?pushpress=hub" rel="hub" type="text/html"/>
      <title>Theoretical Computer Science Jobs</title>
      <updated>2019-11-21T06:20:39Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://cstheory-jobs.org/2019/11/20/postdoctoral-fellow-at-the-university-of-texas-at-austin-apply-by-january-15-2020/</id>
    <link href="https://cstheory-jobs.org/2019/11/20/postdoctoral-fellow-at-the-university-of-texas-at-austin-apply-by-january-15-2020/" rel="alternate" type="text/html"/>
    <title>Postdoctoral Fellow at The University of Texas at Austin (apply by January 15, 2020)</title>
    <summary>The Computer Science Department at UT Austin invites applications for a Postdoctoral Fellow in theoretical computer science for the 2020-21 academic year. The Fellow will work with Dana Moshkovitz and David Zuckerman on pseudorandomness and computational complexity. Review of applicants will begin on January 15, but applications will be accepted until the position is filled. […]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>The Computer Science Department at UT Austin invites applications for a Postdoctoral Fellow in theoretical computer science for the 2020-21 academic year. The Fellow will work with Dana Moshkovitz and David Zuckerman on pseudorandomness and computational complexity. Review of applicants will begin on January 15, but applications will be accepted until the position is filled.</p>
<p>Website: <a href="https://www.myworkday.com/utaustin/d/inst/15$158872/9925$9054.htmld">https://www.myworkday.com/utaustin/d/inst/15$158872/9925$9054.htmld</a><br/>
Email: maguilar@cs.utexas.edu</p></div>
    </content>
    <updated>2019-11-20T17:45:06Z</updated>
    <published>2019-11-20T17:45:06Z</published>
    <category term="Uncategorized"/>
    <author>
      <name>shacharlovett</name>
    </author>
    <source>
      <id>https://cstheory-jobs.org</id>
      <logo>https://s0.wp.com/i/buttonw-com.png</logo>
      <link href="https://cstheory-jobs.org/feed/" rel="self" type="application/atom+xml"/>
      <link href="https://cstheory-jobs.org" rel="alternate" type="text/html"/>
      <link href="https://cstheory-jobs.org/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="https://cstheory-jobs.org/?pushpress=hub" rel="hub" type="text/html"/>
      <title>Theoretical Computer Science Jobs</title>
      <updated>2019-11-21T06:20:39Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://agtb.wordpress.com/?p=3445</id>
    <link href="https://agtb.wordpress.com/2019/11/20/test-of-time-award-call-for-nominations/" rel="alternate" type="text/html"/>
    <title>Test of time award: call for nominations</title>
    <summary>Please nominate for the SIGecom Test of Time Award. The SIGecom Test of Time Award recognizes the author or authors of an influential paper or series of papers published between ten and twenty-five years ago that has significantly impacted research or applications exemplifying the interplay of economics and computation. To be eligible, a paper or […]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p style="font-weight: 400;">Please nominate for the SIGecom Test of Time Award.</p>
<p style="font-weight: 400;">The SIGecom Test of Time Award recognizes the author or authors of an influential paper or series of papers published between ten and twenty-five years ago that has significantly impacted research or applications exemplifying the interplay of economics and computation.</p>
<p style="font-weight: 400;">To be eligible, a paper or series of papers must be on a topic in the intersection of economics and computation, and must have been first published, in preliminary or final form, in an archival journal or conference proceedings no less than ten years and no more than twenty-five years before the year the award is conferred. Papers for which all authors are deceased at the time the Award Committee makes its decision are not eligible for the award.</p>
<p style="font-weight: 400;">The 2020 SIGecom Test of Time Award will be given for papers published no earlier than 1995 and no later than 2010. <strong>Nominations are due by February 29th, 2020</strong>, and must be made by email to the Award Committee with “2020 ACM SIGecom Test of Time Award” in the subject.</p>
<p style="font-weight: 400;">See details at <a href="https://www.sigecom.org/awardt.html">https://www.sigecom.org/awardt.html</a></p>
<p> </p>
<p style="font-weight: 400;">The 2020 Test of Time Award Committee</p>
<p style="font-weight: 400;">Paul Milgrom, Stanford University</p>
<p style="font-weight: 400;">Noam Nisan, The Hebrew University of Jerusalem</p>
<p style="font-weight: 400;">Éva Tardos (chair), Cornell University</p></div>
    </content>
    <updated>2019-11-20T07:55:55Z</updated>
    <published>2019-11-20T07:55:55Z</published>
    <category term="Uncategorized"/>
    <author>
      <name>algorithmicgametheory</name>
    </author>
    <source>
      <id>https://agtb.wordpress.com</id>
      <logo>https://secure.gravatar.com/blavatar/52ef314e11e379febf97d1a97547f4cd?s=96&amp;d=https%3A%2F%2Fs0.wp.com%2Fi%2Fbuttonw-com.png</logo>
      <link href="https://agtb.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="https://agtb.wordpress.com" rel="alternate" type="text/html"/>
      <link href="https://agtb.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="https://agtb.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Computation, Economics, and Game Theory</subtitle>
      <title>Turing's Invisible Hand</title>
      <updated>2019-11-21T06:20:32Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://rjlipton.wordpress.com/?p=16399</id>
    <link href="https://rjlipton.wordpress.com/2019/11/19/a-clever-way-to-find-compiler-bugs/" rel="alternate" type="text/html"/>
    <title>A Clever Way To Find Compiler Bugs</title>
    <summary>Your comments are valuable, we thank you. source Xuejun Yang is a Senior Staff Engineer at FutureWei Technologies. He is the DFA on the 2011 paper, “Finding and Understanding Bugs in C Compilers.” Today Ken and I discuss a clever idea from that paper. The paper was brought to our attention just now in a […]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>
<font color="#0044cc"><br/>
<em>Your comments are valuable, we thank you.</em><br/>
<font color="#000000"/></font></p><font color="#0044cc"><font color="#000000">
<table class="image alignright">
<tbody>
<tr>
<td>
<a href="https://rjlipton.wordpress.com/2019/11/19/a-clever-way-to-find-compiler-bugs/profile_image174/" rel="attachment wp-att-16401"><img alt="" class="alignright  wp-image-16401" src="https://rjlipton.files.wordpress.com/2019/11/profile_image174.jpg?w=220" width="220"/></a>
</td>
</tr>
<tr>
<td class="caption alignright"><font size="-2"><a href="https://www.flux.utah.edu/profile/jxyang">source</a></font></td>
</tr>
</tbody>
</table>
<p>
Xuejun Yang is a Senior Staff Engineer at FutureWei Technologies. He is the DFA on the 2011 <a href="http://www.cs.utah.edu/~regehr/papers/pldi11-preprint.pdf">paper</a>, “Finding and Understanding Bugs in C Compilers.”</p>
<p>
Today Ken and I discuss a clever idea from that paper.</p>
<p>
The paper was brought to our attention just now in a meaty <a href="https://rjlipton.wordpress.com/2019/10/21/a-polemical-overreach/#comment-106276">comment</a> by Paul D. We thank him for it—the topic interests both of us. We don’t think Paul D. means to be anonymous, but in keeping with that we’ll give just a cryptic hint to his identity: The saying “a man on the make” is widely known, but for more than the millennium he has been the unique person in the world to whom it applies literally.  <b>Update 11/20</b>: Turns out we (I, Ken) were wrong about the identity, see <a href="https://rjlipton.wordpress.com/2019/11/19/a-clever-way-to-find-compiler-bugs/#comment-106348">this</a>.</p>
<p>
Yang was made unique by being listed out of alphabetical order on the paper. This is notable because the most common practice in our field is to list alphabetically irrespective of prominence. Hence we’ve invented the term ‘DFA’ for “Designated” or “Distinguished” First Author. The other authors are Yang Chen, Eric Eide, and John Regehr, all from the University of Utah. </p>
<p>
</p><p/><h2> The Topic </h2><p/>
<p/><p>
Paul D.’s comment notes that there was evidence that verification methods could improve compiler correctness. By <i>compiler</i> we mean the program that transforms high level code into machine code. These programs are used countless times every day and their correctness is clearly very important. </p>
<p>
Their correctness is tricky for several reasons. The main one is that almost all compilers try to optimize code. That is when they transform code into instructions they try to rewrite or rearrange the instructions to yield better performance. Compilers have been doing this forever. The trouble is that changing instructions to increase performance is dangerous. The changes must not affect the values that are computed. If they are not done carefully they can actually make the answers faster, but incorrect. This is the reason correctness is tricky.</p>
<p>
Formal verification requires a lot of effort. The highest effort should go into mission-critical software. But compilers are mission-critical <em>already</em>, unless we know mission-critical software won’t be compiled on a particular one. Hence it is notable when formal verification makes a compiler more reliable. </p>
<p>
</p><p/><h2> The Paper </h2><p/>
<p/><p>
The idea in the paper Paul referenced is quite elegant. They built a program called Csmith. It operates as follows: </p>
<blockquote><p><b> </b> <em> Suppose that <img alt="{X}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BX%7D&amp;bg=e8e8e8&amp;fg=000000&amp;s=0" title="{X}"/> is a compiler they wish to test. Then generate various legal C programs <img alt="{P}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BP%7D&amp;bg=e8e8e8&amp;fg=000000&amp;s=0" title="{P}"/>. For each of these let <img alt="{A}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BA%7D&amp;bg=e8e8e8&amp;fg=000000&amp;s=0" title="{A}"/> be the answer that <img alt="{X(P)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BX%28P%29%7D&amp;bg=e8e8e8&amp;fg=000000&amp;s=0" title="{X(P)}"/> yields. Here <img alt="{X(P)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BX%28P%29%7D&amp;bg=e8e8e8&amp;fg=000000&amp;s=0" title="{X(P)}"/> is the compiled program. Then check whether <img alt="{A}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BA%7D&amp;bg=e8e8e8&amp;fg=000000&amp;s=0" title="{A}"/> is correct. </em>
</p></blockquote>
<p/><p>
For example:  </p>
<pre>int foo (void) { 
    signed char x = 1; 
    unsigned char y = 255; 
    return x &gt; y; 
} 
</pre>
<p>
Some compilers returned <img alt="{1}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B1%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{1}"/>, but the correct answer is <img alt="{0}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B0%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{0}"/>. There are further examples in a 2012 companion <a href="https://www.cs.utah.edu/~regehr/papers/pldi12-preprint.pdf">paper</a> and these <a href="https://www.flux.utah.edu/download?uid=115&amp;slides=1&amp;type=pptx">slides</a> from an earlier version. The Csmith <a href="https://embed.cs.utah.edu/csmith/">homepage</a> has long lists of compiler bugs they found. </p>
<p>
Of course if <img alt="{X(P)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BX%28P%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{X(P)}"/> crashes or refuse to compile <img alt="{P}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BP%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{P}"/> then the compiler is wrong. But what happens if <img alt="{A}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BA%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{A}"/> is computed. How does Csmith know if the answer is correct? This seems to be really hard. This correctness testing must be automated: the whole approach is based on allowing tons of random programs to be tested. They cannot assume that humans will be used to check the outputs.</p>
<p>
This is the clever idea of this paper. They assume that there are at least two compilers say <img alt="{X}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BX%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{X}"/> and <img alt="{Y}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BY%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{Y}"/>. Then let <img alt="{A}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BA%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{A}"/> be the output of <img alt="{X(P)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BX%28P%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{X(P)}"/> and let <img alt="{B}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BB%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{B}"/> be the output of <img alt="{Y(P)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BY%28P%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{Y(P)}"/>. The key insight is: </p>
<blockquote><p>
<b>If <img alt="{A}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BA%7D&amp;bg=e8e8e8&amp;fg=000000&amp;s=0" title="{A}"/> is not equal to <img alt="{B}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BB%7D&amp;bg=e8e8e8&amp;fg=000000&amp;s=0" title="{B}"/>, then one of the compilers is wrong</b>.
</p></blockquote>
<p>
A very neat and elegant idea. For software in general it is called <a href="https://en.wikipedia.org/wiki/Differential_testing">differential</a> <a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.83.445">testing</a>. </p>
<p>
This at least alerts when there are problems with some compilers and some programs. One can use this trick to discover programs that cause at least some compilers to have problems. This is extremely valuable. It allowed Csmith to discover hundreds of errors in production compilers—errors that previously were missed.</p>
<p>
</p><p/><h2> Smart Fuzzing </h2><p/>
<p/><p>
<a href="https://en.wikipedia.org/wiki/Fuzzing">Fuzzing</a> is defined by Wikipedia as testing by “providing invalid, unexpected, or random data as inputs to a computer program.” An early historical example, Apple’s “<a href="https://en.wikipedia.org/wiki/Monkey_testing">Monkey</a>” program, worked completely randomly. To ensure that the found bugs are <em>meaningful</em> and <em>analyzable</em>, Csmith needed a deeper, structured, “intelligent” design, not just the generation of <a href="https://en.wikipedia.org/wiki/Mayhem_(advertising_character)">Mayhem</a>.</p>
<p>
For one, Csmith needed to avoid programs <img alt="{P}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BP%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{P}"/> than do not have deterministic behavior. The formal C standards itemize cases in which compilers are allowed to have arbitrary, even self-inconsistent, behavior. There are lots of them in C. A bug with dubious code could be dismissed out of hand.</p>
<p>
For another, the probability that a program <img alt="{P}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BP%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{P}"/> built haphazardly by the original Csmith version would reveal bugs was observed to peak at about 80KB source-code size, about 1,000 lines across multiple pages. Those don’t make great examples. So Csmith has its own routines to compress bug instances it has found. Simple tricks are shortening numerical expressions to use only the bug-sensitive parts. Others are lifting local variables out of blocks and bypassing pointer jumps.</p>
<p>
A third goal is that the generator should branch out to all aspects of the language—in this case, C—not just the “grungy” parts that are ripe for finding compiler bugs. The paper talks about this at length. Regehr, who was Yang’s advisor, is also a blogger. His current <a href="https://blog.regehr.org/archives/1700">post</a>, dated November 4, is titled, “Helping Generative Fuzzers Avoid Looking Only Where the Light is Good, Part 1.” We guess that “Part 2” will go even more into details.</p>
<p>
</p><p/><h2> Formal Methods as Bugscreen </h2><p/>
<p/><p>
Regarding the formally-verified CompCert compiler, Paul D. quoted from the <a href="http://www.cs.utah.edu/~regehr/papers/pldi11-preprint.pdf">paper</a>:</p>
<blockquote><p><b> </b> <em> The striking thing about our CompCert results is that the middle-end bugs we found in all other compilers are absent. As of early 2011, the under-development version of CompCert is the only compiler we have tested for which Csmith cannot find wrong-code errors. This is not for lack of trying: we have devoted about six CPU-years to the task. The apparent unbreakability of CompCert supports a strong argument that developing compiler optimizations within a proof framework, where safety checks are explicit and machine-checked, has tangible benefits for compiler users. </em>
</p></blockquote>
<p/><p>
This August 2019 <a href="https://arxiv.org/pdf/1902.09334.pdf">paper</a> by Michaël Marcozzi, Qiyi Tang, Alastair Donaldson, and Cristian Cadar gives recent results involving Csmith and other tools. They have an interesting discussion on page 2, from which we excerpt:</p>
<blockquote><p><b> </b> <em> In our experience working in the area […], we have found compiler fuzzing to be a contentious topic. Research talks on compiler fuzzing are often followed by questions about the importance of the discovered bugs, and whether compiler fuzzers might be improved by taking inspiration from bugs encountered by users of compilers “in the wild.” Some … argue that any miscompilation bug, whether fuzzer-found or not, is a ticking bomb that should be regarded as severe, or avoided completely via formal verification (in the spirit of CompCert). </em>
</p></blockquote>
<p/><p>
They go on to say, however, that when a fully-developed compiler is used for non-critical software, the kinds of bugs typically found by fuzzing tend to have questionable importance. Their paper is titled, “A Systematic Impact Study for Fuzzer-Found Compiler Bugs.” </p>
<p>
So far they have found definite results that seem to have mixed implications. In their future-work section they note that they have evaluated the impact of bugs in compilers on the intended function of programs they compile, but not on possible security holes—which as we noted in our Cloudflare <a href="https://rjlipton.wordpress.com/2017/03/08/is-computer-security-possible/">post</a> can come from (misuse of) simple code that is completely correct. This leads us further to wonder, coming full-circle, whether formal methods might help quantify the relative importance of aspects of a language and areas of a compiler to guide more-intelligent generation of test cases.</p>
<p>
</p><p/><h2> Open Problems </h2><p/>
<p>
The above comment is interesting, but perhaps finding obscure bugs is important. Perhaps such bugs could be used to attack systems. That is perhaps some one could use them to break into a system. Security may be compromised by any error, even an unlikely one to occur in the wild. </p>
<p>
What do you think?</p>
<p/></font></font></div>
    </content>
    <updated>2019-11-20T00:57:14Z</updated>
    <published>2019-11-20T00:57:14Z</published>
    <category term="Ideas"/>
    <category term="Oldies"/>
    <category term="Results"/>
    <category term="bugs"/>
    <category term="compiler"/>
    <category term="errors"/>
    <category term="security"/>
    <category term="testing"/>
    <author>
      <name>RJLipton+KWRegan</name>
    </author>
    <source>
      <id>https://rjlipton.wordpress.com</id>
      <logo>https://s0.wp.com/i/buttonw-com.png</logo>
      <link href="https://rjlipton.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="https://rjlipton.wordpress.com" rel="alternate" type="text/html"/>
      <link href="https://rjlipton.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="https://rjlipton.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>a personal view of the theory of computation</subtitle>
      <title>Gödel’s Lost Letter and P=NP</title>
      <updated>2019-11-21T06:20:35Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1911.08372</id>
    <link href="http://arxiv.org/abs/1911.08372" rel="alternate" type="text/html"/>
    <title>Improved Compressed String Dictionaries</title>
    <feedworld_mtime>1574208000</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/b/Brisaboa:Nieves_R=.html">Nieves R. Brisaboa</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/c/Cerdeira=Pena:Ana.html">Ana Cerdeira-Pena</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/b/Bernardo:Guillermo_de.html">Guillermo de Bernardo</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/n/Navarro:Gonzalo.html">Gonzalo Navarro</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1911.08372">PDF</a><br/><b>Abstract: </b>We introduce a new family of compressed data structures to efficiently store
and query large string dictionaries in main memory. Our main technique is a
combination of hierarchical Front-coding with ideas from longest-common-prefix
computation in suffix arrays. Our data structures yield relevant space-time
tradeoffs in real-world dictionaries. We focus on two domains where string
dictionaries are extensively used and efficient compression is required: URL
collections, a key element in Web graphs and applications such as Web mining;
and collections of URIs and literals, the basic components of RDF datasets. Our
experiments show that our data structures achieve better compression than the
state-of-the-art alternatives while providing very competitive query times.
</p></div>
    </summary>
    <updated>2019-11-20T23:54:57Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-11-20T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1911.08339</id>
    <link href="http://arxiv.org/abs/1911.08339" rel="alternate" type="text/html"/>
    <title>The Power of Factorization Mechanisms in Local and Central Differential Privacy</title>
    <feedworld_mtime>1574208000</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b>Alexander Edmonds, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/n/Nikolov:Aleksandar.html">Aleksandar Nikolov</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/u/Ullman:Jonathan.html">Jonathan Ullman</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1911.08339">PDF</a><br/><b>Abstract: </b>We give new characterizations of the sample complexity of answering linear
queries (statistical queries) in the local and central models of differential
privacy:
</p>
<p>*In the non-interactive local model, we give the first approximate
characterization of the sample complexity. Informally our bounds are tight to
within polylogarithmic factors in the number of queries and desired accuracy.
Our characterization extends to agnostic learning in the local model.
</p>
<p>*In the central model, we give a characterization of the sample complexity in
the high-accuracy regime that is analogous to that of Nikolov, Talwar, and
Zhang (STOC 2013), but is both quantitatively tighter and has a dramatically
simpler proof.
</p>
<p>Our lower bounds apply equally to the empirical and population estimation
problems. In both cases, our characterizations show that a particular
factorization mechanism is approximately optimal, and the optimal sample
complexity is bounded from above and below by well studied factorization norms
of a matrix associated with the queries.
</p></div>
    </summary>
    <updated>2019-11-20T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-11-20T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1911.08320</id>
    <link href="http://arxiv.org/abs/1911.08320" rel="alternate" type="text/html"/>
    <title>Property Testing of LP-Type Problems</title>
    <feedworld_mtime>1574208000</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b>Rogers Epstein, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/s/Silwal:Sandeep.html">Sandeep Silwal</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1911.08320">PDF</a><br/><b>Abstract: </b>Given query access to a set of constraints $S$, we wish to quickly check if
some objective function $\varphi$ subject to these constraints is at most a
given value $k$. We approach this problem using the framework of property
testing where our goal is to distinguish the case $\varphi(S) \le k$ from the
case that at least an $\epsilon$ fraction of the constraints in $S$ need to be
removed for $\varphi(S) \le k$ to hold. We restrict our attention to the case
where $(S, \varphi)$ are LP-Type problems which is a rich family of
combinatorial optimization problems with an inherent geometric structure. By
utilizing a simple sampling procedure which has been used previously to study
these problems, we are able to create property testers for any LP-Type problem
whose query complexities are independent of the number of constraints. To the
best of our knowledge, this is the first work that connects the area of LP-Type
problems and property testing in a systematic way. Among our results is a tight
upper bound on the query complexity of testing clusterability with one cluster
considered by Alon, Dar, Parnas, and Ron (FOCS 2000). We also supply a
corresponding tight lower bound for this problem and other LP-Type problems
using geometric constructions.
</p></div>
    </summary>
    <updated>2019-11-20T23:28:44Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-11-20T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1911.08297</id>
    <link href="http://arxiv.org/abs/1911.08297" rel="alternate" type="text/html"/>
    <title>Beyond Natural Proofs: Hardness Magnification and Locality</title>
    <feedworld_mtime>1574208000</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/c/Chen:Lijie.html">Lijie Chen</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/h/Hirahara:Shuichi.html">Shuichi Hirahara</a>, Igor C. Oliveira, Jan Pich, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/r/Rajgopal:Ninad.html">Ninad Rajgopal</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/s/Santhanam:Rahul.html">Rahul Santhanam</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1911.08297">PDF</a><br/><b>Abstract: </b>Hardness magnification reduces major complexity separations (such as
$\mathsf{\mathsf{EXP}} \nsubseteq \mathsf{NC}^1$) to proving lower bounds for
some natural problem $Q$ against weak circuit models. Several recent works
[OS18, MMW19, CT19, OPS19, CMMW19, Oli19, CJW19a] have established results of
this form. In the most intriguing cases, the required lower bound is known for
problems that appear to be significantly easier than $Q$, while $Q$ itself is
susceptible to lower bounds but these are not yet sufficient for magnification.
</p>
<p>In this work, we provide more examples of this phenomenon, and investigate
the prospects of proving new lower bounds using this approach. In particular,
we consider the following essential questions associated with the hardness
magnification program:
</p>
<p>Does hardness magnification avoid the natural proofs barrier of Razborov and
Rudich [RR97]?
</p>
<p>Can we adapt known lower bound techniques to establish the desired lower
bound for $Q$?
</p></div>
    </summary>
    <updated>2019-11-20T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Complexity"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CC" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Complexity (cs.CC) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CC updates on arXiv.org</title>
      <updated>2019-11-20T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1911.08275</id>
    <link href="http://arxiv.org/abs/1911.08275" rel="alternate" type="text/html"/>
    <title>Corrfunc: Blazing fast correlation functions with AVX512F SIMD Intrinsics</title>
    <feedworld_mtime>1574208000</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b>Manodeep Sinha, Lehman H. Garrison <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1911.08275">PDF</a><br/><b>Abstract: </b>Correlation functions are widely used in extra-galactic astrophysics to
extract insights into how galaxies occupy dark matter halos and in cosmology to
place stringent constraints on cosmological parameters. A correlation function
fundamentally requires computing pair-wise separations between two sets of
points and then computing a histogram of the separations. Corrfunc is an
existing open-source, high-performance software package for efficiently
computing a multitude of correlation functions. In this paper, we will discuss
the SIMD AVX512F kernels within Corrfunc, capable of processing 16 floats or 8
doubles at a time. The latest manually implemented Corrfunc AVX512F kernels
show a speedup of up to $\sim 4\times$ relative to compiler-generated code for
double-precision calculations. The AVX512F kernels show $\sim 1.6\times$
speedup relative to the AVX kernels and compare favorably to a theoretical
maximum of $2\times$. In addition, by pruning pairs with too large of a minimum
possible separation, we achieve a $\sim 5-10\%$ speedup across all the SIMD
kernels. Such speedups highlight the importance of programming explicitly with
SIMD vector intrinsics for complex calculations that can not be efficiently
vectorized by compilers. Corrfunc is publicly available at
https://github.com/manodeep/Corrfunc/.
</p></div>
    </summary>
    <updated>2019-11-20T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-11-20T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1911.08101</id>
    <link href="http://arxiv.org/abs/1911.08101" rel="alternate" type="text/html"/>
    <title>Two-message verification of quantum computation</title>
    <feedworld_mtime>1574208000</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/a/Alagic:Gorjan.html">Gorjan Alagic</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/c/Childs:Andrew_M=.html">Andrew M. Childs</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/h/Hung:Shih=Han.html">Shih-Han Hung</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1911.08101">PDF</a><br/><b>Abstract: </b>We describe a two-message protocol that enables a purely classical verifier
to delegate any quantum computation to an untrusted quantum prover. The
protocol begins with the verifier publishing a problem instance together with a
public cryptographic key. The prover then transmits the computation result,
appropriately encoded. Finally, the verifier uses their private key to detect
any cheating and extract the result.
</p>
<p>We achieve this by upgrading the verification protocol of Mahadev in two
steps. First, the protocol is repeated many times in parallel, yielding a
four-message protocol with negligible soundness error. This enables the second
step: the "challenge round" is eliminated via the Fiat-Shamir transform, in
which the prover computes their own challenges using a public hash function.
</p>
<p>We show that this protocol is secure under the same assumptions underlying
many candidate schemes for post-quantum public-key cryptography. Specifically,
it is secure in the Quantum Random Oracle Model, and assuming the quantum
hardness of the Learning with Errors problem. The main technical advance in our
security proof is a parallel repetition theorem for the Mahadev protocol.
</p></div>
    </summary>
    <updated>2019-11-20T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Complexity"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CC" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Complexity (cs.CC) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CC updates on arXiv.org</title>
      <updated>2019-11-20T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1911.08085</id>
    <link href="http://arxiv.org/abs/1911.08085" rel="alternate" type="text/html"/>
    <title>Outlier-Robust High-Dimensional Sparse Estimation via Iterative Filtering</title>
    <feedworld_mtime>1574208000</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/d/Diakonikolas:Ilias.html">Ilias Diakonikolas</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/k/Karmalkar:Sushrut.html">Sushrut Karmalkar</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/k/Kane:Daniel.html">Daniel Kane</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/p/Price:Eric.html">Eric Price</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/s/Stewart:Alistair.html">Alistair Stewart</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1911.08085">PDF</a><br/><b>Abstract: </b>We study high-dimensional sparse estimation tasks in a robust setting where a
constant fraction of the dataset is adversarially corrupted. Specifically, we
focus on the fundamental problems of robust sparse mean estimation and robust
sparse PCA. We give the first practically viable robust estimators for these
problems. In more detail, our algorithms are sample and computationally
efficient and achieve near-optimal robustness guarantees. In contrast to prior
provable algorithms which relied on the ellipsoid method, our algorithms use
spectral techniques to iteratively remove outliers from the dataset. Our
experimental evaluation on synthetic data shows that our algorithms are
scalable and significantly outperform a range of previous approaches, nearly
matching the best error rate without corruptions.
</p></div>
    </summary>
    <updated>2019-11-20T23:24:38Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-11-20T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1911.08043</id>
    <link href="http://arxiv.org/abs/1911.08043" rel="alternate" type="text/html"/>
    <title>Mapping NP-hard and NP-complete optimisation problems to Quadratic Unconstrained Binary Optimisation problems</title>
    <feedworld_mtime>1574208000</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b>Bas Lodewijks <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1911.08043">PDF</a><br/><b>Abstract: </b>We discuss several mappings from well-known NP-hard problems to Quadratic
Unconstrained Binary Optimisation problems which are treated incorrectly by
Lucas in \cite{Luc14}. We provide counterexamples and correct the mappings. We
also extend the body of QUBO formulations of NP-complete and NP-hard
optimisation problems by discussing additional problems.
</p></div>
    </summary>
    <updated>2019-11-20T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-11-20T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1911.08015</id>
    <link href="http://arxiv.org/abs/1911.08015" rel="alternate" type="text/html"/>
    <title>Low-Rank Toeplitz Matrix Estimation via Random Ultra-Sparse Rulers</title>
    <feedworld_mtime>1574208000</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/l/Lawrence:Hannah.html">Hannah Lawrence</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/l/Li:Jerry.html">Jerry Li</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/m/Musco:Cameron.html">Cameron Musco</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/m/Musco:Christopher.html">Christopher Musco</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1911.08015">PDF</a><br/><b>Abstract: </b>We study how to estimate a nearly low-rank Toeplitz covariance matrix $T$
from compressed measurements. Recent work of Qiao and Pal addresses this
problem by combining sparse rulers (sparse linear arrays) with frequency
finding (sparse Fourier transform) algorithms applied to the Vandermonde
decomposition of $T$. Analytical bounds on the sample complexity are shown,
under the assumption of sufficiently large gaps between the frequencies in this
decomposition. In this work, we introduce random ultra-sparse rulers and
propose an improved approach based on these objects. Our random rulers
effectively apply a random permutation to the frequencies in $T$'s Vandermonde
decomposition, letting us avoid frequency gap assumptions and leading to
improved sample complexity bounds. In the special case when $T$ is circulant,
we theoretically analyze the performance of our method when combined with
sparse Fourier transform algorithms based on random hashing. We also show
experimentally that our ultra-sparse rulers give significantly more robust and
sample efficient estimation then baseline methods.
</p></div>
    </summary>
    <updated>2019-11-20T23:29:54Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-11-20T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1911.08004</id>
    <link href="http://arxiv.org/abs/1911.08004" rel="alternate" type="text/html"/>
    <title>Consistent recovery threshold of hidden nearest neighbor graphs</title>
    <feedworld_mtime>1574208000</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/d/Ding:Jian.html">Jian Ding</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/w/Wu:Yihong.html">Yihong Wu</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/x/Xu:Jiaming.html">Jiaming Xu</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/y/Yang:Dana.html">Dana Yang</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1911.08004">PDF</a><br/><b>Abstract: </b>Motivated by applications such as discovering strong ties in social networks
and assembling genome subsequences in biology, we study the problem of
recovering a hidden $2k$-nearest neighbor (NN) graph in an $n$-vertex complete
graph, whose edge weights are independent and distributed according to $P_n$
for edges in the hidden $2k$-NN graph and $Q_n$ otherwise. The special case of
Bernoulli distributions corresponds to a variant of the Watts-Strogatz
small-world graph. We focus on two types of asymptotic recovery guarantees as
$n\to \infty$: (1) exact recovery: all edges are classified correctly with
probability tending to one; (2) almost exact recovery: the expected number of
misclassified edges is $o(nk)$. We show that the maximum likelihood estimator
achieves (1) exact recovery for $2 \le k \le n^{o(1)}$ if $ \liminf
\frac{2\alpha_n}{\log n}&gt;1$; (2) almost exact recovery for $ 1 \le k \le
o\left( \frac{\log n}{\log \log n} \right)$ if $\liminf
\frac{kD(P_n||Q_n)}{\log n}&gt;1$, where $\alpha_n \triangleq -2 \log \int \sqrt{d
P_n d Q_n}$ is the R\'enyi divergence of order $\frac{1}{2}$ and $D(P_n||Q_n)$
is the Kullback-Leibler divergence. Under mild distributional assumptions,
these conditions are shown to be information-theoretically necessary for any
algorithm to succeed. A key challenge in the analysis is the enumeration of
$2k$-NN graphs that differ from the hidden one by a given number of edges.
</p></div>
    </summary>
    <updated>2019-11-20T23:30:20Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-11-20T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1911.07981</id>
    <link href="http://arxiv.org/abs/1911.07981" rel="alternate" type="text/html"/>
    <title>New lower bounds for matrix multiplication and the 3x3 determinant</title>
    <feedworld_mtime>1574208000</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/c/Conner:Austin.html">Austin Conner</a>, Alicia Harper, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/l/Landsberg:J=_M=.html">J. M. Landsberg</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1911.07981">PDF</a><br/><b>Abstract: </b>Let $M_{\langle u,v,w\rangle}\in C^{uv}\otimes C^{vw}\otimes C^{wu}$ denote
the matrix multiplication tensor (and write $M_n=M_{\langle n,n,n\rangle}$) and
let $det_3\in ( C^9)^{\otimes 3}$ denote the determinant polynomial considered
as a tensor. For a tensor $T$, let $\underline R(T)$ denote its border rank. We
(i) give the first hand-checkable algebraic proof that $\underline
R(M_2)=7$,(ii) prove $\underline R(M_{\langle 223\rangle})=10$, and $\underline
R(M_{\langle 233\rangle})=14$, where previously the only nontrivial matrix
multiplication tensor whose border rank had been determined was $M_2$,(iii)
prove $\underline R( M_3)\geq 17$, (iv) prove $\underline R( det_3)=17$,
improving the previous lower bound of $12$, (v) prove $\underline R(M_{\langle
2nn\rangle})\geq n^2+1.32n$ for all $n\geq 25$ (previously only $\underline
R(M_{\langle 2nn\rangle})\geq n^2+1$ was known) as well as lower bounds for
$4\leq n\leq 25$, and (vi) prove $\underline R(M_{\langle 3nn\rangle})\geq
n^2+2 n+1$ for all $ n\geq 21$, where previously only $\underline R(M_{\langle
3nn\rangle})\geq n^2+2$ was known, as well as lower boundsfor $4\leq n\leq 21$.
</p>
<p>Our results utilize a new technique initiated by Buczy\'{n}ska and
Buczy\'{n}ski, called border apolarity. The two key ingredients are: (i) the
use of a multi-graded ideal associated to a border rank $r$ decomposition of
any tensor, and (ii) the exploitation of the large symmetry group of $T$ to
restrict to $B_T$-invariant ideals, where $B_T$ is a maximal solvable subgroup
of the symmetry group of $T$.
</p></div>
    </summary>
    <updated>2019-11-20T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Complexity"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CC" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Complexity (cs.CC) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CC updates on arXiv.org</title>
      <updated>2019-11-20T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1911.07972</id>
    <link href="http://arxiv.org/abs/1911.07972" rel="alternate" type="text/html"/>
    <title>Learning-Assisted Competitive Algorithms for Peak-Aware Energy Scheduling</title>
    <feedworld_mtime>1574208000</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b>Russell Lee, Mohammad H. Hajiesmaili, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/l/Li:Jian.html">Jian Li</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1911.07972">PDF</a><br/><b>Abstract: </b>In this paper, we study the peak-aware energy scheduling problem using the
competitive framework with machine learning prediction. With the uncertainty of
energy demand as the fundamental challenge, the goal is to schedule the energy
output of local generation units such that the electricity bill is minimized.
While this problem has been tackled using classic competitive design with
worst-case guarantee, the goal of this paper is to develop learning-assisted
competitive algorithms to improve the performance in a provable manner. We
develop two deterministic and randomized algorithms that are provably robust
against the poor performance of learning prediction, however, achieve the
optimal performance as the error of prediction goes to zero. Extensive
experiments using real data traces verify our theoretical observations and show
15.13% improved performance against pure online algorithms.
</p></div>
    </summary>
    <updated>2019-11-20T23:32:18Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-11-20T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1911.07945</id>
    <link href="http://arxiv.org/abs/1911.07945" rel="alternate" type="text/html"/>
    <title>Optimal Single-Choice Prophet Inequalities from Samples</title>
    <feedworld_mtime>1574208000</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/r/Rubinstein:Aviad.html">Aviad Rubinstein</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/w/Wang:Jack_Z=.html">Jack Z. Wang</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/w/Weinberg:S=_Matthew.html">S. Matthew Weinberg</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1911.07945">PDF</a><br/><b>Abstract: </b>We study the single-choice Prophet Inequality problem when the gambler is
given access to samples. We show that the optimal competitive ratio of $1/2$
can be achieved with a single sample from each distribution. When the
distributions are identical, we show that for any constant $\varepsilon &gt; 0$,
$O(n)$ samples from the distribution suffice to achieve the optimal competitive
ratio ($\approx 0.745$) within $(1+\varepsilon)$, resolving an open problem of
Correa, D\"utting, Fischer, and Schewior.
</p></div>
    </summary>
    <updated>2019-11-20T23:27:29Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-11-20T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1911.07306</id>
    <link href="http://arxiv.org/abs/1911.07306" rel="alternate" type="text/html"/>
    <title>Quantum Speedup for Graph Sparsification, Cut Approximation and Laplacian Solving</title>
    <feedworld_mtime>1574208000</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/a/Apers:Simon.html">Simon Apers</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/w/Wolf:Ronald_de.html">Ronald de Wolf</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1911.07306">PDF</a><br/><b>Abstract: </b>Graph sparsification underlies a large number of algorithms, ranging from
approximation algorithms for cut problems to solvers for linear systems in the
graph Laplacian. In its strongest form, "spectral sparsification" reduces the
number of edges to near-linear in the number of nodes, while approximately
preserving the cut and spectral structure of the graph. The breakthrough work
by Bencz\'ur and Karger (STOC'96) and Spielman and Teng (STOC'04) showed that
sparsification can be done optimally in time near-linear in the number of edges
of the original graph.
</p>
<p>In this work we show that quantum algorithms allow to speed up spectral
sparsification, and thereby many of the derived algorithms. Given
adjacency-list access to a weighted graph with $n$ nodes and $m$ edges, our
algorithm outputs an $\epsilon$-spectral sparsifier in time
$\widetilde{O}(\sqrt{mn}/\epsilon)$. We prove that this is tight up to
polylog-factors. The algorithm builds on a string of existing results, most
notably sparsification algorithms by Spielman and Srivastava (STOC'08) and
Koutis and Xu (TOPC'16), a spanner construction by Thorup and Zwick (STOC'01),
a single-source shortest-paths quantum algorithm by D\"urr et al. (ICALP'04)
and an efficient $k$-wise independent hash construction by Christiani, Pagh and
Thorup (STOC'15). Combining our sparsification algorithm with existing
classical algorithms yields the first quantum speedup, roughly from
$\widetilde{O}(m)$ to $\widetilde{O}(\sqrt{mn})$, for approximating the max
cut, min cut, min $st$-cut, sparsest cut and balanced separator of a graph.
Combining our algorithm with a classical Laplacian solver, we demonstrate a
similar speedup for Laplacian solving, for approximating effective resistances,
cover times and eigenvalues of the Laplacian, and for spectral clustering.
</p></div>
    </summary>
    <updated>2019-11-20T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-11-20T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1907.09415</id>
    <link href="http://arxiv.org/abs/1907.09415" rel="alternate" type="text/html"/>
    <title>Quantum Computing: Lecture Notes</title>
    <feedworld_mtime>1574208000</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/w/Wolf:Ronald_de.html">Ronald de Wolf</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1907.09415">PDF</a><br/><b>Abstract: </b>This is a set of lecture notes suitable for a Master's course on quantum
computation and information from the perspective of theoretical computer
science. The first version was written in 2011, with many extensions and
improvements in subsequent years. The first 10 chapters cover the circuit model
and the main quantum algorithms (Deutsch-Jozsa, Simon, Shor, Hidden Subgroup
Problem, Grover, quantum walks, Hamiltonian simulation and HHL). They are
followed by 2 chapters about complexity, 4 chapters about distributed ("Alice
and Bob") settings, and a final chapter about quantum error correction.
Appendices A and B give a brief introduction to the required linear algebra and
some other mathematical and computer science background. All chapters come with
exercises, with some hints provided in Appendix C.
</p></div>
    </summary>
    <updated>2019-11-20T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-11-20T01:30:00Z</updated>
    </source>
  </entry>
</feed>
