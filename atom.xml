<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:planet="http://planet.intertwingly.net/" xmlns:indexing="urn:atom-extension:indexing" indexing:index="no"><access:restriction xmlns:access="http://www.bloglines.com/about/specs/fac-1.0" relationship="deny"/>
  <title>Theory of Computing Blog Aggregator</title>
  <updated>2019-07-11T22:21:49Z</updated>
  <generator uri="http://intertwingly.net/code/venus/">Venus</generator>
  <author>
    <name>Arnab Bhattacharyya, Suresh Venkatasubramanian</name>
    <email>arbhat+cstheoryfeed@gmail.com</email>
  </author>
  <id>http://www.cstheory-feed.org/atom.xml</id>
  <link href="http://www.cstheory-feed.org/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="http://www.cstheory-feed.org/" rel="alternate"/>

  <entry>
    <id>tag:blogger.com,1999:blog-3722233.post-1705625191398821823</id>
    <link href="https://blog.computationalcomplexity.org/feeds/1705625191398821823/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="https://blog.computationalcomplexity.org/2019/07/degree-and-sensitivity.html#comment-form" rel="replies" type="text/html"/>
    <link href="https://www.blogger.com/feeds/3722233/posts/default/1705625191398821823" rel="edit" type="application/atom+xml"/>
    <link href="https://www.blogger.com/feeds/3722233/posts/default/1705625191398821823" rel="self" type="application/atom+xml"/>
    <link href="https://blog.computationalcomplexity.org/2019/07/degree-and-sensitivity.html" rel="alternate" type="text/html"/>
    <title>Degree and Sensitivity</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Hao Huang's <a href="https://arxiv.org/abs/1907.00847">proof of the sensitivity conjecture</a> that I <a href="https://blog.computationalcomplexity.org/2019/07/local-kid-makes-history.html">posted on last week</a> relied on a 1992 <a href="https://doi.org/10.1016/0097-3165(92)90060-8">result of Gotsman and Linial</a>. Let's talk about that result.<br/>
<br/>
Consider the set S={-1,1}<sup>n</sup>. The hypercube of dimension n is the graph with vertex set S and an edge between x = (x<sub>1</sub>,…,x<sub>n</sub>) and y = (y<sub>1</sub>,…,y<sub>n</sub>) in S if there is exactly one i such that x<sub>i</sub> ≠ y<sub>i</sub>. Every vertex has degree n.<br/>
<br/>
We say a vertex x is odd if x has an odd number of -1 coordinates, even otherwise. Every edge joins an odd and even vertex.<br/>
<br/>
Let f be a function mapping S to {-1,1}. The sensitivity of f on x is the number of i such that f(x<sub>1</sub>,…,x<sub>i</sub>,…,x<sub>n</sub>) ≠ f(x<sub>1</sub>,…,-x<sub>i</sub>,…,x<sub>n</sub>). The sensitivity of f is the maximum over all x in S of the sensitivity of f on x.<br/>
<br/>
Let g be the same function as f except that we flip the value on all odd vertices. Notice now that the sensitivity of f on x is the number of i such that g(x<sub>1</sub>,…,x<sub>i</sub>,…,x<sub>n</sub>) = g(x<sub>1</sub>,…,-x<sub>i</sub>,…,x<sub>n</sub>).<br/>
<br/>
Let G be the induced subgraph of vertices of x such that g(x)=-1 and H be induced subgraph on the set of x such that g(x)=1. The sensitivity of f is the maximum number of neighbors of any vertex in G or H.<br/>
<br/>
Consider f as a multilinear polynomial over the reals. The sensitivity conjecture states there is some α&gt;0 such that if f has degree n then f has sensitivity at least n<sup>α</sup>.<br/>
<br/>
Note g(x<sub>1</sub>,…,x<sub>n</sub>)=f(x<sub>1</sub>,…,x<sub>n</sub>)x<sub>1</sub>⋯x<sub>n</sub>. If f has a degree n term, the variables in that term cancel out on S (since x<sub>i</sub><sup>2</sup>=1) and the constant of the degree n term of f becomes the constant term of g. The constant term is just the expected value, so f has full degree iff g is unbalanced.<br/>
<br/>
GL Assumption: Suppose you have a partition of the hypercube into sets A and B with |A| ≠ |B|, and let G and H be the induced subgraphs of A and B. Then there is some constant α&gt;0 such that there is a node of A or B with at least n<sup>α</sup> neighbors.<br/>
<br/>
The above argument, due to Gotsman and Linial, shows that the GL assumption is equivalent to the sensitivity conjecture.<br/>
<br/>
Huang proved that given any subset A of the vertices of a hypercube with |A|&gt;2<sup>n</sup>/2 the induced subgraph has a node of degree at least n<sup>1/2</sup>. Since either A or B in the GL assumption has size greater than 2<sup>n</sup>/2, Huang's result gives the sensitivity conjecture.</div>
    </content>
    <updated>2019-07-11T17:54:00Z</updated>
    <published>2019-07-11T17:54:00Z</published>
    <author>
      <name>Lance Fortnow</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/06752030912874378610</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-3722233</id>
      <category term="typecast"/>
      <category term="focs metacomments"/>
      <author>
        <name>Lance Fortnow</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/06752030912874378610</uri>
      </author>
      <link href="https://blog.computationalcomplexity.org/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="https://www.blogger.com/feeds/3722233/posts/default" rel="self" type="application/atom+xml"/>
      <link href="https://blog.computationalcomplexity.org/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <link href="https://www.blogger.com/feeds/3722233/posts/default?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml"/>
      <subtitle>Computational Complexity and other fun stuff in math and computer science from Lance Fortnow and Bill Gasarch</subtitle>
      <title>Computational Complexity</title>
      <updated>2019-07-11T19:37:18Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1907.04844</id>
    <link href="http://arxiv.org/abs/1907.04844" rel="alternate" type="text/html"/>
    <title>Vertex-Fault Tolerant Complete Matching in Bipartite graphs: the Biregular Case</title>
    <feedworld_mtime>1562803200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/c/Cichacz:Sylwia.html">Sylwia Cichacz</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/s/Suchan:Karol.html">Karol Suchan</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1907.04844">PDF</a><br/><b>Abstract: </b>Given a family $\mathcal{H}$ of graphs and a positive integer $k$, a graph
$G$ is called vertex $k$-fault-tolerant with respect to $\mathcal{H}$, denoted
by $k$-FT$(\mathcal{H})$, if $G-S$ contains some $H\in\mathcal{H}$ as a
subgraph, for every $S\subset V(G)$ with $|S|\leq k$. Vertex-fault-tolerance
has been introduced by Hayes [A graph model for fault-tolerant computing
systems, IEEE Transactions on Computers, C-25 (1976), pp. 875-884.], and has
been studied in view of potential applications in the design of interconnection
networks operating correctly in the presence of faults. We define the
Fault-Tolerant Complete Matching (FTCM) Problem in bipartite graphs of order
$(n,m)$: to design a bipartite $G=(U,V;E)$, with $|U|=n$, $|V|=m$, $n&gt;m&gt;1$,
that has a FTCM, and the tuple $(\Delta_U, \Delta_V)$, where $\Delta_U$ and
$\Delta_V$ are the maximum degree in $U$ and $V$, respectively, is
lexicographically minimum. $G$ has a FTCM if deleting at most $n-m$ vertices
from $U$ creates $G'$ that has a complete matching, i.e., a matching of size
$m$. We show that if $m(n-m+1)/n$ is integer, solutions of the FTCM Problem can
be found among $(a,b)$-regular bipartite graphs of order $(n,m)$, with
$a=m(n-m+1)/n$, and $b=n-m+1$. If $a=m-1$ then all $(a,b)$-regular bipartite
graphs of order $(n,m)$ have a FTCM, and for $a&lt;m-1$, it is not the case. We
characterize the values of $n$, $m$, $a$, and $b$ that admit an $(a,b)$-regular
bipartite graph of order $(n,m)$, with $b=n-m+1$, and give a simple
construction that creates such a graph with a FTCM whenever possible. Our
techniques are based on Hall's marriage theorem, elementary number theory,
linear Diophantine equations, properties of integer functions and congruences,
and equations involving them.
</p></div>
    </summary>
    <updated>2019-07-11T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-07-11T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1907.04826</id>
    <link href="http://arxiv.org/abs/1907.04826" rel="alternate" type="text/html"/>
    <title>Approximately counting and sampling small witnesses using a colourful decision oracle</title>
    <feedworld_mtime>1562803200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/d/Dell:Holger.html">Holger Dell</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/l/Lapinskas:John.html">John Lapinskas</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/m/Meeks:Kitty.html">Kitty Meeks</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1907.04826">PDF</a><br/><b>Abstract: </b>In this paper, we prove "black box" results for turning algorithms which
decide whether or not a witness exists into algorithms to approximately count
the number of witnesses, or to sample from the set of witnesses approximately
uniformly, with essentially the same running time. We do so by extending the
framework of Dell and Lapinskas (STOC 2018), which covers decision problems
that can be expressed as edge detection in bipartite graphs given limited
oracle access; our framework covers problems which can be expressed as edge
detection in arbitrary $k$-hypergraphs given limited oracle access. (Simulating
this oracle generally corresponds to invoking a decision algorithm.) This
includes many key problems in both the fine-grained setting (such as $k$-SUM,
$k$-OV and weighted $k$-Clique) and the parameterised setting (such as induced
subgraphs of size $k$ or weight-$k$ solutions to CSPs). From an algorithmic
standpoint, our results will make the development of new approximate counting
algorithms substantially easier; indeed, it already yields a new
state-of-the-art algorithm for approximately counting graph motifs, improving
on Jerrum and Meeks (JCSS 2015) unless the input graph is very dense and the
desired motif very small. Our $k$-hypergraph reduction framework generalises
and strengthens results in the graph oracle literature due to Beame et al.
(ITCS 2018) and Bhattacharya et al. (CoRR abs/1808.00691).
</p></div>
    </summary>
    <updated>2019-07-11T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-07-11T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1907.04824</id>
    <link href="http://arxiv.org/abs/1907.04824" rel="alternate" type="text/html"/>
    <title>Scheduling With Inexact Job Sizes: The Merits of Shortest Processing Time First</title>
    <feedworld_mtime>1562803200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b>Matteo Dell'Amico <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1907.04824">PDF</a><br/><b>Abstract: </b>It is well known that size-based scheduling policies, which take into account
job size (i.e., the time it takes to run them), can perform very desirably in
terms of both response time and fairness. Unfortunately, the requirement of
knowing a priori the exact job size is a major obstacle which is frequently
insurmountable in practice. Often, it is possible to get a coarse estimation of
job size, but unfortunately analytical results with inexact job sizes are
challenging to obtain, and simulation-based studies show that several
size-based algorithm are severely impacted by job estimation errors. For
example, Shortest Remaining Processing Time (SRPT), which yields optimal mean
sojourn time when job sizes are known exactly, can drastically underperform
when it is fed inexact job sizes.
</p>
<p>Some algorithms have been proposed to better handle size estimation errors,
but they are somewhat complex and this makes their analysis challenging. We
consider Shortest Processing Time (SPT), a simplification of SRPT that skips
the update of "remaining" job size and results in a preemptive algorithm that
simply schedules the job with the shortest estimated processing time. When job
size is inexact, SPT performs comparably to the best known algorithms in the
presence of errors, while being definitely simpler. In this work, SPT is
evaluated through simulation, showing near-optimal performance in many cases,
with the hope that its simplicity can open the way to analytical evaluation
even when inexact inputs are considered.
</p></div>
    </summary>
    <updated>2019-07-11T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-07-11T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1907.04776</id>
    <link href="http://arxiv.org/abs/1907.04776" rel="alternate" type="text/html"/>
    <title>On the Complexity of Completing Binary Predicates</title>
    <feedworld_mtime>1562803200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/e/Epstein:Samuel.html">Samuel Epstein</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1907.04776">PDF</a><br/><b>Abstract: </b>Given a binary predicate P, the length of the smallest program that computes
a complete extension of P is less than the size of the domain of P plus the
amount of information that P has with the halting sequence. This result is
derived from a theorem in this paper which says a prefix free set with large M
measure will have small monotone complexity, Km.
</p></div>
    </summary>
    <updated>2019-07-11T01:38:22Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Complexity"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CC" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Complexity (cs.CC) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CC updates on arXiv.org</title>
      <updated>2019-07-11T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1907.04752</id>
    <link href="http://arxiv.org/abs/1907.04752" rel="alternate" type="text/html"/>
    <title>Sparse Regular Expression Matching</title>
    <feedworld_mtime>1562803200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/b/Bille:Philip.html">Philip Bille</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/g/G=oslash=rtz:Inge_Li.html">Inge Li Gørtz</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1907.04752">PDF</a><br/><b>Abstract: </b>We present the first algorithm for regular expression matching that can take
advantage of sparsity in the input instance. Our main result is a new algorithm
that solves regular expression matching in $O\left(\Delta \log \log
\frac{nm}{\Delta} + n + m\right)$ time, where $m$ is the number of positions in
the regular expression, $n$ is the length of the string, and $\Delta$ is the
\emph{density} of the instance, defined as the total number of active states in
a simulation of the position automaton. This measure is a lower bound on the
total number of active states in simulations of all classic polynomial sized
finite automata. Our bound improves the best known bounds for regular
expression matching by almost a linear factor in the density of the problem.
The key component in the result is a novel linear space representation of the
position automaton that supports state-set transition computation in
near-linear time in the size of the input and output state sets.
</p></div>
    </summary>
    <updated>2019-07-11T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-07-11T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1907.04750</id>
    <link href="http://arxiv.org/abs/1907.04750" rel="alternate" type="text/html"/>
    <title>Efficient Gauss Elimination for Near-Quadratic Matrices with One Short Random Block per Row, with Applications</title>
    <feedworld_mtime>1562803200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b>Martin Dietzfelbinger Stefan Walzer <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1907.04750">PDF</a><br/><b>Abstract: </b>In this paper we identify a new class of sparse near-quadratic random Boolean
matrices that have full row rank over $\mathbb{F}_2=\{0,1\}$ with high
probability and can be transformed into echelon form in almost linear time by a
simple version of Gauss elimination. The random matrix with dimensions
$n(1-\varepsilon) \times n$ is generated as follows: In each row, identify a
block of length $L=O((\log n)/\varepsilon)$ at a random position. The entries
outside the block are 0, the entries inside the block are given by fair coin
tosses. Sorting the rows according to the positions of the blocks transforms
the matrix into a kind of band matrix, on which, as it turns out, Gauss
elimination works very efficiently with high probability. For the proof, the
effects of Gauss elimination are interpreted as a ("coin-flipping") variant of
Robin Hood hashing, whose behaviour can be captured in terms of a simple Markov
model from queuing theory. Bounds for expected construction time and high
success probability follow from results in this area.
</p>
<p>By employing hashing, this matrix family leads to a new implementation of a
retrieval data structure, which represents an arbitrary function $f\colon S \to
\{0,1\}$ for some set $S$ of $m=(1-\varepsilon)n$ keys. It requires
$m/(1-\varepsilon)$ bits of space, construction takes $O(m/\varepsilon^2$)
expected time on a word RAM, while queries take $O(1/\varepsilon)$ time and
access only one contiguous segment of $O((\log m)/\varepsilon)$ bits in the
representation. The method is competitive with state-of-the-art methods. By
well-established methods the retrieval data structure leads to efficient
constructions of (static) perfect hash functions and (static) Bloom filters
with almost optimal space and very local storage access patterns for queries.
</p></div>
    </summary>
    <updated>2019-07-11T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-07-11T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1907.04749</id>
    <link href="http://arxiv.org/abs/1907.04749" rel="alternate" type="text/html"/>
    <title>Dense Peelable Random Uniform Hypergraphs</title>
    <feedworld_mtime>1562803200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/d/Dietzfelbinger:Martin.html">Martin Dietzfelbinger</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/w/Walzer:Stefan.html">Stefan Walzer</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1907.04749">PDF</a><br/><b>Abstract: </b>We describe a new family of $k$-uniform hypergraphs with independent random
edges. The hypergraphs have a high probability of being peelable, i.e. to admit
no sub-hypergraph of minimum degree $2$, even when the edge density (number of
edges over vertices) is close to $1$. In our construction, the vertex set is
partitioned into linearly arranged segments and each edge is incident to random
vertices of $k$ consecutive segments. Quite surprisingly, the linear geometry
allows our graphs to be peeled "from the outside in". The density thresholds
$f_k$ for peelability of our hypergraphs ($f_3 \approx 0.918$, $f_4 \approx
0.977$, $f_5 \approx 0.992$, ...) are well beyond the corresponding thresholds
($c_3 \approx 0.818$, $c_4 \approx 0.772$, $c_5 \approx 0.702$, ...) of
standard $k$-uniform random hypergraphs. To get a grip on $f_k$, we analyse an
idealised peeling process on the random weak limit of our hypergraph family.
The process can be described in terms of an operator on functions and $f_k$ can
be linked to thresholds relating to the operator. These thresholds are then
tractable with numerical methods.
</p>
<p>Random hypergraphs underlie the construction of various data structures based
on hashing. These data structures frequently rely on peelability of the
hypergraph or peelability allows for simple linear time algorithms. To
demonstrate the usefulness of our construction, we used our $3$-uniform
hypergraphs as a drop-in replacement for the standard $3$-uniform hypergraphs
in a retrieval data structure by Botelho et al. This reduces memory usage from
$1.23m$ bits to $1.12m$ bits ($m$ being the input size) with almost no change
in running time.
</p></div>
    </summary>
    <updated>2019-07-11T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-07-11T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1907.04745</id>
    <link href="http://arxiv.org/abs/1907.04745" rel="alternate" type="text/html"/>
    <title>Constant-Time Dynamic $(\Delta+1)$-Coloring and Weight Approximation for Minimum Spanning Forest: Dynamic Algorithms Meet Property Testing</title>
    <feedworld_mtime>1562803200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/h/Henzinger:Monika.html">Monika Henzinger</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/p/Peng:Pan.html">Pan Peng</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1907.04745">PDF</a><br/><b>Abstract: </b>With few exceptions (namely, algorithms for maximal matching, $2$-approximate
vertex cover, and certain constant-stretch spanners), all known fully dynamic
algorithms in general graphs require (amortized) $\Omega(\log n)$ update/query
time. Showing for the first time that techniques from property testing can lead
to constant-time fully dynamic graph algorithms we prove the following results:
</p>
<p>(1) We give a fully dynamic (Las-Vegas style) algorithm with constant
expected amortized time per update that maintains a proper $(\Delta+1)$-vertex
coloring of a graph with maximum degree at most $\Delta$. This improves upon
the previous $O(\log \Delta)$-time algorithm by Bhattacharya et al. (SODA
2018). We show that our result does not only have optimal running time, but is
also optimal in the sense that already deciding whether a $\Delta$-coloring
exists in a dynamically changing graph with maximum degree at most $\Delta$
takes $\Omega(\log n)$ time per operation.
</p>
<p>(2) We give two fully dynamic algorithms that maintain a
$(1+\varepsilon)$-approximation of the weight $M$ of the minimum spanning
forest of a graph $G$ with edges weights in $[1,W]$. Our deterministic
algorithm takes $O({W^2 \log W}/{\varepsilon^3})$ worst-case time, which is
constant if both $W$ and $\varepsilon$ are constant. This is somewhat
surprising as a lower bound by Patrascu and Demaine (SIAM J. Comput. 2006)
shows that it takes $\Omega(\log n)$ time per operation to maintain the exact
weight of the MSF that holds even for $W=1$. Our randomized (Monte-Carlo style)
algorithm works with high probability and runs in worst-case
$O(\frac{1}{\varepsilon^4}\log^2(\frac{1}{\varepsilon}))$ time if $W=
O({(m^*)^{1/3}}/{\log^3 n})$, where $m^*$ is the minimum number of edges in the
graph throughout all the updates. It works even against an adaptive adversary.
</p></div>
    </summary>
    <updated>2019-07-11T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-07-11T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1907.04741</id>
    <link href="http://arxiv.org/abs/1907.04741" rel="alternate" type="text/html"/>
    <title>Matroid Bases with Cardinality Constraints on the Intersection</title>
    <feedworld_mtime>1562803200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/l/Lendl:Stefan.html">Stefan Lendl</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/p/Peis:Britta.html">Britta Peis</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/t/Timmermans:Veerle.html">Veerle Timmermans</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1907.04741">PDF</a><br/><b>Abstract: </b>Given two matroids $\mathcal{M}_{1} = (E, \mathcal{B}_{1})$ and
$\mathcal{M}_{2} = (E, \mathcal{B}_{2})$ on a common ground set $E$ with base
sets $\mathcal{B}_{1}$ and $\mathcal{B}_{2}$, some integer $k \in \mathbb{N}$,
and two cost functions $c_{1}, c_{2} \colon E \rightarrow \mathbb{R}$, we
consider the optimization problem to find a basis $X \in \mathcal{B}_{1}$ and a
basis $Y \in \mathcal{B}_{2}$ minimizing cost $\sum_{e\in X} c_1(e)+\sum_{e\in
Y} c_2(e)$
</p>
<p>subject to either a lower bound constraint $|X \cap Y| \le k$, an upper bound
constraint $|X \cap Y| \ge k$, or an equality constraint $|X \cap Y| = k$ on
the size of the intersection of the two bases $X$ and $Y$. The problem with
lower bound constraint turns out to be a generalization of the Recoverable
Robust Matroid problem under interval uncertainty representation for which the
question for a strongly polynomial-time algorithm was left as an open question
by Hradovich et al.
</p>
<p>We show that the two problems with lower and upper bound constraints on the
size of the intersection can be reduced to weighted matroid intersection, and
thus be solved with a strongly polynomial-time primal-dual algorithm. The
question whether the problem with equality constraint can also be solved
efficiently turned out to be a lot harder. As our main result, we present a
strongly-polynomial, primal-dual algorithm for the problem with equality
constraint on the size of the intersection.
</p>
<p>Additionally, we discuss generalizations of the problems from matroids to
polymatroids, and from two to three or more matroids.
</p></div>
    </summary>
    <updated>2019-07-11T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-07-11T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1907.04733</id>
    <link href="http://arxiv.org/abs/1907.04733" rel="alternate" type="text/html"/>
    <title>Coresets for Clustering in Graphs of Bounded Treewidth</title>
    <feedworld_mtime>1562803200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/b/Braverman:Vladimir.html">Vladimir Braverman</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/h/Huang:Lingxiao.html">Lingxiao Huang</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/j/Jiang:Shaofeng_H==C=.html">Shaofeng H.-C. Jiang</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/k/Krauthgamer:Robert.html">Robert Krauthgamer</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/w/Wu:Xuan.html">Xuan Wu</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1907.04733">PDF</a><br/><b>Abstract: </b>We initiate the study of coresets for clustering in graph metrics, i.e., the
shortest-path metric of edge-weighted graphs. Such clustering problems (on
graph metrics) are essential to data analysis and used for example in road
networks and data visualization. Specifically, we consider $(k, z)$-Clustering,
where given a metric space $(V, d)$, the goal is to minimize, over all
$k$-point center sets $C$, the objective $\sum_{x \in V}{d^z(x, C)}$. This
problem is a well-known generalization of both k-Median ($z=1$) and k-Means
($z=2$). A coreset is a compact summary of the data that approximately
preserves the clustering objective for every possible center set. Coresets
offer significant efficiency improvements in terms of running time, storage,
and communication, including in streaming and distributed settings.
</p>
<p>Our main result is a near-linear time construction of a coreset of size
$O_{\epsilon, k, z}(\mathrm{tw}(G))$ for $(k, z)$-Clustering in a graph $G$
whose treewidth is $\mathrm{tw}(G)$. The construction is based on the framework
of Feldman and Langberg [STOC 2011], and our main technical contribution, as
required by this framework, is a uniform bound of $O(\mathrm{tw}(G))$ on the
shattering dimension under any point weights. Previously, the only construction
applicable to graph metrics, even for $z=1$, was a generic one with size
$O_{\epsilon, k}(\log n)$ where $n=|V|$ [Feldman and Langberg, STOC 2011].
</p>
<p>We complement our construction with an $\Omega_{\epsilon, k}(\mathrm{tw}(G))$
size lower bound, which matches our construction's linear dependence on
$\mathrm{tw}(G)$. This further provides the first proof that the $O(\log n)$
factor in the generic upper bound is indeed necessary, and also justifies
restricting the graph topology.
</p></div>
    </summary>
    <updated>2019-07-11T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-07-11T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1907.04660</id>
    <link href="http://arxiv.org/abs/1907.04660" rel="alternate" type="text/html"/>
    <title>String Attractors and Combinatorics on Words</title>
    <feedworld_mtime>1562803200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/m/Mantaci:Sabrina.html">Sabrina Mantaci</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/r/Restivo:Antonio.html">Antonio Restivo</a>, Giuseppe Romana, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/r/Rosone:Giovanna.html">Giovanna Rosone</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/s/Sciortino:Marinella.html">Marinella Sciortino</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1907.04660">PDF</a><br/><b>Abstract: </b>The notion of \emph{string attractor} has recently been introduced in
[Prezza, 2017] and studied in [Kempa and Prezza, 2018] to provide a unifying
framework for known dictionary-based compressors. A string attractor for a word
$w=w[1]w[2]\cdots w[n]$ is a subset $\Gamma$ of the positions $\{1,\ldots,n\}$,
such that all distinct factors of $w$ have an occurrence crossing at least one
of the elements of $\Gamma$. While finding the smallest string attractor for a
word is a NP-complete problem, it has been proved in [Kempa and Prezza, 2018]
that dictionary compressors can be interpreted as algorithms approximating the
smallest string attractor for a given word.
</p>
<p>In this paper we explore the notion of string attractor from a combinatorial
point of view, by focusing on several families of finite words. The results
presented in the paper suggest that the notion of string attractor can be used
to define new tools to investigate combinatorial properties of the words.
</p></div>
    </summary>
    <updated>2019-07-11T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-07-11T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1907.04645</id>
    <link href="http://arxiv.org/abs/1907.04645" rel="alternate" type="text/html"/>
    <title>Smoothed Analysis of Order Types</title>
    <feedworld_mtime>1562803200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/h/Hoog:Ivor_van_der.html">Ivor van der Hoog</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/m/Miltzow:Tillmann.html">Tillmann Miltzow</a>, Martijn van Schaik <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1907.04645">PDF</a><br/><b>Abstract: </b>Consider an ordered point set $P = (p_1,\ldots,p_n)$, its order type (denoted
by $\chi_P$) is a map which assigns to every triple of points a value in
$\{+,-,0\}$ based on whether the points are collinear(0), oriented clockwise(-)
or counter-clockwise(+). An abstract order type is a map $\chi :
\left[\substack{n\\3}\right] \rightarrow \{+,-,0\}$ (where
$\left[\substack{n\\3}\right]$ is the collection of all triples of a set of $n$
elements) that satisfies the following condition: for every set of five
elements $S\subset [n]$ its induced order type $\chi_{|S}$ is realizable by a
point set. To be precise, a point set $P$ realizes an order type $\chi$,if
$\chi_P(p_i,p_j,p_k) = \chi(i,j,k)$, for all $i&lt;j&lt;k$. Planar point sets are
among the most basic and natural geometric objects of study in Discrete and
Computational Geometry. Properties of point sets are relevant in theory and
practice alike. It is known, that deciding if an abstract order type is
realizable is complete for the existential theory of the reals. Our results
show that order type realizability is much easier for realistic instances than
in the worst case. In particular, we can recognize instances in "expected
\NP-time". This is one of the first $\exists\mathbb{R}$-complete problems
analyzed under the lens of Smoothed Analysis.
</p></div>
    </summary>
    <updated>2019-07-11T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Geometry"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CG" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Geometry (cs.CG) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CG updates on arXiv.org</title>
      <updated>2019-07-11T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1907.04640</id>
    <link href="http://arxiv.org/abs/1907.04640" rel="alternate" type="text/html"/>
    <title>Santha-Vazirani sources, deterministic condensers and very strong extractors</title>
    <feedworld_mtime>1562803200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/g/Gavinsky:Dmitry.html">Dmitry Gavinsky</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/p/Pudl=aacute=k:Pavel.html">Pavel Pudlák</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1907.04640">PDF</a><br/><b>Abstract: </b>The notion of semi-random sources, also known as Santha-Vazirani (SV)
sources, stands for a sequence of n bits, where the dependence of the i'th bit
on the previous i-1 bits is limited for every $i\in[n]$. If the dependence of
the i'th bit on the remaining n-1 bits is limited, then this is a strong
SV-source. Even the strong SV-sources are known not to admit (universal)
deterministic extractors, but they have seeded extractors, as their min-entropy
is $\Omega(n)$. It is intuitively obvious that strong SV-sources are more than
just high-min-entropy sources, and this work explores the intuition.
Deterministic condensers are known not to exist for general high-min-entropy
sources, and we construct for any constants $\epsilon, \delta \in (0,1)$ a
deterministic condenser that maps n bits coming from a strong SV-source with
bias at most $\delta$ to $\Omega(n)$ bits of min-entropy rate at least
$1-\epsilon$. In conclusion we observe that deterministic condensers are
closely related to very strong extractors - a proposed strengthening of the
notion of strong (seeded) extractors: in particular, our constructions can be
viewed as very strong extractors for the family of strong Santha-Vazirani
distributions. The notion of very strong extractors requires that the output
remains unpredictable even to someone who knows not only the seed value (as in
the case of strong extractors), but also the extractor's outputs corresponding
to the same input value with each of the preceding seed values (say, under the
lexicographic ordering). Very strong extractors closely resemble the original
notion of SV-sources, except that the bits must satisfy the unpredictability
requirement only on average.
</p></div>
    </summary>
    <updated>2019-07-11T01:37:23Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Complexity"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CC" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Complexity (cs.CC) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CC updates on arXiv.org</title>
      <updated>2019-07-11T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1907.04630</id>
    <link href="http://arxiv.org/abs/1907.04630" rel="alternate" type="text/html"/>
    <title>Approximate Voronoi cells for lattices, revisited</title>
    <feedworld_mtime>1562803200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/l/Laarhoven:Thijs.html">Thijs Laarhoven</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1907.04630">PDF</a><br/><b>Abstract: </b>We revisit the approximate Voronoi cells approach for solving the closest
vector problem with preprocessing (CVPP) on high-dimensional lattices, and
settle the open problem of Doulgerakis-Laarhoven-De Weger [PQCrypto, 2019] of
determining exact asymptotics on the volume of these Voronoi cells under the
Gaussian heuristic. As a result, we obtain improved upper bounds on the time
complexity of the randomized iterative slicer when using less than $2^{0.076d +
o(d)}$ memory, and we show how to obtain time-memory trade-offs even when using
less than $2^{0.048d + o(d)}$ memory. We also settle the open problem of
obtaining a continuous trade-off between the size of the advice and the query
time complexity, as the time complexity with subexponential advice in our
approach scales as $d^{d/2 + o(d)}$, matching worst-case enumeration bounds,
and achieving the same asymptotic scaling as average-case enumeration
algorithms for the closest vector problem.
</p></div>
    </summary>
    <updated>2019-07-11T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Geometry"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CG" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Geometry (cs.CG) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CG updates on arXiv.org</title>
      <updated>2019-07-11T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1907.04629</id>
    <link href="http://arxiv.org/abs/1907.04629" rel="alternate" type="text/html"/>
    <title>Evolutionary techniques in lattice sieving algorithms</title>
    <feedworld_mtime>1562803200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/l/Laarhoven:Thijs.html">Thijs Laarhoven</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1907.04629">PDF</a><br/><b>Abstract: </b>Lattice-based cryptography has recently emerged as a prominent candidate for
secure communication in the quantum age. Its security relies on the hardness of
certain lattice problems, and the inability of known lattice algorithms, such
as lattice sieving, to solve these problems efficiently. In this paper we
investigate the similarities between lattice sieving and evolutionary
algorithms, how various improvements to lattice sieving can be viewed as
applications of known techniques from evolutionary computation, and how other
evolutionary techniques can benefit lattice sieving in practice.
</p></div>
    </summary>
    <updated>2019-07-11T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-07-11T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1907.04628</id>
    <link href="http://arxiv.org/abs/1907.04628" rel="alternate" type="text/html"/>
    <title>Polytopes, lattices, and spherical codes for the nearest neighbor problem</title>
    <feedworld_mtime>1562803200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/l/Laarhoven:Thijs.html">Thijs Laarhoven</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1907.04628">PDF</a><br/><b>Abstract: </b>We study locality-sensitive hash methods for the nearest neighbor problem for
the angular distance, focusing on the approach of first projecting down onto a
low-dimensional subspace, and then partitioning the projected vectors according
to Voronoi cells induced by a suitable spherical code. This approach
generalizes and interpolates between the fast but suboptimal hyperplane hashing
of Charikar [STOC'02] and the asymptotically optimal but practically often
slower hash families of Andoni-Indyk [FOCS'06], Andoni-Indyk-Nguyen-Razenshteyn
[SODA'14] and Andoni-Indyk-Laarhoven-Razenshteyn-Schmidt [NIPS'15]. We set up a
framework for analyzing the performance of any spherical code in this context,
and we provide results for various codes from the literature, such as those
related to regular polytopes and root lattices. Similar to hyperplane hashing,
and unlike cross-polytope hashing, our analysis of collision probabilities and
query exponents is exact and does not hide order terms which vanish only for
large $d$, facilitating an easy parameter selection.
</p>
<p>For the two-dimensional case, we derive closed-form expressions for arbitrary
spherical codes, and we show that the equilateral triangle is optimal,
achieving a better performance than the two-dimensional analogues of hyperplane
and cross-polytope hashing. In three and four dimensions, we numerically find
that the tetrahedron, $5$-cell, and $16$-cell achieve the best query exponents,
while in five or more dimensions orthoplices appear to outperform regular
simplices, as well as the root lattice families $A_k$ and $D_k$. We argue that
in higher dimensions, larger spherical codes will likely exist which will
outperform orthoplices in theory, and we argue why using the $D_k$ root
lattices will likely lead to better results in practice, due to a better
trade-off between the asymptotic query exponent and the concrete costs of
hashing.
</p></div>
    </summary>
    <updated>2019-07-11T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Geometry"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CG" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Geometry (cs.CG) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CG updates on arXiv.org</title>
      <updated>2019-07-11T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1907.04585</id>
    <link href="http://arxiv.org/abs/1907.04585" rel="alternate" type="text/html"/>
    <title>Quasi-polynomial time approximation schemes for the Maximum Weight Independent Set Problem in H-free graphs</title>
    <feedworld_mtime>1562803200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/c/Chudnovsky:Maria.html">Maria Chudnovsky</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/p/Pilipczuk:Marcin.html">Marcin Pilipczuk</a>, Michał Pilipczuk, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/t/Thomass=eacute=:St=eacute=phan.html">Stéphan Thomassé</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1907.04585">PDF</a><br/><b>Abstract: </b>In the Maximum Independent Set problem we are asked to find a set of pairwise
nonadjacent vertices in a given graph with the maximum possible cardinality. In
general graphs, this classical problem is known to be NP-hard and hard to
approximate within a factor of $n^{1-\varepsilon}$ for any $\varepsilon &gt; 0$.
Due to this, investigating the complexity of \textsc{Maximum Independent Set}
in various graph classes in hope of finding better tractability results is an
active research direction.
</p>
<p>In $H$-free graphs, that is, graphs not containing a fixed graph $H$ as an
induced subgraph, the problem is known to remain NP-hard and APX-hard whenever
$H$ contains a cycle, a vertex of degree at least four, or two vertices of
degree at least three in one connected component. For the remaining cases,
where every component of $H$ is a path or a subdivided claw, the complexity of
Maximum Independent Set remains widely open, with only a handful of
polynomial-time solvability results for small graphs $H$ such as $P_5$, $P_6$,
the claw, or the fork.
</p>
<p>We prove that for every such "possibly tractable" graph $H$ there exists an
algorithm that, given an $H$-free graph $G$ and an accuracy parameter
$\varepsilon &gt; 0$, finds an independent set in $G$ of cardinality within a
factor of $(1-\varepsilon)$ of the optimum in time exponential in a polynomial
of $\log |V(G)|$ and $\varepsilon^{-1}$. That is, we show that for every graph
$H$ for which Maximum Independent Set is not known to be APX-hard in $H$-free
graphs, the problem admits a quasi-polynomial time approximation scheme in this
graph class. Our algorithm works also in the more general weighted setting,
where the input graph is supplied with a weight function on vertices and we are
maximizing the total weight of an independent set.
</p></div>
    </summary>
    <updated>2019-07-11T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-07-11T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1907.04565</id>
    <link href="http://arxiv.org/abs/1907.04565" rel="alternate" type="text/html"/>
    <title>Progressive Wasserstein Barycenters of Persistence Diagrams</title>
    <feedworld_mtime>1562803200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b>Jules Vidal, Joseph Budin, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/t/Tierny:Julien.html">Julien Tierny</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1907.04565">PDF</a><br/><b>Abstract: </b>This paper presents an efficient algorithm for the progressive approximation
of Wasserstein barycenters of persistence diagrams, with applications to the
visual analysis of ensemble data. Given a set of scalar fields, our approach
enables the computation of a persistence diagram which is representative of the
set, and which visually conveys the number, data ranges and saliences of the
main features of interest found in the set. Such representative diagrams are
obtained by computing explicitly the discrete Wasserstein barycenter of the set
of persistence diagrams, a notoriously computationally intensive task. In
particular, we revisit efficient algorithms for Wasserstein distance
approximation [12,51] to extend previous work on barycenter estimation [94]. We
present a new fast algorithm, which progressively approximates the barycenter
by iteratively increasing the computation accuracy as well as the number of
persistent features in the output diagram. Such a progressivity drastically
improves convergence in practice and allows to design an interruptible
algorithm, capable of respecting computation time constraints. This enables the
approximation of Wasserstein barycenters within interactive times. We present
an application to ensemble clustering where we revisit the k-means algorithm to
exploit our barycenters and compute, within execution time constraints,
meaningful clusters of ensemble data along with their barycenter diagram.
Extensive experiments on synthetic and real-life data sets report that our
algorithm converges to barycenters that are qualitatively meaningful with
regard to the applications, and quantitatively comparable to previous
techniques, while offering an order of magnitude speedup when run until
convergence (without time constraint). Our algorithm can be trivially
parallelized to provide additional speedups in practice on standard
workstations. [...]
</p></div>
    </summary>
    <updated>2019-07-11T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-07-11T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1907.04512</id>
    <link href="http://arxiv.org/abs/1907.04512" rel="alternate" type="text/html"/>
    <title>Computing the Maximum Degree of Minors in Skew Polynomial Matrices</title>
    <feedworld_mtime>1562803200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/o/Oki:Taihei.html">Taihei Oki</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1907.04512">PDF</a><br/><b>Abstract: </b>Skew polynomials, which have a noncommutative multiplication rule between
coefficients and an indeterminate, are the most general polynomial concept that
admits the degree function with desirable properties. This paper presents the
first algorithms to compute the maximum degree of the Dieudonn\'e determinant
of a $k \times k$ submatrix in a matrix $A$ whose entries are skew polynomials
over a skew field $F$. Our algorithms make use of the discrete Legendre
conjugacy between the sequences of the maximum degrees and the ranks of block
matrices over $F$ obtained from coefficient matrices of $A$. Three applications
of our algorithms are provided: (i) computing the dimension of the solution
spaces of linear differential and difference equations, (ii) determining the
Smith-McMillan form of transfer function matrices of linear time-varying
systems and (iii) solving the "weighted" version of noncommutative Edmonds'
problem with polynomial bit complexity. We also show that the deg-det
computation for matrices over sparse polynomials is at least as hard as solving
commutative Edmonds' problem.
</p></div>
    </summary>
    <updated>2019-07-11T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-07-11T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1907.04498</id>
    <link href="http://arxiv.org/abs/1907.04498" rel="alternate" type="text/html"/>
    <title>Speed Scaling with Tandem Servers</title>
    <feedworld_mtime>1562803200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/v/Vaze:Rahul.html">Rahul Vaze</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/n/Nair:Jayakrishnan.html">Jayakrishnan Nair</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1907.04498">PDF</a><br/><b>Abstract: </b>Speed scaling for a tandem server setting is considered, where there is a
series of servers, and each job has to be processed by each of the servers in
sequence. Servers have a variable speed, their power consumption being a convex
increasing function of the speed. We consider the worst case setting as well as
the stochastic setting. In the worst case setting, the jobs are assumed to be
of unit size with arbitrary (possibly adversarially determined) arrival
instants. For this problem, we devise an online speed scaling algorithm that is
constant competitive with respect to the optimal offline algorithm that has
non-causal information. The proposed algorithm, at all times, uses the same
speed on all active servers, such that the total power consumption equals the
number of outstanding jobs. In the stochastic setting, we consider a more
general tandem network, with a parallel bank of servers at each stage. In this
setting, we show that random routing with a simple gated static speed selection
is constant competitive. In both cases, the competitive ratio depends only on
the power functions, and is independent of the workload and the number of
servers.
</p></div>
    </summary>
    <updated>2019-07-11T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-07-11T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1907.04451</id>
    <link href="http://arxiv.org/abs/1907.04451" rel="alternate" type="text/html"/>
    <title>On the Approximability of Presidential Type Predicates</title>
    <feedworld_mtime>1562803200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/h/Huang:Neng.html">Neng Huang</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/p/Potechin:Aaron.html">Aaron Potechin</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1907.04451">PDF</a><br/><b>Abstract: </b>Given a predicate $P: \{-1, 1\}^k \to \{-1, 1\}$, let $CSP(P)$ be the set of
constraint satisfaction problems whose constraints are of the form $P$. We say
that $P$ is approximable if given a nearly satisfiable instance of $CSP(P)$,
there exists a probabilistic polynomial time algorithm that does better than a
random assignment. Otherwise, we say that $P$ is approximation resistant.
</p>
<p>In this paper, we analyze presidential type predicates, which are balanced
linear threshold functions where all of the variables except the first variable
(the president) have the same weight. We show that almost all presidential-type
predicates $P$ are approximable. More precisely, we prove the following result:
for any $\delta_0 &gt; 0$, there exists a $k_0$ such that if $k \geq k_0$, $\delta
\in (\delta_0,1 - 2/k]$, and ${\delta}k + k - 1$ is an odd integer then the
presidential-type predicate $P(x) = sign({\delta}k{x_1} + \sum_{i=2}^{k}{x_i})$
is approximable.
</p></div>
    </summary>
    <updated>2019-07-11T01:23:49Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Complexity"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CC" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Complexity (cs.CC) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CC updates on arXiv.org</title>
      <updated>2019-07-11T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1907.04450</id>
    <link href="http://arxiv.org/abs/1907.04450" rel="alternate" type="text/html"/>
    <title>SNAP: Finding Approximate Second-Order Stationary Solutions Efficiently for Non-convex Linearly Constrained Problems</title>
    <feedworld_mtime>1562803200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/l/Lu:Songtao.html">Songtao Lu</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/r/Razaviyayn:Meisam.html">Meisam Razaviyayn</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/y/Yang:Bo.html">Bo Yang</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/h/Huang:Kejun.html">Kejun Huang</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/h/Hong:Mingyi.html">Mingyi Hong</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1907.04450">PDF</a><br/><b>Abstract: </b>This paper proposes low-complexity algorithms for finding approximate
second-order stationary points (SOSPs) of problems with smooth non-convex
objective and linear constraints. While finding (approximate) SOSPs is
computationally intractable, we first show that generic instances of the
problem can be solved efficiently. More specifically, for a generic problem
instance, certain strict complementarity (SC) condition holds for all
Karush-Kuhn-Tucker (KKT) solutions (with probability one). The SC condition is
then used to establish an equivalence relationship between two different
notions of SOSPs, one of which is computationally easy to verify. Based on this
particular notion of SOSP, we design an algorithm named the Successive
Negative-curvature grAdient Projection (SNAP), which successively performs
either conventional gradient projection or some negative curvature based
projection steps to find SOSPs. SNAP and its first-order extension SNAP$^+$,
require $\mathcal{O}(1/\epsilon^{2.5})$ iterations to compute an $(\epsilon,
\sqrt{\epsilon})$-SOSP, and their per-iteration computational complexities are
polynomial in the number of constraints and problem dimension. To our
knowledge, this is the first time that first-order algorithms with polynomial
per-iteration complexity and global sublinear rate have been designed to find
SOSPs of the important class of non-convex problems with linear constraints.
</p></div>
    </summary>
    <updated>2019-07-11T01:24:01Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Complexity"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CC" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Complexity (cs.CC) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CC updates on arXiv.org</title>
      <updated>2019-07-11T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1907.04442</id>
    <link href="http://arxiv.org/abs/1907.04442" rel="alternate" type="text/html"/>
    <title>A complexity dichotomy for hitting connected minors on bounded treewidth graphs: the chair and the banner draw the boundary</title>
    <feedworld_mtime>1562803200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/b/Baste:Julien.html">Julien Baste</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/s/Sau:Ignasi.html">Ignasi Sau</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/t/Thilikos:Dimitrios_M=.html">Dimitrios M. Thilikos</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1907.04442">PDF</a><br/><b>Abstract: </b>For a fixed connected graph $H$, the $\{H\}$-M-DELETION problem asks, given a
graph $G$, for the minimum number of vertices that intersect all minor models
of $H$ in $G.$ It is known that this problem can be solved in time $f(tw)\cdot
n^{O(1)}$, where $tw$ is the treewidth of $G.$ We determine the asymptotically
optimal function $f(tw),$ for each possible choice of $H.$ Namely, we prove
that, under the ETH, $f(tw) =2^{\Theta(tw)}$ if $H$ is a contraction of the
chair or the banner, and $f(tw)=2^{\Theta( tw \cdot \log tw)}$ otherwise. Prior
to this work, such a complete characterization was only known when $H$ is a
planar graph with at most five vertices. For the upper bounds, we present an
algorithm in time $2^{\Theta( tw\cdot \log tw)} \cdot n^{O(1)}$ for the more
general problem where all minor models of connected graphs in a finite family
${\mathcal F}$ need to be hit. We combine several ingredients such as the
machinery of boundaried graphs in dynamic programming via representatives, the
Flat Wall Theorem, Bidimensionality, the irrelevant vertex technique, treewidth
modulators, and protrusion replacement. In particular, this algorithm vastly
generalizes a result of Jansen et al. [SODA 2014] for the particular case
${\mathcal F}=\{K_5,K_{3,3}\}.$ For the lower bounds, our reductions are based
on a generic construction building on the one given by the authors in [IPEC
2018], which uses the framework introduced by Lokshtanov et al. [SODA 2011] to
obtain superexponential lower bounds.
</p></div>
    </summary>
    <updated>2019-07-11T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-07-11T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1907.04426</id>
    <link href="http://arxiv.org/abs/1907.04426" rel="alternate" type="text/html"/>
    <title>A near-linear time approximation scheme for geometric transportation with real supplies</title>
    <feedworld_mtime>1562803200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/f/Fox:Kyle.html">Kyle Fox</a>, Jiashuai Lu The University of Texas at Dallas) <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1907.04426">PDF</a><br/><b>Abstract: </b>The geometric transportation problem takes as input a set of points $P$ in
$d$-dimensional Euclidean space and a supply function $\mu : P \to \mathbb{R}$.
The goal is to find a transportation map, a non-negative assignment $\tau : P
\times P \to \mathbb{R}_{\geq 0}$ to pairs of points so the total assignment
leaving each point is equal to its supply, i.e., $\sum_{r \in P} \tau(q, r) -
\sum_{p \in P} \tau(p, q) = \mu(q)$ for all points $q \in P$. The goal is to
minimize the weighted sum of Euclidean distances for the pairs, $\sum_{(p, q)
\in P \times P} \tau(p, q) \cdot ||q - p||_2$.
</p>
<p>We describe the first algorithm for this problem that returns, with high
probability, a $(1 + \epsilon)$-approximation to the optimal transportation map
in $O(n \text{poly}(1 / \epsilon) \text{polylog}{n})$ time. In contrast to the
previous best algorithms for this problem, our near-linear running time bound
is independent of the spread of $P$ and the magnitude of its real-valued
supplies.
</p></div>
    </summary>
    <updated>2019-07-11T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Geometry"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CG" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Geometry (cs.CG) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CG updates on arXiv.org</title>
      <updated>2019-07-11T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1907.04420</id>
    <link href="http://arxiv.org/abs/1907.04420" rel="alternate" type="text/html"/>
    <title>Sublinear data structures for short Fr\'echet queries</title>
    <feedworld_mtime>1562803200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/d/Driemel:Anne.html">Anne Driemel</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/p/Psarros:Ioannis.html">Ioannis Psarros</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/s/Schmidt:Melanie.html">Melanie Schmidt</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1907.04420">PDF</a><br/><b>Abstract: </b>We study metric data structures for curves in doubling spaces, such as
trajectories of moving objects in Euclidean $\mathbb{R}^d$, where the distance
between two curves is measured using the discrete Fr\'echet distance. We design
data structures in an \emph{asymmetric} setting where the input is a curve (or
a set of $n$ curves) each of complexity $m$ and the queries are with curves of
complexity $k\ll m$. We show that there exist approximate data structures that
are independent of the input size $N = d \cdot n \cdot m$ and we study how to
maintain them dynamically if the input is given in the stream.
</p>
<p>Concretely, we study two types of data structures: (i) distance oracles,
where the task is to store a compressed version of the input curve, which can
be used to answer queries for the distance of a query curve to the input curve,
and (ii) nearest-neighbor data structures, where the task is to preprocess a
set of input curves to answer queries for the input curve closest to the query
curve. In both cases we are interested in approximation. For curves embedded in
Euclidean $\mathbb{R}^d$ with constant $d$, our distance oracle uses space in
$\mathcal{O}((k \log(\epsilon^{-1}) \epsilon^{-d})^k)$ ($\epsilon$ is the
precision parameter). The oracle performs $(1+\epsilon)$-approximate queries in
time in $\mathcal{O}(k^2)$ and is deterministic. We show how to maintain this
distance oracle in the stream using polylogarithmic additional memory. In the
stream, we can dynamically answer distance queries to the portion of the stream
seen so far in $\mathcal{O}(k^4 \log^2 m)$ time. We apply our techniques to the
second problem, approximate near neighbor (ANN) data structures, and achieve an
exponential improvement in the dependency on the complexity of the input curves
compared to the state of the art.
</p></div>
    </summary>
    <updated>2019-07-11T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Geometry"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CG" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Geometry (cs.CG) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CG updates on arXiv.org</title>
      <updated>2019-07-11T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1907.04413</id>
    <link href="http://arxiv.org/abs/1907.04413" rel="alternate" type="text/html"/>
    <title>On Approximating Partial Set Cover and Generalizations</title>
    <feedworld_mtime>1562803200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/c/Chekuri:Chandra.html">Chandra Chekuri</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/q/Quanrud:Kent.html">Kent Quanrud</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/z/Zhang:Zhao.html">Zhao Zhang</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1907.04413">PDF</a><br/><b>Abstract: </b>Partial Set Cover (PSC) is a generalization of the well-studied Set Cover
problem (SC). In PSC the input consists of an integer $k$ and a set system
$(U,S)$ where $U$ is a finite set, and $S \subseteq 2^U$ is a collection of
subsets of $U$. The goal is to find a subcollection $S' \subseteq S$ of
smallest cardinality such that sets in $S'$ cover at least $k$ elements of $U$;
that is $|\cup_{A \in S'} A| \ge k$. SC is a special case of PSC when $k =
|U|$. In the weighted version each set $X \in S$ has a non-negative weight
$w(X)$ and the goal is to find a minimum weight subcollection to cover $k$
elements. Approximation algorithms for SC have been adapted to obtain
comparable algorithms for PSC in various interesting cases. In recent work
Inamdar and Varadarajan, motivated by geometric set systems, obtained a simple
and elegant approach to reduce PSC to SC via the natural LP relaxation. They
showed that if a deletion-closed family of SC admits a $\beta$-approximation
via the natural LP relaxation, then one can obtain a $2(\beta +
1)$-approximation for PSC on the same family. In a subsequent paper, they also
considered a generalization of PSC that has multiple partial covering
constraints which is partly inspired by and generalizes previous work of Bera
et al on the Vertex Cover problem. Our main goal in this paper is to
demonstrate some useful connections between the results in previous work and
submodularity. This allows us to simplify, and in some cases improve their
results. We improve the approximation for PSC to $(1-1/e)(\beta + 1)$. We
extend the previous work to the sparse setting.
</p></div>
    </summary>
    <updated>2019-07-11T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-07-11T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1907.04406</id>
    <link href="http://arxiv.org/abs/1907.04406" rel="alternate" type="text/html"/>
    <title>Faster provable sieving algorithms for the Shortest Vector Problem and the Closest Vector Problem on lattices in $\ell_p$ norm</title>
    <feedworld_mtime>1562803200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/m/Mukhopadhyay:Priyanka.html">Priyanka Mukhopadhyay</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1907.04406">PDF</a><br/><b>Abstract: </b>In this paper we give provable sieving algorithms for the Shortest Vector
Problem (SVP) and the Closest Vector Problem (CVP) on lattices in $\ell_p$ norm
for $1\leq p\leq\infty$. The running time we get is better than existing
provable sieving algorithms, except the Discrete Gaussian based algorithm by
Aggarwal et al.[2015], but this algorithm works only for the Euclidean norm. We
build on the randomized sieving framework of Ajtai, Kumar and Sivakumar
[2001,2002], where they used a sieving sub-routine that runs in time quadratic
in the number of sampled vectors. We give a new sieving procedure that works
for all $\ell_p$ norm and runs in time linear in the number of sampled vectors.
The main idea is to divide the space (hypersphere) into regions (hypercubes)
such that each vector can be mapped efficiently to a region. This is an
extension of the sieving technique in Aggarwal and Mukhopadhyay[2018], where it
has been used only for the $\ell_{\infty}$ norm. This improves the time
complexity of the overall algorithm as compared to previous analyses of AKS
algorithm in $\ell_p$ norm [Blomer and Naewe(2009),Arvind and Joglekar(2008)].
In the $\ell_2$ norm, using the birthday paradox we achieve a time complexity
of $2^{2.49n+o(n)}$, as compared to the time complexity of $2^{2.571n+o(n)}$ of
AKS (using birthday paradox) [Hanrot et al.(2011)].
</p>
<p>We further modify our linear sieving technique and introduce a mixed sieving
procedure. At first a point is mapped to a hypercube within a sphere (as done
in linear sieve) and then within each hypercube we perform a quadratic sieve
like AKS. This helps us achieve a time complexity of $2^{2.25n+o(n)}$ in
$\ell_2$ norm, which is better than the time complexity of List Sieve Birthday
($2^{2.465n+o(n)}$) [Pujol and Stehle(2009),Hanrot et al.(2011)]. We also adopt
our techniques for approximation algorithms of the above problems.
</p></div>
    </summary>
    <updated>2019-07-11T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-07-11T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1907.04405</id>
    <link href="http://arxiv.org/abs/1907.04405" rel="alternate" type="text/html"/>
    <title>$L_p$ Pattern Matching in a Stream</title>
    <feedworld_mtime>1562803200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b>Tatiana Starikovskaya, Michal Svagerka, Przemysław Uznański <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1907.04405">PDF</a><br/><b>Abstract: </b>We consider the problem of computing distance between a pattern of length $n$
and all $n$-length subwords of a text in the streaming model.
</p>
<p>In the streaming setting, only the Hamming distance ($L_0$) has been studied.
It is known that computing the Hamming distance between a pattern and a
streaming text exactly requires $\Omega(n)$ space. Therefore, to develop
sublinear-space solutions, one must relax their requirements. One possibility
to do so is to compute only the distances bounded by a threshold $k$,
see~[SODA'19, Clifford, Kociumaka, Porat]. The motivation for this variant of
this problem is that we are interested in subwords of the text that are similar
to the pattern, i.e. in subwords such that the distance between them and the
pattern is relatively small.
</p>
<p>On the other hand, the main application of the streaming setting is
processing large-scale data, such as biological data. Recent advances in
hardware technology allow generating such data at a very high speed, but
unfortunately, the produced data may contain about 10\% of noise~[Biol.
Direct.'07, Klebanov and Yakovlev]. To analyse such data, it is not sufficient
to consider small distances only. A possible workaround for this issue is
$(1\pm\varepsilon)$-approximation. This line of research was initiated in
[ICALP'16, Clifford and Starikovskaya] who gave a
$(1\pm\varepsilon)$-approximation algorithm with space
$\widetilde{O}(\varepsilon^{-5}\sqrt{n})$.
</p>
<p>In this work, we show a suite of new streaming algorithms for computing the
Hamming, $L_1$, $L_2$ and general $L_p$ ($0 &lt; p \le 2$) distances between the
pattern and the text. Our results significantly extend over the previous result
in this setting. In particular, for the Hamming distance case and for the $L_p$
distance when $0 &lt; p \le 1$ we show a streaming algorithm that uses
$\widetilde{O}(\varepsilon^{-2}\sqrt{n})$ space for polynomial-size alphabets.
</p></div>
    </summary>
    <updated>2019-07-11T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-07-11T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1907.04399</id>
    <link href="http://arxiv.org/abs/1907.04399" rel="alternate" type="text/html"/>
    <title>New Competitiveness Bounds for the Shared Memory Switch</title>
    <feedworld_mtime>1562803200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b>Ivan Bochkov, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/d/Davydow:Alex.html">Alex Davydow</a>, Nikita Gaevoy, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/n/Nikolenko:Sergey_I=.html">Sergey I. Nikolenko</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1907.04399">PDF</a><br/><b>Abstract: </b>We consider one of the simplest and best known buffer management
architectures: the shared memory switch with multiple output queues and uniform
packets. It was one of the first models studied by competitive analysis, with
the Longest Queue Drop (LQD) buffer management policy shown to be at least
$\sqrt{2}$- and at most $2$-competitive; a general lower bound of $4/3$ has
been proven for all deterministic online algorithms. Closing the gap between
$\sqrt{2}$ and $2$ has remained an open problem in competitive analysis for
more than a decade, with only marginal success in reducing the upper bound of
$2$. In this work, we first present a simplified proof for the $\sqrt{2}$ lower
bound for LQD and then, using a reduction to the continuous case, improve the
general lower bound for all deterministic online algorithms from $\frac 43$ to
$\sqrt{2}$. Then, we proceed to improve the lower bound of $\sqrt{2}$
specifically for LQD, showing that LQD is at least $1.44546086$-competitive. We
are able to prove the bound by presenting an explicit construction of the
optimal clairvoyant algorithm which then allows for two different ways to prove
lower bounds: by direct computer simulations and by proving lower bounds via
linear programming. The linear programming approach yields a lower bound for
LQD of $1.4427902$ (still larger than $\sqrt{2}$).
</p></div>
    </summary>
    <updated>2019-07-11T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-07-11T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1907.04385</id>
    <link href="http://arxiv.org/abs/1907.04385" rel="alternate" type="text/html"/>
    <title>Diameter computation on $H$-minor free graphs and graphs of bounded (distance) VC-dimension</title>
    <feedworld_mtime>1562803200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/d/Ducoffe:Guillaume.html">Guillaume Ducoffe</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/h/Habib:Michel.html">Michel Habib</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/v/Viennot:Laurent.html">Laurent Viennot</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1907.04385">PDF</a><br/><b>Abstract: </b>We propose to study unweighted graphs of constant distance VC-dimension as a
broad generalization of many graph classes for which we can compute the
diameter in truly subquadratic-time. In particular for any fixed $H$, the class
of $H$-minor free graphs has distance VC-dimension at most $|V(H)|-1$. Our
first main result is that on graphs of distance VC-dimension at most $d$, for
any fixed $k$ we can either compute the diameter or conclude that it is larger
than $k$ in time $\tilde{\cal O}(k\cdot mn^{1-\varepsilon_d})$, where
$\varepsilon_d \in (0;1)$ only depends on $d$. Then as a byproduct of our
approach, we get the first truly subquadratic-time algorithm for constant
diameter computation on all the nowhere dense graph classes. Finally, we show
how to remove the dependency on $k$ for any graph class that excludes a fixed
graph $H$ as a minor. More generally, our techniques apply to any graph with
constant distance VC-dimension and polynomial expansion. As a result for all
such graphs one obtains a truly subquadratic-time algorithm for computing their
diameter. Our approach is based on the work of Chazelle and Welzl who proved
the existence of spanning paths with strongly sublinear stabbing number for
every hypergraph of constant VC-dimension. We show how to compute such paths
efficiently by combining the best known approximation algorithms for the
stabbing number problem with a clever use of $\varepsilon$-nets, region
decomposition and other partition techniques.
</p></div>
    </summary>
    <updated>2019-07-11T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-07-11T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1907.04383</id>
    <link href="http://arxiv.org/abs/1907.04383" rel="alternate" type="text/html"/>
    <title>Symmetric Polymorphisms and Efficient Decidability of Promise CSPs</title>
    <feedworld_mtime>1562803200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/b/Brakensiek:Joshua.html">Joshua Brakensiek</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/g/Guruswami:Venkatesan.html">Venkatesan Guruswami</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1907.04383">PDF</a><br/><b>Abstract: </b>In the field of constraint satisfaction problems (CSP), promise CSPs are an
exciting new direction of study. In a promise CSP, each constraint comes in two
forms: "strict" and "weak," and in the associated decision problem one must
distinguish between being able to satisfy all the strict constraints versus not
being able to satisfy all the weak constraints. The most commonly cited example
of a promise CSP is the approximate graph coloring problem--which has recently
benefited from multiple breakthroughs [BKO19, WZ19] due to a systematic study
of promise CSPs under the lens of "polymorphisms," operations that map tuples
in the strict form of each constraint to a tuple in its weak form.
</p>
<p>In this work, we present a simple algorithm which in polynomial time solves
the decision problem for all promise CSPs that admit infinitely many symmetric
polymorphisms, that is the coordinates are permutation invariant. This
generalizes previous work of the authors [BG19]. We also extend this algorithm
to a more general class of block-symmetric polymorphisms. As a corollary, this
single algorithm solves all polynomial-time tractable Boolean CSPs
simultaneously. These results give a new perspective on Schaefer's classic
theorem and shed further light on how symmetries of polymorphisms enable
algorithms.
</p></div>
    </summary>
    <updated>2019-07-11T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-07-11T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1907.04381</id>
    <link href="http://arxiv.org/abs/1907.04381" rel="alternate" type="text/html"/>
    <title>Nearly optimal edge estimation with independent set queries</title>
    <feedworld_mtime>1562803200</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/c/Chen:Xi.html">Xi Chen</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/l/Levi:Amit.html">Amit Levi</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/w/Waingarten:Erik.html">Erik Waingarten</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1907.04381">PDF</a><br/><b>Abstract: </b>We study the problem of estimating the number of edges of an unknown,
undirected graph $G=([n],E)$ with access to an independent set oracle. When
queried about a subset $S\subseteq [n]$ of vertices the independent set oracle
answers whether $S$ is an independent set in $G$ or not. Our first main result
is an algorithm that computes a $(1+\epsilon)$-approximation of the number of
edges $m$ of the graph using $\min(\sqrt{m},n /
\sqrt{m})\cdot\textrm{poly}(\log n,1/\epsilon)$ independent set queries. This
improves the upper bound of $\min(\sqrt{m},n^2/m)\cdot\textrm{poly}(\log
n,1/\epsilon)$ by Beame et al. \cite{BHRRS18}. Our second main result shows
that ${\min(\sqrt{m},n/\sqrt{m}))/\textrm{polylog}(n)}$ independent set queries
are necessary, thus establishing that our algorithm is optimal up to a factor
of $\textrm{poly}(\log n, 1/\epsilon)$.
</p></div>
    </summary>
    <updated>2019-07-11T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-07-11T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://emanueleviola.wordpress.com/?p=656</id>
    <link href="https://emanueleviola.wordpress.com/2019/07/10/non-abelian-combinatorics-and-communication-complexity/" rel="alternate" type="text/html"/>
    <title>Non-abelian combinatorics and communication complexity</title>
    <summary>Below and here in pdf is a survey I am writing for SIGACT, due next week.  Comments would be very helpful. Finite groups provide an amazing wealth of problems of interest to complexity theory. And complexity theory also provides a useful viewpoint of group-theoretic notions, such as what it means for a group to be […]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Below and <a href="http://www.ccs.neu.edu/home/viola/papers/viola-sigact-snafu.pdf">here in pdf</a> is a survey I am writing for SIGACT, due next week.  Comments would be very helpful.</p>
<hr/>
<p style="text-align: justify;">Finite groups provide an amazing wealth of problems of interest to complexity theory. And complexity theory also provides a useful viewpoint of group-theoretic notions, such as what it means for a group to be “far from abelian.” The general problem that we consider in this survey is that of computing a <em>group product</em> <img alt="g=x_{1}\cdot x_{2}\cdot \cdots \cdot x_{n}" class="latex" src="https://s0.wp.com/latex.php?latex=g%3Dx_%7B1%7D%5Ccdot+x_%7B2%7D%5Ccdot+%5Ccdots+%5Ccdot+x_%7Bn%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="g=x_{1}\cdot x_{2}\cdot \cdots \cdot x_{n}"/> over a finite group <img alt="G" class="latex" src="https://s0.wp.com/latex.php?latex=G&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="G"/>. Several variants of this problem are considered in this survey and in the literature, including in <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#XKrohnMR66">KMR66</a>, <a href="https://emanueleviola.wordpress.com/feed/#XBarrington89">Bar89</a>, <a href="https://emanueleviola.wordpress.com/feed/#XBen-OrC92">BC92</a>, <a href="https://emanueleviola.wordpress.com/feed/#XImmermanL95">IL95</a>, <a href="https://emanueleviola.wordpress.com/feed/#XBGKL03">BGKL03</a>, <a href="https://emanueleviola.wordpress.com/feed/#XPRS97">PRS97</a>, <a href="https://emanueleviola.wordpress.com/feed/#XAmbainis96">Amb96</a>, <a href="https://emanueleviola.wordpress.com/feed/#XAmbainisL00">AL00</a>, <a href="https://emanueleviola.wordpress.com/feed/#XRaz00">Raz00</a>, <a href="https://emanueleviola.wordpress.com/feed/#XMilesV-leak">MV13</a>, <a href="https://emanueleviola.wordpress.com/feed/#XMiles14">Mil14</a>, <a href="https://emanueleviola.wordpress.com/feed/#XGowersV-cc-int-journal">GVa</a>]</span>.</p>
<p style="text-align: justify;">Some specific, natural computational problems related to <img alt="g" class="latex" src="https://s0.wp.com/latex.php?latex=g&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="g"/> are, from hardest to easiest:</p>
<p style="text-align: justify;">(1) Computing <img alt="g" class="latex" src="https://s0.wp.com/latex.php?latex=g&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="g"/>,</p>
<p style="text-align: justify;">(2) Deciding if <img alt="g=1_{G}" class="latex" src="https://s0.wp.com/latex.php?latex=g%3D1_%7BG%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="g=1_{G}"/>, where <img alt="1_{G}" class="latex" src="https://s0.wp.com/latex.php?latex=1_%7BG%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="1_{G}"/> is the identity element of <img alt="G" class="latex" src="https://s0.wp.com/latex.php?latex=G&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="G"/>, and</p>
<p style="text-align: justify;">(3) Deciding if <img alt="g=1_{G}" class="latex" src="https://s0.wp.com/latex.php?latex=g%3D1_%7BG%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="g=1_{G}"/> under the promise that either <img alt="g=1_{G}" class="latex" src="https://s0.wp.com/latex.php?latex=g%3D1_%7BG%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="g=1_{G}"/> or <img alt="g=h" class="latex" src="https://s0.wp.com/latex.php?latex=g%3Dh&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="g=h"/> for a fixed <img alt="h\ne 1_{G}" class="latex" src="https://s0.wp.com/latex.php?latex=h%5Cne+1_%7BG%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h\ne 1_{G}"/>.</p>
<p style="text-align: justify;">Problem (3) is from <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#XMilesV-leak">MV13</a>]</span>. The focus of this survey is on (2) and (3).</p>
<p style="text-align: justify;">We work in the model of <em>communication complexity </em><span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#XYao79">Yao79</a>]</span>, with which we assume familiarity. For background see <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#XKuN97">KN97</a>, <a href="https://emanueleviola.wordpress.com/feed/#XRaoY2019">RY19</a>]</span>. Briefly, the terms <img alt="x_{i}" class="latex" src="https://s0.wp.com/latex.php?latex=x_%7Bi%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x_{i}"/> in a product <img alt="x_{1}\cdot x_{2}\cdot \cdots \cdot x_{n}" class="latex" src="https://s0.wp.com/latex.php?latex=x_%7B1%7D%5Ccdot+x_%7B2%7D%5Ccdot+%5Ccdots+%5Ccdot+x_%7Bn%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x_{1}\cdot x_{2}\cdot \cdots \cdot x_{n}"/> will be partitioned among collaborating parties – in several ways – and we shall bound the number of bits that the parties need to exchange to solve the problem.</p>
<p style="text-align: justify;"><b>Organization</b>.</p>
<p style="text-align: justify;">We begin in Section <a href="https://emanueleviola.wordpress.com/feed/#x1-20002">2<!--tex4ht:ref: sec:Two-parties --></a> with two-party communication complexity. In Section <a href="https://emanueleviola.wordpress.com/feed/#x1-30003">3<!--tex4ht:ref: sec:Proof-of-Gowers-Viola --></a> we give a streamlined proof, except for a step that is only sketched, of a result of Gowers and the author <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#XGowersV-cc-int">GV15</a>, <a href="https://emanueleviola.wordpress.com/feed/#XGowersV-cc-int-2">GVb</a>]</span> about interleaved group products. In particular we present an alternative proof, communicated to us by Will Sawin, of a lemma from <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#XGowersV-cc-int-journal">GVa</a>]</span>. We then consider two models of three-party communication. In Section <a href="https://emanueleviola.wordpress.com/feed/#x1-70004">4<!--tex4ht:ref: sec:Three-parties,-number-in-hand --></a> we consider number-in-hand protocols, and we relate the communication complexity to so-called <em>quasirandom groups</em> <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#XGowers08">Gow08</a>, <a href="https://emanueleviola.wordpress.com/feed/#XBabaiNP08">BNP08</a>]</span>. In Section <a href="https://emanueleviola.wordpress.com/feed/#x1-140006">6<!--tex4ht:ref: sec:Three-parties,-number-on-forehea --></a> we consider number-in-hand protocols, and specifically the problem of separating deterministic and randomized communication. In Section <a href="https://emanueleviola.wordpress.com/feed/#x1-150007">7<!--tex4ht:ref: sec:The-corners-theorem --></a> we give an exposition of a result by Austin <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#XAustin2016">Aus16</a>]</span>, and show that it implies a separation that matches the state-of-the-art <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#XBeameDPW10">BDPW10</a>]</span> but applies to a different problem.</p>
<p style="text-align: justify;">Some of the sections follow closely a set of lectures by the author <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#Xviola-special-topics17">Vio17</a>]</span>; related material can also be found in the blog posts <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#Xviola-blog-mixing-in-groups">Vioa</a>, <a href="https://emanueleviola.wordpress.com/feed/#Xviola-blog-mixing-in-groups-ii">Viob</a>]</span>. One of the goals of this survey is to present this material in a more organized matter, in addition to including new material.</p>
<h3 class="sectionHead"><span class="titlemark">2 </span> <a id="x1-20002"/>Two parties</h3>
<p style="text-align: justify;">Let <img alt="G" class="latex" src="https://s0.wp.com/latex.php?latex=G&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="G"/> be a group and let us start by considering the following basic communication task. Alice gets an element <img alt="x\in G" class="latex" src="https://s0.wp.com/latex.php?latex=x%5Cin+G&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x\in G"/> and Bob gets an element <img alt="y\in G" class="latex" src="https://s0.wp.com/latex.php?latex=y%5Cin+G&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="y\in G"/> and their goal is to check if <img alt="x\cdot y=1_{G}" class="latex" src="https://s0.wp.com/latex.php?latex=x%5Ccdot+y%3D1_%7BG%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x\cdot y=1_{G}"/>. How much communication do they need? Well, <img alt="x\cdot y=1_{G}" class="latex" src="https://s0.wp.com/latex.php?latex=x%5Ccdot+y%3D1_%7BG%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x\cdot y=1_{G}"/> is equivalent to <img alt="x=y^{-1}" class="latex" src="https://s0.wp.com/latex.php?latex=x%3Dy%5E%7B-1%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x=y^{-1}"/>. Because Bob can compute <img alt="y^{-1}" class="latex" src="https://s0.wp.com/latex.php?latex=y%5E%7B-1%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="y^{-1}"/> without communication, this problem is just a rephrasing of the <em>equality</em> problem, which has a randomized protocol with constant communication. This holds for any group.</p>
<p style="text-align: justify;">The same is true if Alice gets two elements <img alt="x_{1}" class="latex" src="https://s0.wp.com/latex.php?latex=x_%7B1%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x_{1}"/> and <img alt="x_{2}" class="latex" src="https://s0.wp.com/latex.php?latex=x_%7B2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x_{2}"/> and they need to check if <img alt="x_{1}\cdot y\cdot x_{2}=1_{G}" class="latex" src="https://s0.wp.com/latex.php?latex=x_%7B1%7D%5Ccdot+y%5Ccdot+x_%7B2%7D%3D1_%7BG%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x_{1}\cdot y\cdot x_{2}=1_{G}"/>. Indeed, it is just checking equality of <img alt="y" class="latex" src="https://s0.wp.com/latex.php?latex=y&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="y"/> and <img alt="x_{1}^{-1}\cdot x_{2}^{-1}" class="latex" src="https://s0.wp.com/latex.php?latex=x_%7B1%7D%5E%7B-1%7D%5Ccdot+x_%7B2%7D%5E%7B-1%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x_{1}^{-1}\cdot x_{2}^{-1}"/>, and again Alice can compute the latter without communication.</p>
<p style="text-align: justify;">Things get more interesting if both Alice and Bob get two elements and they need to check if the <em>interleaved product</em> of the elements of Alice and Bob equals <img alt="1_{G}" class="latex" src="https://s0.wp.com/latex.php?latex=1_%7BG%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="1_{G}"/>, that is, if</p>
<div style="text-align: center;"><img alt="\begin{aligned} x_{1}\cdot y_{1}\cdot x_{2}\cdot y_{2}=1_{G}. \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+x_%7B1%7D%5Ccdot+y_%7B1%7D%5Ccdot+x_%7B2%7D%5Ccdot+y_%7B2%7D%3D1_%7BG%7D.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} x_{1}\cdot y_{1}\cdot x_{2}\cdot y_{2}=1_{G}. \end{aligned}"/></div>
<p style="text-align: justify;">Now the previous transformations don’t help anymore. In fact, the complexity depends on the group. If it is abelian then the elements can be reordered and the problem is equivalent to checking if <img alt="(x_{1}\cdot x_{2})\cdot (y_{1}\cdot y_{2})=1_{G}" class="latex" src="https://s0.wp.com/latex.php?latex=%28x_%7B1%7D%5Ccdot+x_%7B2%7D%29%5Ccdot+%28y_%7B1%7D%5Ccdot+y_%7B2%7D%29%3D1_%7BG%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="(x_{1}\cdot x_{2})\cdot (y_{1}\cdot y_{2})=1_{G}"/>. Again, Alice can compute <img alt="x_{1}\cdot x_{2}" class="latex" src="https://s0.wp.com/latex.php?latex=x_%7B1%7D%5Ccdot+x_%7B2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x_{1}\cdot x_{2}"/> without communication, and Bob can compute <img alt="y_{1}\cdot y_{2}" class="latex" src="https://s0.wp.com/latex.php?latex=y_%7B1%7D%5Ccdot+y_%7B2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="y_{1}\cdot y_{2}"/> without communication. So this is the same problem as before and it has a constant communication protocol.</p>
<p style="text-align: justify;">For non-abelian groups this reordering cannot be done, and the problem seems hard. This can be formalized for a class of groups that are “far from abelian” – or we can take this result as a definition of being far from abelian. One of the groups that works best in this sense is the following, first constructed by Galois in the 1830’s.</p>
<div class="newtheorem">
<p style="text-align: justify;"><span class="head"> <a id="x1-2001r1"/> Definition 1. </span>The<em> special linear group </em><img alt="SL(2,q)" class="latex" src="https://s0.wp.com/latex.php?latex=SL%282%2Cq%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="SL(2,q)"/> is the group of <img alt="2\times 2" class="latex" src="https://s0.wp.com/latex.php?latex=2%5Ctimes+2&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="2\times 2"/> invertible matrices over the field <img alt="\mathbb{F} _{q}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathbb%7BF%7D+_%7Bq%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\mathbb{F} _{q}"/> with determinant <img alt="1" class="latex" src="https://s0.wp.com/latex.php?latex=1&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="1"/>.</p>
<p style="text-align: justify;">
</p></div>
<p style="text-align: justify;">The following result was asked in <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#XMilesV-leak">MV13</a>]</span> and was proved in <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#XGowersV-cc-int-journal">GVa</a>]</span>. <a id="x1-2002r1"/></p>
<p style="text-align: justify;"><b>Theorem 1.</b> Let <img alt="G=SL(2,q)" class="latex" src="https://s0.wp.com/latex.php?latex=G%3DSL%282%2Cq%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="G=SL(2,q)"/> and let <img alt="h\ne 1_{G}" class="latex" src="https://s0.wp.com/latex.php?latex=h%5Cne+1_%7BG%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h\ne 1_{G}"/>. Suppose Alice receives <img alt="x_{1},x_{2}\in G" class="latex" src="https://s0.wp.com/latex.php?latex=x_%7B1%7D%2Cx_%7B2%7D%5Cin+G&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x_{1},x_{2}\in G"/> and Bob receives <img alt="y_{1},y_{2}\in G" class="latex" src="https://s0.wp.com/latex.php?latex=y_%7B1%7D%2Cy_%7B2%7D%5Cin+G&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="y_{1},y_{2}\in G"/>. They are promised that <img alt="x_{1}\cdot y_{1}\cdot x_{2}\cdot y_{2}" class="latex" src="https://s0.wp.com/latex.php?latex=x_%7B1%7D%5Ccdot+y_%7B1%7D%5Ccdot+x_%7B2%7D%5Ccdot+y_%7B2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x_{1}\cdot y_{1}\cdot x_{2}\cdot y_{2}"/> either equals <img alt="1_{G}" class="latex" src="https://s0.wp.com/latex.php?latex=1_%7BG%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="1_{G}"/> or <img alt="h" class="latex" src="https://s0.wp.com/latex.php?latex=h&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h"/>. Deciding which case it is requires randomized communication <img alt="\Omega (\log |G|)" class="latex" src="https://s0.wp.com/latex.php?latex=%5COmega+%28%5Clog+%7CG%7C%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\Omega (\log |G|)"/>.</p>
<p style="text-align: justify;">This bound is tight as Alice can send her input, taking <img alt="O(\log |G|)" class="latex" src="https://s0.wp.com/latex.php?latex=O%28%5Clog+%7CG%7C%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="O(\log |G|)"/> bits. We present the proof of this theorem in the next section.</p>
<p style="text-align: justify;">Similar results are known for other groups as well, see <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#XGowersV-cc-int-journal">GVa</a>]</span> and <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#XShalev16">Sha16</a>]</span>. For example, one group that is “between” abelian groups and <img alt="SL(2,q)" class="latex" src="https://s0.wp.com/latex.php?latex=SL%282%2Cq%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="SL(2,q)"/> is the following.</p>
<div class="newtheorem">
<p style="text-align: justify;"><span class="head"> <a id="x1-2003r2"/> Definition 2. </span>The<em> alternating group</em> <img alt="A_{n}" class="latex" src="https://s0.wp.com/latex.php?latex=A_%7Bn%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="A_{n}"/> is the group of even permutations of <img alt="1,2,\ldots ,n" class="latex" src="https://s0.wp.com/latex.php?latex=1%2C2%2C%5Cldots+%2Cn&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="1,2,\ldots ,n"/>.</p>
<p style="text-align: justify;">
</p></div>
<p style="text-align: justify;">If we work over <img alt="A_{n}" class="latex" src="https://s0.wp.com/latex.php?latex=A_%7Bn%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="A_{n}"/> instead of <img alt="SL(2,q)" class="latex" src="https://s0.wp.com/latex.php?latex=SL%282%2Cq%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="SL(2,q)"/> in Theorem <a href="https://emanueleviola.wordpress.com/feed/#x1-2002r1">1<!--tex4ht:ref: thm:GV-interleaved --></a> then the communication complexity is <img alt="\Omega (\log \log |G|)" class="latex" src="https://s0.wp.com/latex.php?latex=%5COmega+%28%5Clog+%5Clog+%7CG%7C%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\Omega (\log \log |G|)"/> <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#XShalev16">Sha16</a>]</span>. The latter bound is tight <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#XMilesV-leak">MV13</a>]</span>: with knowledge of <img alt="h" class="latex" src="https://s0.wp.com/latex.php?latex=h&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h"/>, the parties can agree on an element <img alt="a\in {1,2,\ldots ,n}" class="latex" src="https://s0.wp.com/latex.php?latex=a%5Cin+%7B1%2C2%2C%5Cldots+%2Cn%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="a\in {1,2,\ldots ,n}"/> such that <img alt="h(a)\ne a" class="latex" src="https://s0.wp.com/latex.php?latex=h%28a%29%5Cne+a&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h(a)\ne a"/>. Hence they only need to keep track of the image <img alt="a" class="latex" src="https://s0.wp.com/latex.php?latex=a&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="a"/>. This takes communication <img alt="O(\log n)=O(\log \log |A_{n}|)" class="latex" src="https://s0.wp.com/latex.php?latex=O%28%5Clog+n%29%3DO%28%5Clog+%5Clog+%7CA_%7Bn%7D%7C%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="O(\log n)=O(\log \log |A_{n}|)"/> because <img alt="|A_{n}|=n!/2." class="latex" src="https://s0.wp.com/latex.php?latex=%7CA_%7Bn%7D%7C%3Dn%21%2F2.&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="|A_{n}|=n!/2."/> In more detail, the protocol is as follows. First Bob sends <img alt="y_{2}(a)" class="latex" src="https://s0.wp.com/latex.php?latex=y_%7B2%7D%28a%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="y_{2}(a)"/>. Then Alice sends <img alt="x_{2}y_{2}(a)" class="latex" src="https://s0.wp.com/latex.php?latex=x_%7B2%7Dy_%7B2%7D%28a%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x_{2}y_{2}(a)"/>. Then Bob sends <img alt="y_{1}x_{2}y_{2}(a)" class="latex" src="https://s0.wp.com/latex.php?latex=y_%7B1%7Dx_%7B2%7Dy_%7B2%7D%28a%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="y_{1}x_{2}y_{2}(a)"/> and finally Alice can check if <img alt="x_{1}y_{1}x_{2}y_{2}(a)=a" class="latex" src="https://s0.wp.com/latex.php?latex=x_%7B1%7Dy_%7B1%7Dx_%7B2%7Dy_%7B2%7D%28a%29%3Da&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x_{1}y_{1}x_{2}y_{2}(a)=a"/>.</p>
<p style="text-align: justify;">Interestingly, to decide if <img alt="g=1_{G}" class="latex" src="https://s0.wp.com/latex.php?latex=g%3D1_%7BG%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="g=1_{G}"/> without the promise a stronger lower bound can be proved for many groups, including <img alt="A_{n}" class="latex" src="https://s0.wp.com/latex.php?latex=A_%7Bn%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="A_{n}"/>, see Corollary <a href="https://emanueleviola.wordpress.com/feed/#x1-2006r3">3<!--tex4ht:ref: cor:A_n-bound --></a> below.</p>
<p style="text-align: justify;">In general, it seems an interesting open problem to try to understand for which groups Theorem <a href="https://emanueleviola.wordpress.com/feed/#x1-2002r1">1<!--tex4ht:ref: thm:GV-interleaved --></a> applies. For example, is the communication large for every quasirandom group <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#XGowers08">Gow08</a>]</span>?</p>
<p style="text-align: justify;">Theorem <a href="https://emanueleviola.wordpress.com/feed/#x1-2002r1">1<!--tex4ht:ref: thm:GV-interleaved --></a> and the corresponding results for other groups also scale with the length of the product: for example deciding if <img alt="x_{1}\cdot y_{1}\cdot x_{2}\cdot y_{2}\cdots x_{n}\cdot y_{n}=1_{G}" class="latex" src="https://s0.wp.com/latex.php?latex=x_%7B1%7D%5Ccdot+y_%7B1%7D%5Ccdot+x_%7B2%7D%5Ccdot+y_%7B2%7D%5Ccdots+x_%7Bn%7D%5Ccdot+y_%7Bn%7D%3D1_%7BG%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x_{1}\cdot y_{1}\cdot x_{2}\cdot y_{2}\cdots x_{n}\cdot y_{n}=1_{G}"/> over <img alt="G=SL(2,q)" class="latex" src="https://s0.wp.com/latex.php?latex=G%3DSL%282%2Cq%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="G=SL(2,q)"/> requires communication <img alt="\Omega (n\log |G|)" class="latex" src="https://s0.wp.com/latex.php?latex=%5COmega+%28n%5Clog+%7CG%7C%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\Omega (n\log |G|)"/> which is tight.</p>
<p style="text-align: justify;">A strength of the above results is that they hold for any choice of <img alt="h" class="latex" src="https://s0.wp.com/latex.php?latex=h&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h"/> in the promise. This makes them equivalent to certain <img alt="mixing" class="latex" src="https://s0.wp.com/latex.php?latex=mixing&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="mixing"/> results, discussed below in Section <a href="https://emanueleviola.wordpress.com/feed/#x1-120005.0.1">5.0.1<!--tex4ht:ref: subsec:-mixing --></a>. Next we prove two other lower bounds that do not have this property and can be obtained by reduction from <em>disjointness</em>. First we show that for any non-abelian group <img alt="G" class="latex" src="https://s0.wp.com/latex.php?latex=G&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="G"/> there exists an element <img alt="h" class="latex" src="https://s0.wp.com/latex.php?latex=h&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h"/> such that deciding if <img alt="g=1_{G}" class="latex" src="https://s0.wp.com/latex.php?latex=g%3D1_%7BG%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="g=1_{G}"/> or <img alt="g=h" class="latex" src="https://s0.wp.com/latex.php?latex=g%3Dh&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="g=h"/> requires communication linear in the length of the product. Interestingly, the proof works for any non-abelian group. The choice of <img alt="h" class="latex" src="https://s0.wp.com/latex.php?latex=h&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h"/> is critical, as for some <img alt="G" class="latex" src="https://s0.wp.com/latex.php?latex=G&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="G"/> and <img alt="h" class="latex" src="https://s0.wp.com/latex.php?latex=h&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h"/> the problem is easy. For example: take any group <img alt="G" class="latex" src="https://s0.wp.com/latex.php?latex=G&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="G"/> and consider <img alt="H:=G\times \mathbb {Z}_{2}" class="latex" src="https://s0.wp.com/latex.php?latex=H%3A%3DG%5Ctimes+%5Cmathbb+%7BZ%7D_%7B2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="H:=G\times \mathbb {Z}_{2}"/> where <img alt="\mathbb {Z}_{2}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BZ%7D_%7B2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\mathbb {Z}_{2}"/> is the group of integers with addition modulo <img alt="2" class="latex" src="https://s0.wp.com/latex.php?latex=2&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="2"/>. Distinguishing between <img alt="1_{H}=(1_{G},0)" class="latex" src="https://s0.wp.com/latex.php?latex=1_%7BH%7D%3D%281_%7BG%7D%2C0%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="1_{H}=(1_{G},0)"/> and <img alt="h=(1_{G},1)" class="latex" src="https://s0.wp.com/latex.php?latex=h%3D%281_%7BG%7D%2C1%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h=(1_{G},1)"/> amounts to computing the parity of (the <img alt="\mathbb {Z}_{2}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BZ%7D_%7B2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\mathbb {Z}_{2}"/> components of) the input, which takes constant communication. <a id="x1-2004r2"/></p>
<p style="text-align: justify;"><b>Theorem 2.</b> Let <img alt="G" class="latex" src="https://s0.wp.com/latex.php?latex=G&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="G"/> be a non-abelian group. There exists <img alt="h\in G" class="latex" src="https://s0.wp.com/latex.php?latex=h%5Cin+G&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h\in G"/> such that the following holds. Suppose Alice receives <img alt="x_{1},x_{2},\ldots ,x_{n}" class="latex" src="https://s0.wp.com/latex.php?latex=x_%7B1%7D%2Cx_%7B2%7D%2C%5Cldots+%2Cx_%7Bn%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x_{1},x_{2},\ldots ,x_{n}"/> and receives <img alt="y_{1},y_{2},\ldots ,y_{n}" class="latex" src="https://s0.wp.com/latex.php?latex=y_%7B1%7D%2Cy_%7B2%7D%2C%5Cldots+%2Cy_%7Bn%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="y_{1},y_{2},\ldots ,y_{n}"/>. They are promised that <img alt="x_{1}\cdot y_{1}\cdot x_{2}\cdot y_{2}\cdot \cdots \cdot x_{n}\cdot y_{n}" class="latex" src="https://s0.wp.com/latex.php?latex=x_%7B1%7D%5Ccdot+y_%7B1%7D%5Ccdot+x_%7B2%7D%5Ccdot+y_%7B2%7D%5Ccdot+%5Ccdots+%5Ccdot+x_%7Bn%7D%5Ccdot+y_%7Bn%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x_{1}\cdot y_{1}\cdot x_{2}\cdot y_{2}\cdot \cdots \cdot x_{n}\cdot y_{n}"/> either equals <img alt="1_{G}" class="latex" src="https://s0.wp.com/latex.php?latex=1_%7BG%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="1_{G}"/> or <img alt="h" class="latex" src="https://s0.wp.com/latex.php?latex=h&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h"/>. Deciding which case it is requires randomized communication <img alt="\Omega (n)" class="latex" src="https://s0.wp.com/latex.php?latex=%5COmega+%28n%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\Omega (n)"/>.</p>
<div class="proof">
<p style="text-align: justify;"><span class="head"> Proof. </span>We reduce from <em>unique set-disjointness</em>, defined below. For the reduction we encode the And of two bits <img alt="s,t\in \{0,1\}" class="latex" src="https://s0.wp.com/latex.php?latex=s%2Ct%5Cin+%5C%7B0%2C1%5C%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="s,t\in \{0,1\}"/> as a group product. This encoding is similar to the famous puzzle that asks to hang a picture on a wall with two nails in such a way that the picture falls if either one of the nails is removed. Since <img alt="G" class="latex" src="https://s0.wp.com/latex.php?latex=G&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="G"/> is non-abelian, there exist <img alt="a,b\in G" class="latex" src="https://s0.wp.com/latex.php?latex=a%2Cb%5Cin+G&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="a,b\in G"/> such that <img alt="a\cdot b\neq b\cdot a" class="latex" src="https://s0.wp.com/latex.php?latex=a%5Ccdot+b%5Cneq+b%5Ccdot+a&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="a\cdot b\neq b\cdot a"/>, and in particular <img alt="a\cdot b\cdot a^{-1}\cdot b^{-1}=h" class="latex" src="https://s0.wp.com/latex.php?latex=a%5Ccdot+b%5Ccdot+a%5E%7B-1%7D%5Ccdot+b%5E%7B-1%7D%3Dh&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="a\cdot b\cdot a^{-1}\cdot b^{-1}=h"/> with <img alt="h\neq 1" class="latex" src="https://s0.wp.com/latex.php?latex=h%5Cneq+1&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h\neq 1"/>. We can use this fact to encode the And of <img alt="s" class="latex" src="https://s0.wp.com/latex.php?latex=s&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="s"/> and <img alt="t" class="latex" src="https://s0.wp.com/latex.php?latex=t&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="t"/> as</p>
<div style="text-align: center;"><img alt="\begin{aligned} a^{s}\cdot b^{t}\cdot a^{-s}\cdot b^{-t}=\begin {cases} 1~~\text {if And\ensuremath {(s,t)=0}}\\ h~~\text {otherwise} \end {cases}. \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+a%5E%7Bs%7D%5Ccdot+b%5E%7Bt%7D%5Ccdot+a%5E%7B-s%7D%5Ccdot+b%5E%7B-t%7D%3D%5Cbegin+%7Bcases%7D+1%7E%7E%5Ctext+%7Bif+And%5Censuremath+%7B%28s%2Ct%29%3D0%7D%7D%5C%5C+h%7E%7E%5Ctext+%7Botherwise%7D+%5Cend+%7Bcases%7D.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} a^{s}\cdot b^{t}\cdot a^{-s}\cdot b^{-t}=\begin {cases} 1~~\text {if And\ensuremath {(s,t)=0}}\\ h~~\text {otherwise} \end {cases}. \end{aligned}"/></div>
<p style="text-align: justify;">In the disjointness problem Alice and Bob get inputs <img alt="x,y\in \{0,1\}^{n}" class="latex" src="https://s0.wp.com/latex.php?latex=x%2Cy%5Cin+%5C%7B0%2C1%5C%7D%5E%7Bn%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x,y\in \{0,1\}^{n}"/> respectively, and they wish to check if there exists an <img alt="i\in [n]" class="latex" src="https://s0.wp.com/latex.php?latex=i%5Cin+%5Bn%5D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="i\in [n]"/> such that <img alt="x_{i}\land y_{i}=1" class="latex" src="https://s0.wp.com/latex.php?latex=x_%7Bi%7D%5Cland+y_%7Bi%7D%3D1&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x_{i}\land y_{i}=1"/>. If you think of <img alt="x,y" class="latex" src="https://s0.wp.com/latex.php?latex=x%2Cy&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x,y"/> as characteristic vectors of sets, this problem is asking if the sets have a common element or not. The communication of this problem is <img alt="\Omega (n)" class="latex" src="https://s0.wp.com/latex.php?latex=%5COmega+%28n%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\Omega (n)"/> <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#XKalyanasundaramS92">KS92</a>, <a href="https://emanueleviola.wordpress.com/feed/#XRazborov92">Raz92</a>]</span>. Moreover, in the “unique” variant of this problem where the number of such <img alt="i" class="latex" src="https://s0.wp.com/latex.php?latex=i&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="i"/>’s is 0 or 1, the same lower bound <img alt="\Omega (n)" class="latex" src="https://s0.wp.com/latex.php?latex=%5COmega+%28n%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\Omega (n)"/> still applies. This follows from <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#XKalyanasundaramS92">KS92</a>, <a href="https://emanueleviola.wordpress.com/feed/#XRazborov92">Raz92</a>]</span> – see also Proposition 3.3 in <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#XAMS99">AMS99</a>]</span>. For more on disjointness see the surveys <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#XSherstov14-35years">She14</a>, <a href="https://emanueleviola.wordpress.com/feed/journals/sigact/ChattopadhyayP10">CP10</a>]</span>.</p>
<p style="text-align: justify;">We will reduce unique disjointness to group products. For <img alt="x,y\in \{0,1\}^{n}" class="latex" src="https://s0.wp.com/latex.php?latex=x%2Cy%5Cin+%5C%7B0%2C1%5C%7D%5E%7Bn%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x,y\in \{0,1\}^{n}"/> we produce inputs for the group problem as follows:</p>
<div style="text-align: center;"><img alt="\begin{aligned} x &amp; \rightarrow (a^{x_{1}},a^{-x_{1}},\ldots ,a^{x_{n}},a^{-x_{n}})\\ y &amp; \rightarrow (b^{y_{1}},b^{-y_{1}},\ldots ,b^{y_{n}},b^{-y_{n}}). \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+x+%26+%5Crightarrow+%28a%5E%7Bx_%7B1%7D%7D%2Ca%5E%7B-x_%7B1%7D%7D%2C%5Cldots+%2Ca%5E%7Bx_%7Bn%7D%7D%2Ca%5E%7B-x_%7Bn%7D%7D%29%5C%5C+y+%26+%5Crightarrow+%28b%5E%7By_%7B1%7D%7D%2Cb%5E%7B-y_%7B1%7D%7D%2C%5Cldots+%2Cb%5E%7By_%7Bn%7D%7D%2Cb%5E%7B-y_%7Bn%7D%7D%29.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} x &amp; \rightarrow (a^{x_{1}},a^{-x_{1}},\ldots ,a^{x_{n}},a^{-x_{n}})\\ y &amp; \rightarrow (b^{y_{1}},b^{-y_{1}},\ldots ,b^{y_{n}},b^{-y_{n}}). \end{aligned}"/></div>
<p style="text-align: justify;">The group product becomes</p>
<div style="text-align: center;"><img alt="\begin{aligned} \underbrace {a^{x_{1}}\cdot b^{y_{1}}\cdot a^{-x_{1}}\cdot b^{-y_{1}}}_{\text {1 bit}}\cdots \cdots a^{x_{n}}\cdot b^{y_{n}}\cdot a^{-x_{n}}\cdot b^{-y_{n}}. \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cunderbrace+%7Ba%5E%7Bx_%7B1%7D%7D%5Ccdot+b%5E%7By_%7B1%7D%7D%5Ccdot+a%5E%7B-x_%7B1%7D%7D%5Ccdot+b%5E%7B-y_%7B1%7D%7D%7D_%7B%5Ctext+%7B1+bit%7D%7D%5Ccdots+%5Ccdots+a%5E%7Bx_%7Bn%7D%7D%5Ccdot+b%5E%7By_%7Bn%7D%7D%5Ccdot+a%5E%7B-x_%7Bn%7D%7D%5Ccdot+b%5E%7B-y_%7Bn%7D%7D.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} \underbrace {a^{x_{1}}\cdot b^{y_{1}}\cdot a^{-x_{1}}\cdot b^{-y_{1}}}_{\text {1 bit}}\cdots \cdots a^{x_{n}}\cdot b^{y_{n}}\cdot a^{-x_{n}}\cdot b^{-y_{n}}. \end{aligned}"/></div>
<p style="text-align: justify;">If there isn’t an <img alt="i\in [n]" class="latex" src="https://s0.wp.com/latex.php?latex=i%5Cin+%5Bn%5D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="i\in [n]"/> such that <img alt="x_{i}\land y_{i}=1" class="latex" src="https://s0.wp.com/latex.php?latex=x_%7Bi%7D%5Cland+y_%7Bi%7D%3D1&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x_{i}\land y_{i}=1"/>, then for each <img alt="i" class="latex" src="https://s0.wp.com/latex.php?latex=i&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="i"/> the term <img alt="a^{x_{i}}\cdot b^{y_{i}}\cdot a^{-x_{i}}\cdot b^{-y_{i}}" class="latex" src="https://s0.wp.com/latex.php?latex=a%5E%7Bx_%7Bi%7D%7D%5Ccdot+b%5E%7By_%7Bi%7D%7D%5Ccdot+a%5E%7B-x_%7Bi%7D%7D%5Ccdot+b%5E%7B-y_%7Bi%7D%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="a^{x_{i}}\cdot b^{y_{i}}\cdot a^{-x_{i}}\cdot b^{-y_{i}}"/> is <img alt="1_{G}" class="latex" src="https://s0.wp.com/latex.php?latex=1_%7BG%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="1_{G}"/>, and thus the whole product is 1.</p>
<p style="text-align: justify;">Otherwise, there exists a unique <img alt="i" class="latex" src="https://s0.wp.com/latex.php?latex=i&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="i"/> such that <img alt="x_{i}\land y_{i}=1" class="latex" src="https://s0.wp.com/latex.php?latex=x_%7Bi%7D%5Cland+y_%7Bi%7D%3D1&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x_{i}\land y_{i}=1"/> and thus the product will be <img alt="1\cdots 1\cdot h\cdot 1\cdots 1=h" class="latex" src="https://s0.wp.com/latex.php?latex=1%5Ccdots+1%5Ccdot+h%5Ccdot+1%5Ccdots+1%3Dh&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="1\cdots 1\cdot h\cdot 1\cdots 1=h"/>, with <img alt="h" class="latex" src="https://s0.wp.com/latex.php?latex=h&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h"/> being in the <img alt="i" class="latex" src="https://s0.wp.com/latex.php?latex=i&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="i"/>-th position. If Alice and Bob can check if the above product is equal to 1, they can also solve the unique set disjointness problem, and thus the lower bound applies for the former. <img alt="\square " class="latex" src="https://s0.wp.com/latex.php?latex=%5Csquare+&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\square "/></p>
</div>
<p style="text-align: justify;">We required the uniqueness property, because otherwise we might get a product <img alt="h^{c}" class="latex" src="https://s0.wp.com/latex.php?latex=h%5E%7Bc%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h^{c}"/> that could be equal to 1 in some groups.</p>
<p style="text-align: justify;">Next we prove a result for products of length just <img alt="4" class="latex" src="https://s0.wp.com/latex.php?latex=4&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="4"/>; it applies to non-abelian groups of the form <img alt="G=H^{n}" class="latex" src="https://s0.wp.com/latex.php?latex=G%3DH%5E%7Bn%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="G=H^{n}"/> and not with the promise. <a id="x1-2005r3"/></p>
<p style="text-align: justify;"><b>Theorem 3.</b> Let <img alt="H" class="latex" src="https://s0.wp.com/latex.php?latex=H&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="H"/> be a non-abelian group and consider <img alt="G=H^{n}" class="latex" src="https://s0.wp.com/latex.php?latex=G%3DH%5E%7Bn%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="G=H^{n}"/>. Suppose Alice receives <img alt="x_{1},x_{2}" class="latex" src="https://s0.wp.com/latex.php?latex=x_%7B1%7D%2Cx_%7B2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x_{1},x_{2}"/> and Bob receives <img alt="y_{1},y_{2}" class="latex" src="https://s0.wp.com/latex.php?latex=y_%7B1%7D%2Cy_%7B2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="y_{1},y_{2}"/>. Deciding if <img alt="x_{1}\cdot y_{1}\cdot x_{2}\cdot y_{2}=1_{G}" class="latex" src="https://s0.wp.com/latex.php?latex=x_%7B1%7D%5Ccdot+y_%7B1%7D%5Ccdot+x_%7B2%7D%5Ccdot+y_%7B2%7D%3D1_%7BG%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x_{1}\cdot y_{1}\cdot x_{2}\cdot y_{2}=1_{G}"/> requires randomized communication <img alt="\Omega (n)" class="latex" src="https://s0.wp.com/latex.php?latex=%5COmega+%28n%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\Omega (n)"/>.</p>
<div class="proof">
<p style="text-align: justify;"><span class="head"> Proof. </span>The proof is similar to the proof of Theorem <a href="https://emanueleviola.wordpress.com/feed/#x1-2004r2">2<!--tex4ht:ref: thm:for-every-non-abelian --></a>. We use coordinate <img alt="i" class="latex" src="https://s0.wp.com/latex.php?latex=i&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="i"/> of <img alt="G" class="latex" src="https://s0.wp.com/latex.php?latex=G&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="G"/> to encode bit <img alt="i" class="latex" src="https://s0.wp.com/latex.php?latex=i&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="i"/> of the disjointness instance. If there is no intersection in the latter, the product will be <img alt="1_{G}" class="latex" src="https://s0.wp.com/latex.php?latex=1_%7BG%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="1_{G}"/>. Otherwise, at least some coordinate will be <img alt="\ne 1_{G}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cne+1_%7BG%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\ne 1_{G}"/>. <img alt="\square " class="latex" src="https://s0.wp.com/latex.php?latex=%5Csquare+&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\square "/></p>
</div>
<p style="text-align: justify;">As a corollary we can prove a lower bound for <img alt="A_{n}" class="latex" src="https://s0.wp.com/latex.php?latex=A_%7Bn%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="A_{n}"/>.</p>
<div class="newtheorem">
<p style="text-align: justify;"><span class="head"> <a id="x1-2006r3"/> Corollary 3. </span>Theorem <a href="https://emanueleviola.wordpress.com/feed/#x1-2005r3">3<!--tex4ht:ref: thm:G-to-the-n-hard --></a> holds for <img alt="G=A_{n}" class="latex" src="https://s0.wp.com/latex.php?latex=G%3DA_%7Bn%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="G=A_{n}"/>.</p>
<p style="text-align: justify;">
</p></div>
<div class="proof">
<p style="text-align: justify;"><span class="head"> Proof. </span>Note that <img alt="A_{n}" class="latex" src="https://s0.wp.com/latex.php?latex=A_%7Bn%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="A_{n}"/> contains <img alt="(A_{4})^{\lfloor n/4\rfloor }" class="latex" src="https://s0.wp.com/latex.php?latex=%28A_%7B4%7D%29%5E%7B%5Clfloor+n%2F4%5Crfloor+%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="(A_{4})^{\lfloor n/4\rfloor }"/> and that <img alt="A_{4}" class="latex" src="https://s0.wp.com/latex.php?latex=A_%7B4%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="A_{4}"/> is not abelian. Apply Theorem <a href="https://emanueleviola.wordpress.com/feed/#x1-2005r3">3<!--tex4ht:ref: thm:G-to-the-n-hard --></a>. <img alt="\square " class="latex" src="https://s0.wp.com/latex.php?latex=%5Csquare+&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\square "/></p>
</div>
<p style="text-align: justify;">Theorem <a href="https://emanueleviola.wordpress.com/feed/#x1-2005r3">3<!--tex4ht:ref: thm:G-to-the-n-hard --></a> is tight for constant-size <img alt="G" class="latex" src="https://s0.wp.com/latex.php?latex=G&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="G"/>. We do not know if Corollary <a href="https://emanueleviola.wordpress.com/feed/#x1-2006r3">3<!--tex4ht:ref: cor:A_n-bound --></a> is tight. The trivial upper bound is <img alt="O(\log |A_{n}|)=O(n\log n)" class="latex" src="https://s0.wp.com/latex.php?latex=O%28%5Clog+%7CA_%7Bn%7D%7C%29%3DO%28n%5Clog+n%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="O(\log |A_{n}|)=O(n\log n)"/>.</p>
<h3 class="sectionHead"><span class="titlemark">3 </span> <a id="x1-30003"/>Proof of Theorem 1</h3>
<p style="text-align: justify;">Several related proofs of this theorem exist, see <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#XGowersV-cc-int">GV15</a>, <a href="https://emanueleviola.wordpress.com/feed/#XGowersV-cc-int-journal">GVa</a>, <a href="https://emanueleviola.wordpress.com/feed/#XShalev16">Sha16</a>]</span>. As in <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#XGowersV-cc-int-journal">GVa</a>]</span>, the proof that we present can be broken down in three steps. First we reduce the problem to a statement about conjugacy classes. Second we reduce this to a statement about trace maps. Third we prove the latter. We present the first step in a way that is similar but slightly different from the presentation in <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#XGowersV-cc-int-journal">GVa</a>]</span>. The second step is only sketched, but relies on classical results about <img alt="SL(2,q)" class="latex" src="https://s0.wp.com/latex.php?latex=SL%282%2Cq%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="SL(2,q)"/> and can be found in <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#XGowersV-cc-int-journal">GVa</a>]</span>. For the third we present a proof that was communicated to us by Will Sawin. We thank him for his permission to include it here.</p>
<h4 class="subsectionHead"><span class="titlemark">3.1 </span> <a id="x1-40003.1"/>Step 1</h4>
<p style="text-align: justify;">We would like to rule out randomized protocols, but it is hard to reason about them directly. Instead, we are going to rule out deterministic protocols on random inputs. First, for any group element <img alt="g\in G" class="latex" src="https://s0.wp.com/latex.php?latex=g%5Cin+G&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="g\in G"/> we define the distribution on quadruples <img alt="D_{g}:=(x_{1},y_{1},x_{2},(x_{1}\cdot y_{1}\cdot x_{2})^{-1}g)" class="latex" src="https://s0.wp.com/latex.php?latex=D_%7Bg%7D%3A%3D%28x_%7B1%7D%2Cy_%7B1%7D%2Cx_%7B2%7D%2C%28x_%7B1%7D%5Ccdot+y_%7B1%7D%5Ccdot+x_%7B2%7D%29%5E%7B-1%7Dg%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="D_{g}:=(x_{1},y_{1},x_{2},(x_{1}\cdot y_{1}\cdot x_{2})^{-1}g)"/>, where <img alt="x,y\in G" class="latex" src="https://s0.wp.com/latex.php?latex=x%2Cy%5Cin+G&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x,y\in G"/> are uniformly random elements. Note the product of the elements in <img alt="D_{g}" class="latex" src="https://s0.wp.com/latex.php?latex=D_%7Bg%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="D_{g}"/> is always <img alt="g" class="latex" src="https://s0.wp.com/latex.php?latex=g&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="g"/>.</p>
<p style="text-align: justify;">Towards a contradiction, suppose we have a randomized protocol <img alt="P" class="latex" src="https://s0.wp.com/latex.php?latex=P&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="P"/> such that</p>
<div style="text-align: center;"><img alt="\begin{aligned} \mathbb{P} [P(D_{1})=1]\geq \mathbb{P} [P(D_{h})=1]+\frac {1}{10}. \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cmathbb%7BP%7D+%5BP%28D_%7B1%7D%29%3D1%5D%5Cgeq+%5Cmathbb%7BP%7D+%5BP%28D_%7Bh%7D%29%3D1%5D%2B%5Cfrac+%7B1%7D%7B10%7D.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} \mathbb{P} [P(D_{1})=1]\geq \mathbb{P} [P(D_{h})=1]+\frac {1}{10}. \end{aligned}"/></div>
<p>This implies a deterministic protocol with the same gap, by fixing the randomness.</p>
<p style="text-align: justify;">We reach a contradiction by showing that for every deterministic protocol <img alt="P" class="latex" src="https://s0.wp.com/latex.php?latex=P&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="P"/> using little communication, we have</p>
<div style="text-align: center;"><img alt="\begin{aligned} |\Pr [P(D_{1})=1]-\Pr [P(D_{h})=1]|\leq \frac {1}{100}. \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%7C%5CPr+%5BP%28D_%7B1%7D%29%3D1%5D-%5CPr+%5BP%28D_%7Bh%7D%29%3D1%5D%7C%5Cleq+%5Cfrac+%7B1%7D%7B100%7D.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} |\Pr [P(D_{1})=1]-\Pr [P(D_{h})=1]|\leq \frac {1}{100}. \end{aligned}"/></div>
<p style="text-align: justify;">We start with the following standard lemma, which describes a protocol using product sets.</p>
<div class="newtheorem">
<p style="text-align: justify;"><span class="head"> <a id="x1-4001r4"/> Lemma 4. </span>(The set of accepted inputs of) A deterministic <img alt="c" class="latex" src="https://s0.wp.com/latex.php?latex=c&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="c"/>-bit protocol for a function <img alt="f:X\times Y\to Z" class="latex" src="https://s0.wp.com/latex.php?latex=f%3AX%5Ctimes+Y%5Cto+Z&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="f:X\times Y\to Z"/> can be written as a disjoint union of <img alt="2^{c}" class="latex" src="https://s0.wp.com/latex.php?latex=2%5E%7Bc%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="2^{c}"/> rectangles, where a rectangle is a set of the form <img alt="A\times B" class="latex" src="https://s0.wp.com/latex.php?latex=A%5Ctimes+B&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="A\times B"/> with <img alt="A\subseteq X" class="latex" src="https://s0.wp.com/latex.php?latex=A%5Csubseteq+X&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="A\subseteq X"/> and <img alt="B\subseteq Y" class="latex" src="https://s0.wp.com/latex.php?latex=B%5Csubseteq+Y&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="B\subseteq Y"/> and where <img alt="f" class="latex" src="https://s0.wp.com/latex.php?latex=f&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="f"/> is constant.</p>
<p style="text-align: justify;">
</p></div>
<div class="proof">
<p style="text-align: justify;"><span class="head"> Proof. </span>(sketch) For every communication transcript <img alt="t" class="latex" src="https://s0.wp.com/latex.php?latex=t&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="t"/>, let <img alt="S_{t}\subseteq G^{2}" class="latex" src="https://s0.wp.com/latex.php?latex=S_%7Bt%7D%5Csubseteq+G%5E%7B2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="S_{t}\subseteq G^{2}"/> be the set of inputs giving transcript <img alt="t" class="latex" src="https://s0.wp.com/latex.php?latex=t&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="t"/>. The sets <img alt="S_{t}" class="latex" src="https://s0.wp.com/latex.php?latex=S_%7Bt%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="S_{t}"/> are disjoint since an input gives only one transcript, and their number is <img alt="2^{c}" class="latex" src="https://s0.wp.com/latex.php?latex=2%5E%7Bc%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="2^{c}"/>: one for each communication transcript of the protocol. The rectangle property can be proven by induction on the protocol tree. <img alt="\square " class="latex" src="https://s0.wp.com/latex.php?latex=%5Csquare+&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\square "/></p>
</div>
<p style="text-align: justify;">Next, we show that any rectangle <img alt="A\times B" class="latex" src="https://s0.wp.com/latex.php?latex=A%5Ctimes+B&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="A\times B"/> cannot distinguish <img alt="D_{1},D_{h}" class="latex" src="https://s0.wp.com/latex.php?latex=D_%7B1%7D%2CD_%7Bh%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="D_{1},D_{h}"/>. The way we achieve this is by showing that for every <img alt="g" class="latex" src="https://s0.wp.com/latex.php?latex=g&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="g"/> the probability that <img alt="(A\times B)(D_{g})=1" class="latex" src="https://s0.wp.com/latex.php?latex=%28A%5Ctimes+B%29%28D_%7Bg%7D%29%3D1&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="(A\times B)(D_{g})=1"/> is roughly the same for every <img alt="g" class="latex" src="https://s0.wp.com/latex.php?latex=g&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="g"/>, and is roughly the density of the rectangle. (Here we write <img alt="A\times B" class="latex" src="https://s0.wp.com/latex.php?latex=A%5Ctimes+B&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="A\times B"/> for the characteristic function of the set <img alt="A\times B" class="latex" src="https://s0.wp.com/latex.php?latex=A%5Ctimes+B&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="A\times B"/>.) Without loss of generality we set <img alt="g=1_{G}" class="latex" src="https://s0.wp.com/latex.php?latex=g%3D1_%7BG%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="g=1_{G}"/>. Let <img alt="A" class="latex" src="https://s0.wp.com/latex.php?latex=A&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="A"/> have density <img alt="\alpha " class="latex" src="https://s0.wp.com/latex.php?latex=%5Calpha+&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\alpha "/> and <img alt="B" class="latex" src="https://s0.wp.com/latex.php?latex=B&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="B"/> have density <img alt="\beta " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbeta+&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\beta "/>. We aim to bound above</p>
<div style="text-align: center;"><img alt="\begin{aligned} \left |\mathbb{E} _{a_{1},b_{1},a_{2},b_{2}:a_{1}b_{1}a_{2}b_{2}=1}A(a_{1},a_{2})B(b_{1},b_{2})-\alpha \beta \right |, \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cleft+%7C%5Cmathbb%7BE%7D+_%7Ba_%7B1%7D%2Cb_%7B1%7D%2Ca_%7B2%7D%2Cb_%7B2%7D%3Aa_%7B1%7Db_%7B1%7Da_%7B2%7Db_%7B2%7D%3D1%7DA%28a_%7B1%7D%2Ca_%7B2%7D%29B%28b_%7B1%7D%2Cb_%7B2%7D%29-%5Calpha+%5Cbeta+%5Cright+%7C%2C+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} \left |\mathbb{E} _{a_{1},b_{1},a_{2},b_{2}:a_{1}b_{1}a_{2}b_{2}=1}A(a_{1},a_{2})B(b_{1},b_{2})-\alpha \beta \right |, \end{aligned}"/></div>
<p>where note the distribution of <img alt="a_{1},b_{1},a_{2},b_{2}" class="latex" src="https://s0.wp.com/latex.php?latex=a_%7B1%7D%2Cb_%7B1%7D%2Ca_%7B2%7D%2Cb_%7B2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="a_{1},b_{1},a_{2},b_{2}"/> is the same as <img alt="D_{1}" class="latex" src="https://s0.wp.com/latex.php?latex=D_%7B1%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="D_{1}"/>.</p>
<p style="text-align: justify;">Because the distribution of <img alt="(b_{1},b_{2})" class="latex" src="https://s0.wp.com/latex.php?latex=%28b_%7B1%7D%2Cb_%7B2%7D%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="(b_{1},b_{2})"/> is uniform in <img alt="G^{2}" class="latex" src="https://s0.wp.com/latex.php?latex=G%5E%7B2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="G^{2}"/>, the above can be rewritten as</p>
<div style="text-align: center;"><img alt="\begin{aligned} &amp; \left |\mathbb{E} _{b_{1},b_{2}}B(b_{1},b_{2})\mathbb{E} _{a_{1},a_{2}:a_{1}b_{1}a_{2}b_{2}=1}(A(a_{1},a_{2})-\alpha )\right |\\ &amp; \le \sqrt {\mathbb{E} _{b_{1},b_{2}}B(b_{1},b_{2})^{2}}\sqrt {\mathbb{E} _{b_{1},b_{2}}\mathbb{E} _{a_{1},a_{2}:a_{1}b_{1}a_{2}b_{2}=1}^{2}(A(a_{1},a_{2})-\alpha )}.\\ &amp; =\sqrt {\beta }\sqrt {\mathbb{E} _{b_{1},b_{2},a_{1},a_{2},a_{1}',a_{2}':a_{1}b_{1}a_{2}b_{2}=a_{1}'b_{1}a_{2}'b_{2}=1}A(a_{1},a_{2})A(a_{1}',a_{2}')-\alpha ^{2}}. \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%26+%5Cleft+%7C%5Cmathbb%7BE%7D+_%7Bb_%7B1%7D%2Cb_%7B2%7D%7DB%28b_%7B1%7D%2Cb_%7B2%7D%29%5Cmathbb%7BE%7D+_%7Ba_%7B1%7D%2Ca_%7B2%7D%3Aa_%7B1%7Db_%7B1%7Da_%7B2%7Db_%7B2%7D%3D1%7D%28A%28a_%7B1%7D%2Ca_%7B2%7D%29-%5Calpha+%29%5Cright+%7C%5C%5C+%26+%5Cle+%5Csqrt+%7B%5Cmathbb%7BE%7D+_%7Bb_%7B1%7D%2Cb_%7B2%7D%7DB%28b_%7B1%7D%2Cb_%7B2%7D%29%5E%7B2%7D%7D%5Csqrt+%7B%5Cmathbb%7BE%7D+_%7Bb_%7B1%7D%2Cb_%7B2%7D%7D%5Cmathbb%7BE%7D+_%7Ba_%7B1%7D%2Ca_%7B2%7D%3Aa_%7B1%7Db_%7B1%7Da_%7B2%7Db_%7B2%7D%3D1%7D%5E%7B2%7D%28A%28a_%7B1%7D%2Ca_%7B2%7D%29-%5Calpha+%29%7D.%5C%5C+%26+%3D%5Csqrt+%7B%5Cbeta+%7D%5Csqrt+%7B%5Cmathbb%7BE%7D+_%7Bb_%7B1%7D%2Cb_%7B2%7D%2Ca_%7B1%7D%2Ca_%7B2%7D%2Ca_%7B1%7D%27%2Ca_%7B2%7D%27%3Aa_%7B1%7Db_%7B1%7Da_%7B2%7Db_%7B2%7D%3Da_%7B1%7D%27b_%7B1%7Da_%7B2%7D%27b_%7B2%7D%3D1%7DA%28a_%7B1%7D%2Ca_%7B2%7D%29A%28a_%7B1%7D%27%2Ca_%7B2%7D%27%29-%5Calpha+%5E%7B2%7D%7D.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} &amp; \left |\mathbb{E} _{b_{1},b_{2}}B(b_{1},b_{2})\mathbb{E} _{a_{1},a_{2}:a_{1}b_{1}a_{2}b_{2}=1}(A(a_{1},a_{2})-\alpha )\right |\\ &amp; \le \sqrt {\mathbb{E} _{b_{1},b_{2}}B(b_{1},b_{2})^{2}}\sqrt {\mathbb{E} _{b_{1},b_{2}}\mathbb{E} _{a_{1},a_{2}:a_{1}b_{1}a_{2}b_{2}=1}^{2}(A(a_{1},a_{2})-\alpha )}.\\ &amp; =\sqrt {\beta }\sqrt {\mathbb{E} _{b_{1},b_{2},a_{1},a_{2},a_{1}',a_{2}':a_{1}b_{1}a_{2}b_{2}=a_{1}'b_{1}a_{2}'b_{2}=1}A(a_{1},a_{2})A(a_{1}',a_{2}')-\alpha ^{2}}. \end{aligned}"/></div>
<p style="text-align: justify;">The inequality is Cauchy-Schwarz, and the step after that is obtained by expanding the square and noting that <img alt="(a_{1},a_{2})" class="latex" src="https://s0.wp.com/latex.php?latex=%28a_%7B1%7D%2Ca_%7B2%7D%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="(a_{1},a_{2})"/> is uniform in <img alt="G^{2}" class="latex" src="https://s0.wp.com/latex.php?latex=G%5E%7B2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="G^{2}"/>, so that the expectation of the term <img alt="A(a_{1},a_{2})\alpha " class="latex" src="https://s0.wp.com/latex.php?latex=A%28a_%7B1%7D%2Ca_%7B2%7D%29%5Calpha+&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="A(a_{1},a_{2})\alpha "/> is <img alt="\alpha ^{2}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Calpha+%5E%7B2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\alpha ^{2}"/>.</p>
<p style="text-align: justify;">Now we do several transformations to rewrite the distribution in the last expectation in a convenient form. First, right-multiplying by <img alt="b_{2}^{-1}" class="latex" src="https://s0.wp.com/latex.php?latex=b_%7B2%7D%5E%7B-1%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="b_{2}^{-1}"/> we can rewrite the distribution as the uniform distribution on tuples such that</p>
<div style="text-align: center;"><img alt="\begin{aligned} a_{1}b_{1}a_{2}=a_{1}'b_{1}a_{2}'. \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+a_%7B1%7Db_%7B1%7Da_%7B2%7D%3Da_%7B1%7D%27b_%7B1%7Da_%7B2%7D%27.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} a_{1}b_{1}a_{2}=a_{1}'b_{1}a_{2}'. \end{aligned}"/></div>
<p style="text-align: justify;">The last equation is equivalent to <img alt="b_{1}^{-1}(a_{1}')^{-1}a_{1}b_{1}a_{2}=a_{2}'" class="latex" src="https://s0.wp.com/latex.php?latex=b_%7B1%7D%5E%7B-1%7D%28a_%7B1%7D%27%29%5E%7B-1%7Da_%7B1%7Db_%7B1%7Da_%7B2%7D%3Da_%7B2%7D%27&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="b_{1}^{-1}(a_{1}')^{-1}a_{1}b_{1}a_{2}=a_{2}'"/>.</p>
<p style="text-align: justify;">We can now do a transformation setting <img alt="a_{1}'" class="latex" src="https://s0.wp.com/latex.php?latex=a_%7B1%7D%27&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="a_{1}'"/> to be <img alt="a_{1}x^{-1}" class="latex" src="https://s0.wp.com/latex.php?latex=a_%7B1%7Dx%5E%7B-1%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="a_{1}x^{-1}"/> to rewrite the distribution of the four-tuple as</p>
<div style="text-align: center;"><img alt="\begin{aligned} (a_{1},a_{2},a_{1}x^{-1},C(x)a_{2}) \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%28a_%7B1%7D%2Ca_%7B2%7D%2Ca_%7B1%7Dx%5E%7B-1%7D%2CC%28x%29a_%7B2%7D%29+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} (a_{1},a_{2},a_{1}x^{-1},C(x)a_{2}) \end{aligned}"/></div>
<p>where we use <img alt="C(x)" class="latex" src="https://s0.wp.com/latex.php?latex=C%28x%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="C(x)"/> to denote a uniform element from the conjugacy class of <img alt="x" class="latex" src="https://s0.wp.com/latex.php?latex=x&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x"/>, that is <img alt="b^{-1}xb" class="latex" src="https://s0.wp.com/latex.php?latex=b%5E%7B-1%7Dxb&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="b^{-1}xb"/> for a uniform <img alt="b\in G" class="latex" src="https://s0.wp.com/latex.php?latex=b%5Cin+G&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="b\in G"/>.</p>
<p style="text-align: justify;">Hence it is sufficient to bound</p>
<div style="text-align: center;"><img alt="\begin{aligned} \left |\mathbb{E} A(a_{1},a_{2})A(a_{1}x^{-1},C(x)a_{2})-\alpha ^{2}\right |, \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cleft+%7C%5Cmathbb%7BE%7D+A%28a_%7B1%7D%2Ca_%7B2%7D%29A%28a_%7B1%7Dx%5E%7B-1%7D%2CC%28x%29a_%7B2%7D%29-%5Calpha+%5E%7B2%7D%5Cright+%7C%2C+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} \left |\mathbb{E} A(a_{1},a_{2})A(a_{1}x^{-1},C(x)a_{2})-\alpha ^{2}\right |, \end{aligned}"/></div>
<p>where all the variables are uniform and independent.</p>
<p style="text-align: justify;">With a similar derivation as above, this can be rewritten as</p>
<div style="text-align: center;"><img alt="\begin{aligned} &amp; \left |\mathbb{E} A(a_{1},a_{2})\mathbb{E} (A(a_{1}x^{-1},C(x)a_{2})-\alpha )\right |\\ &amp; \le \sqrt {\mathbb{E} A(a_{1},a{}_{2})^{2}}\sqrt {\mathbb{E} _{a_{1},a_{2}}\mathbb{E} _{x}^{2}(A(a_{1}x^{-1},C(x)a_{2})-\alpha )}.\\ &amp; =\sqrt {\alpha }\sqrt {\mathbb{E} A(a_{1}x^{-1},C(x)a_{2})A(a_{1}x'^{-1},C(x')a_{2})-\alpha ^{2}}. \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%26+%5Cleft+%7C%5Cmathbb%7BE%7D+A%28a_%7B1%7D%2Ca_%7B2%7D%29%5Cmathbb%7BE%7D+%28A%28a_%7B1%7Dx%5E%7B-1%7D%2CC%28x%29a_%7B2%7D%29-%5Calpha+%29%5Cright+%7C%5C%5C+%26+%5Cle+%5Csqrt+%7B%5Cmathbb%7BE%7D+A%28a_%7B1%7D%2Ca%7B%7D_%7B2%7D%29%5E%7B2%7D%7D%5Csqrt+%7B%5Cmathbb%7BE%7D+_%7Ba_%7B1%7D%2Ca_%7B2%7D%7D%5Cmathbb%7BE%7D+_%7Bx%7D%5E%7B2%7D%28A%28a_%7B1%7Dx%5E%7B-1%7D%2CC%28x%29a_%7B2%7D%29-%5Calpha+%29%7D.%5C%5C+%26+%3D%5Csqrt+%7B%5Calpha+%7D%5Csqrt+%7B%5Cmathbb%7BE%7D+A%28a_%7B1%7Dx%5E%7B-1%7D%2CC%28x%29a_%7B2%7D%29A%28a_%7B1%7Dx%27%5E%7B-1%7D%2CC%28x%27%29a_%7B2%7D%29-%5Calpha+%5E%7B2%7D%7D.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} &amp; \left |\mathbb{E} A(a_{1},a_{2})\mathbb{E} (A(a_{1}x^{-1},C(x)a_{2})-\alpha )\right |\\ &amp; \le \sqrt {\mathbb{E} A(a_{1},a{}_{2})^{2}}\sqrt {\mathbb{E} _{a_{1},a_{2}}\mathbb{E} _{x}^{2}(A(a_{1}x^{-1},C(x)a_{2})-\alpha )}.\\ &amp; =\sqrt {\alpha }\sqrt {\mathbb{E} A(a_{1}x^{-1},C(x)a_{2})A(a_{1}x'^{-1},C(x')a_{2})-\alpha ^{2}}. \end{aligned}"/></div>
<p style="text-align: justify;">Here each occurrence of <img alt="C" class="latex" src="https://s0.wp.com/latex.php?latex=C&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="C"/> denotes a uniform and independent conjugate. Hence it is sufficient to bound</p>
<div style="text-align: center;"><img alt="\begin{aligned} \left |\mathbb{E} A(a_{1}x^{-1},C(x)a_{2})A(a_{1}x'^{-1},C(x')a_{2})-\alpha ^{2}\right |. \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cleft+%7C%5Cmathbb%7BE%7D+A%28a_%7B1%7Dx%5E%7B-1%7D%2CC%28x%29a_%7B2%7D%29A%28a_%7B1%7Dx%27%5E%7B-1%7D%2CC%28x%27%29a_%7B2%7D%29-%5Calpha+%5E%7B2%7D%5Cright+%7C.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} \left |\mathbb{E} A(a_{1}x^{-1},C(x)a_{2})A(a_{1}x'^{-1},C(x')a_{2})-\alpha ^{2}\right |. \end{aligned}"/></div>
<p style="text-align: justify;">We can now replace <img alt="a_{2}" class="latex" src="https://s0.wp.com/latex.php?latex=a_%7B2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="a_{2}"/> with <img alt="C(x)^{-1}a_{2}." class="latex" src="https://s0.wp.com/latex.php?latex=C%28x%29%5E%7B-1%7Da_%7B2%7D.&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="C(x)^{-1}a_{2}."/> Because <img alt="C(x)^{-1}" class="latex" src="https://s0.wp.com/latex.php?latex=C%28x%29%5E%7B-1%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="C(x)^{-1}"/> has the same distribution of <img alt="C(x^{-1})" class="latex" src="https://s0.wp.com/latex.php?latex=C%28x%5E%7B-1%7D%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="C(x^{-1})"/>, it is sufficient to bound</p>
<div style="text-align: center;"><img alt="\begin{aligned} \left |\mathbb{E} A(a_{1}x^{-1},a_{2})A(a_{1}x'^{-1},C(x')C(x^{-1})a_{2})-\alpha ^{2}\right |. \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cleft+%7C%5Cmathbb%7BE%7D+A%28a_%7B1%7Dx%5E%7B-1%7D%2Ca_%7B2%7D%29A%28a_%7B1%7Dx%27%5E%7B-1%7D%2CC%28x%27%29C%28x%5E%7B-1%7D%29a_%7B2%7D%29-%5Calpha+%5E%7B2%7D%5Cright+%7C.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} \left |\mathbb{E} A(a_{1}x^{-1},a_{2})A(a_{1}x'^{-1},C(x')C(x^{-1})a_{2})-\alpha ^{2}\right |. \end{aligned}"/></div>
<p style="text-align: justify;">For this, it is enough to show that with high probability <img alt="1-1/|G|^{\Omega (1)}" class="latex" src="https://s0.wp.com/latex.php?latex=1-1%2F%7CG%7C%5E%7B%5COmega+%281%29%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="1-1/|G|^{\Omega (1)}"/> over <img alt="x'" class="latex" src="https://s0.wp.com/latex.php?latex=x%27&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x'"/> and <img alt="x" class="latex" src="https://s0.wp.com/latex.php?latex=x&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x"/>, the distribution of <img alt="C(x')C(x^{-1})" class="latex" src="https://s0.wp.com/latex.php?latex=C%28x%27%29C%28x%5E%7B-1%7D%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="C(x')C(x^{-1})"/>, over the choice of the two independent conjugates, has statistical distance <img alt="\le 1/|G|^{\Omega (1)}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cle+1%2F%7CG%7C%5E%7B%5COmega+%281%29%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\le 1/|G|^{\Omega (1)}"/> from uniform.</p>
<h4 class="subsectionHead"><span class="titlemark">3.2 </span> <a id="x1-50003.2"/>Step 2</h4>
<p style="text-align: justify;">In this step we use information on the conjugacy classes of the group to reduce the latter task to one about the equidistribution of the trace map. Let <img alt="Tr" class="latex" src="https://s0.wp.com/latex.php?latex=Tr&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="Tr"/> be the Trace map:</p>
<div style="text-align: center;"><img alt="\begin{aligned} Tr\begin {pmatrix}a_{1} &amp; a_{2}\\ a_{3} &amp; a_{4} \end {pmatrix}=a_{1}+a_{4}. \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+Tr%5Cbegin+%7Bpmatrix%7Da_%7B1%7D+%26+a_%7B2%7D%5C%5C+a_%7B3%7D+%26+a_%7B4%7D+%5Cend+%7Bpmatrix%7D%3Da_%7B1%7D%2Ba_%7B4%7D.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} Tr\begin {pmatrix}a_{1} &amp; a_{2}\\ a_{3} &amp; a_{4} \end {pmatrix}=a_{1}+a_{4}. \end{aligned}"/></div>
<p style="text-align: justify;">We state the lemma that we want to show.</p>
<div class="newtheorem">
<p style="text-align: justify;"><span class="head"> <a id="x1-5001r5"/> Lemma 5. </span>Let <img alt="a:=\begin {pmatrix}0 &amp; 1\\ 1 &amp; w \end {pmatrix}" class="latex" src="https://s0.wp.com/latex.php?latex=a%3A%3D%5Cbegin+%7Bpmatrix%7D0+%26+1%5C%5C+1+%26+w+%5Cend+%7Bpmatrix%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="a:=\begin {pmatrix}0 &amp; 1\\ 1 &amp; w \end {pmatrix}"/> and <img alt="b:=\begin {pmatrix}v &amp; 1\\ 1 &amp; 0 \end {pmatrix}" class="latex" src="https://s0.wp.com/latex.php?latex=b%3A%3D%5Cbegin+%7Bpmatrix%7Dv+%26+1%5C%5C+1+%26+0+%5Cend+%7Bpmatrix%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="b:=\begin {pmatrix}v &amp; 1\\ 1 &amp; 0 \end {pmatrix}"/>. For all but <img alt="O(1)" class="latex" src="https://s0.wp.com/latex.php?latex=O%281%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="O(1)"/> values of <img alt="w\in \mathbb{F} _{q}" class="latex" src="https://s0.wp.com/latex.php?latex=w%5Cin+%5Cmathbb%7BF%7D+_%7Bq%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="w\in \mathbb{F} _{q}"/> and <img alt="v\in \mathbb{F} _{q}" class="latex" src="https://s0.wp.com/latex.php?latex=v%5Cin+%5Cmathbb%7BF%7D+_%7Bq%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="v\in \mathbb{F} _{q}"/>, the distribution of</p>
<div style="text-align: center;"><img alt="\begin{aligned} Tr\left (au^{-1}bu\right ) \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+Tr%5Cleft+%28au%5E%7B-1%7Dbu%5Cright+%29+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} Tr\left (au^{-1}bu\right ) \end{aligned}"/></div>
<p>is <img alt="O(1/q)" class="latex" src="https://s0.wp.com/latex.php?latex=O%281%2Fq%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="O(1/q)"/> close to uniform over <img alt="\mathbb{F} _{q}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathbb%7BF%7D+_%7Bq%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\mathbb{F} _{q}"/> in statistical distance.</p>
<p style="text-align: justify;">
</p></div>
<p style="text-align: justify;">To give some context, in <img alt="SL(2,q)" class="latex" src="https://s0.wp.com/latex.php?latex=SL%282%2Cq%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="SL(2,q)"/> the conjugacy class of an element is essentially determined by the trace. Moreover, we can think of <img alt="a" class="latex" src="https://s0.wp.com/latex.php?latex=a&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="a"/> and <img alt="b" class="latex" src="https://s0.wp.com/latex.php?latex=b&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="b"/> as generic elements in <img alt="G" class="latex" src="https://s0.wp.com/latex.php?latex=G&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="G"/>. So the lemma can be interpreted as saying that for typical <img alt="a,b\in G" class="latex" src="https://s0.wp.com/latex.php?latex=a%2Cb%5Cin+G&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="a,b\in G"/>, taking a uniform element from the conjugacy class of <img alt="b" class="latex" src="https://s0.wp.com/latex.php?latex=b&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="b"/> and multiplying it by <img alt="a" class="latex" src="https://s0.wp.com/latex.php?latex=a&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="a"/> yields an element whose conjugacy class is uniform among the classes of <img alt="G" class="latex" src="https://s0.wp.com/latex.php?latex=G&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="G"/>. Using that essentially all conjugacy classes are equal, and some of the properties of the trace map, one can show that the above lemma implies that for typical <img alt="x,x'" class="latex" src="https://s0.wp.com/latex.php?latex=x%2Cx%27&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x,x'"/> the distribution of <img alt="C(x')C(x^{-1})" class="latex" src="https://s0.wp.com/latex.php?latex=C%28x%27%29C%28x%5E%7B-1%7D%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="C(x')C(x^{-1})"/> is close to uniform. For more on how this fits we refer the reader to <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#XGowersV-cc-int-journal">GVa</a>]</span>.</p>
<h4 class="subsectionHead"><span class="titlemark">3.3 </span> <a id="x1-60003.3"/>Step 3</h4>
<p style="text-align: justify;">We now present a proof of Lemma <a href="https://emanueleviola.wordpress.com/feed/#x1-5001r5">5<!--tex4ht:ref: lem:trace --></a>. The high-level argument of the proof is the same as in <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#XGowersV-cc-int-journal">GVa</a>]</span> (Lemma 5.5), but the details may be more accessible and in particular the use of the Lang-Weil theorem <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#XLangWeil54">LW54</a>]</span> from algebraic geometry is replaced by a more elementary argument. For simplicity we shall only cover the case where <img alt="q" class="latex" src="https://s0.wp.com/latex.php?latex=q&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="q"/> is prime. We will show that for all but <img alt="O(1)" class="latex" src="https://s0.wp.com/latex.php?latex=O%281%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="O(1)"/> values of <img alt="v,w,c\in \mathbb{F} _{q}" class="latex" src="https://s0.wp.com/latex.php?latex=v%2Cw%2Cc%5Cin+%5Cmathbb%7BF%7D+_%7Bq%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="v,w,c\in \mathbb{F} _{q}"/>, the probability over <img alt="u" class="latex" src="https://s0.wp.com/latex.php?latex=u&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="u"/> that <img alt="Tr(au^{-1}bu)=c" class="latex" src="https://s0.wp.com/latex.php?latex=Tr%28au%5E%7B-1%7Dbu%29%3Dc&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="Tr(au^{-1}bu)=c"/> is within <img alt="O(1/q^{2})" class="latex" src="https://s0.wp.com/latex.php?latex=O%281%2Fq%5E%7B2%7D%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="O(1/q^{2})"/> of <img alt="1/q" class="latex" src="https://s0.wp.com/latex.php?latex=1%2Fq&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="1/q"/>, and for the others it is at most <img alt="O(1/q)" class="latex" src="https://s0.wp.com/latex.php?latex=O%281%2Fq%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="O(1/q)"/>. Summing over <img alt="c" class="latex" src="https://s0.wp.com/latex.php?latex=c&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="c"/> gives the result.</p>
<p style="text-align: justify;">We shall consider elements <img alt="b" class="latex" src="https://s0.wp.com/latex.php?latex=b&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="b"/> whose trace is unique to the conjugacy class of <img alt="b" class="latex" src="https://s0.wp.com/latex.php?latex=b&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="b"/>. (This holds for all but <img alt="O(1)" class="latex" src="https://s0.wp.com/latex.php?latex=O%281%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="O(1)"/> conjugacy classes – see for example <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#XGowersV-cc-int-journal">GVa</a>]</span> for details.) This means that the distribution of <img alt="u^{-1}bu" class="latex" src="https://s0.wp.com/latex.php?latex=u%5E%7B-1%7Dbu&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="u^{-1}bu"/> is that of a uniform element in <img alt="G" class="latex" src="https://s0.wp.com/latex.php?latex=G&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="G"/> conditioned on having trace <img alt="b" class="latex" src="https://s0.wp.com/latex.php?latex=b&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="b"/>. Hence, we can write the probability that <img alt="Tr(au^{-1}bu)=c" class="latex" src="https://s0.wp.com/latex.php?latex=Tr%28au%5E%7B-1%7Dbu%29%3Dc&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="Tr(au^{-1}bu)=c"/> as the number of solutions in <img alt="x" class="latex" src="https://s0.wp.com/latex.php?latex=x&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x"/> to the following three equations (divided by the size of the group, which is <img alt="q^{3}-q" class="latex" src="https://s0.wp.com/latex.php?latex=q%5E%7B3%7D-q&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="q^{3}-q"/>):</p>
<div style="text-align: center;"><img alt="\begin{aligned} x_{3}+x_{2}+wx_{4} &amp; =c &amp; \hspace {1cm}(Tr(ax)=c),\\ x_{1}+x_{4} &amp; =v &amp; \hspace {1cm}(Tr(x)=Tr(b)),\\ x_{1}x_{4}-x_{3}x_{3} &amp; =1 &amp; \hspace {1cm}(Det(x)=1). \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+x_%7B3%7D%2Bx_%7B2%7D%2Bwx_%7B4%7D+%26+%3Dc+%26+%5Chspace+%7B1cm%7D%28Tr%28ax%29%3Dc%29%2C%5C%5C+x_%7B1%7D%2Bx_%7B4%7D+%26+%3Dv+%26+%5Chspace+%7B1cm%7D%28Tr%28x%29%3DTr%28b%29%29%2C%5C%5C+x_%7B1%7Dx_%7B4%7D-x_%7B3%7Dx_%7B3%7D+%26+%3D1+%26+%5Chspace+%7B1cm%7D%28Det%28x%29%3D1%29.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} x_{3}+x_{2}+wx_{4} &amp; =c &amp; \hspace {1cm}(Tr(ax)=c),\\ x_{1}+x_{4} &amp; =v &amp; \hspace {1cm}(Tr(x)=Tr(b)),\\ x_{1}x_{4}-x_{3}x_{3} &amp; =1 &amp; \hspace {1cm}(Det(x)=1). \end{aligned}"/></div>
<p style="text-align: justify;">We use the second one to remove <img alt="x_{1}" class="latex" src="https://s0.wp.com/latex.php?latex=x_%7B1%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x_{1}"/> and the first one to remove <img alt="x_{2}" class="latex" src="https://s0.wp.com/latex.php?latex=x_%7B2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x_{2}"/> from the last equation. This gives</p>
<div style="text-align: center;"><img alt="\begin{aligned} (v-x_{4})x_{4}-(c-x_{3}-wx_{4})x_{3}=1. \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%28v-x_%7B4%7D%29x_%7B4%7D-%28c-x_%7B3%7D-wx_%7B4%7D%29x_%7B3%7D%3D1.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} (v-x_{4})x_{4}-(c-x_{3}-wx_{4})x_{3}=1. \end{aligned}"/></div>
<p style="text-align: justify;">This is an equation in two variables. Write <img alt="x=x_{3}" class="latex" src="https://s0.wp.com/latex.php?latex=x%3Dx_%7B3%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x=x_{3}"/> and <img alt="y=x_{4}" class="latex" src="https://s0.wp.com/latex.php?latex=y%3Dx_%7B4%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="y=x_{4}"/> and use distributivity to rewrite the equation as</p>
<div style="text-align: center;"><img alt="\begin{aligned} -y^{2}+vy-cx+x^{2}+wxy=1. \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+-y%5E%7B2%7D%2Bvy-cx%2Bx%5E%7B2%7D%2Bwxy%3D1.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} -y^{2}+vy-cx+x^{2}+wxy=1. \end{aligned}"/></div>
<p style="text-align: justify;">At least since Lagrange it has been known how to reduce this to a Pell equation <img alt="x^{2}+dy^{2}=e" class="latex" src="https://s0.wp.com/latex.php?latex=x%5E%7B2%7D%2Bdy%5E%7B2%7D%3De&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x^{2}+dy^{2}=e"/>. This is done by applying an invertible affine transformation, which does not change the number of solutions. First set <img alt="x=x-wy/2" class="latex" src="https://s0.wp.com/latex.php?latex=x%3Dx-wy%2F2&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x=x-wy/2"/>. Then the equation becomes</p>
<div style="text-align: center;"><img alt="\begin{aligned} -y^{2}+vy-c(x-wy/2)+(x-wy/2)^{2}+w(x-wy/2)y=1. \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+-y%5E%7B2%7D%2Bvy-c%28x-wy%2F2%29%2B%28x-wy%2F2%29%5E%7B2%7D%2Bw%28x-wy%2F2%29y%3D1.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} -y^{2}+vy-c(x-wy/2)+(x-wy/2)^{2}+w(x-wy/2)y=1. \end{aligned}"/></div>
<p style="text-align: justify;">Equivalently, the cross-term has disappeared and we have</p>
<div style="text-align: center;"><img alt="\begin{aligned} y^{2}(-1-w^{2}/4)+y(v+cw/2)+x^{2}-cx=1. \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+y%5E%7B2%7D%28-1-w%5E%7B2%7D%2F4%29%2By%28v%2Bcw%2F2%29%2Bx%5E%7B2%7D-cx%3D1.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} y^{2}(-1-w^{2}/4)+y(v+cw/2)+x^{2}-cx=1. \end{aligned}"/></div>
<p style="text-align: justify;">Now one can add constants to <img alt="x" class="latex" src="https://s0.wp.com/latex.php?latex=x&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x"/> and <img alt="y" class="latex" src="https://s0.wp.com/latex.php?latex=y&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="y"/> to remove the linear terms, changing the constant term. Specifically, let <img alt="h:=(v+cw/2)/2" class="latex" src="https://s0.wp.com/latex.php?latex=h%3A%3D%28v%2Bcw%2F2%29%2F2&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h:=(v+cw/2)/2"/> and set <img alt="y=y-h" class="latex" src="https://s0.wp.com/latex.php?latex=y%3Dy-h&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="y=y-h"/> and <img alt="x=x+c/2" class="latex" src="https://s0.wp.com/latex.php?latex=x%3Dx%2Bc%2F2&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x=x+c/2"/>. The equation becomes</p>
<div style="text-align: center;"><img alt="\begin{aligned} (y-h)^{2}(-1-w^{2}/4)+(y-h)2h+(x+c/2)^{2}-c(x+c/2)=1. \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%28y-h%29%5E%7B2%7D%28-1-w%5E%7B2%7D%2F4%29%2B%28y-h%292h%2B%28x%2Bc%2F2%29%5E%7B2%7D-c%28x%2Bc%2F2%29%3D1.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} (y-h)^{2}(-1-w^{2}/4)+(y-h)2h+(x+c/2)^{2}-c(x+c/2)=1. \end{aligned}"/></div>
<p style="text-align: justify;">The linear terms disappear, the coefficients of <img alt="x^{2}" class="latex" src="https://s0.wp.com/latex.php?latex=x%5E%7B2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x^{2}"/> and <img alt="y^{2}" class="latex" src="https://s0.wp.com/latex.php?latex=y%5E%7B2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="y^{2}"/> do not change and the equation can be rewritten as</p>
<div style="text-align: center;"><img alt="\begin{aligned} y^{2}(-1-w^{2}/4)+h^{2}(-1-w^{2}/4)-2h^{2}+x^{2}+(c/2)^{2}-c^{2}/2=1. \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+y%5E%7B2%7D%28-1-w%5E%7B2%7D%2F4%29%2Bh%5E%7B2%7D%28-1-w%5E%7B2%7D%2F4%29-2h%5E%7B2%7D%2Bx%5E%7B2%7D%2B%28c%2F2%29%5E%7B2%7D-c%5E%7B2%7D%2F2%3D1.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} y^{2}(-1-w^{2}/4)+h^{2}(-1-w^{2}/4)-2h^{2}+x^{2}+(c/2)^{2}-c^{2}/2=1. \end{aligned}"/></div>
<p style="text-align: justify;">So this is now a Pell equation</p>
<div style="text-align: center;"><img alt="\begin{aligned} x^{2}+dy^{2}=e \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+x%5E%7B2%7D%2Bdy%5E%7B2%7D%3De+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} x^{2}+dy^{2}=e \end{aligned}"/></div>
<p style="text-align: justify;">where <img alt="d:=(-1-w^{2}/4)" class="latex" src="https://s0.wp.com/latex.php?latex=d%3A%3D%28-1-w%5E%7B2%7D%2F4%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="d:=(-1-w^{2}/4)"/> and</p>
<div style="text-align: center;"><img alt="\begin{aligned} e:=1+h^{2}(3+w^{2}/4)+(c/2)^{2}=1+(v^{2}+(cw/2)^{2}+cvw)(1/4)(3+w^{2}/4)+(c/2)^{2}. \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+e%3A%3D1%2Bh%5E%7B2%7D%283%2Bw%5E%7B2%7D%2F4%29%2B%28c%2F2%29%5E%7B2%7D%3D1%2B%28v%5E%7B2%7D%2B%28cw%2F2%29%5E%7B2%7D%2Bcvw%29%281%2F4%29%283%2Bw%5E%7B2%7D%2F4%29%2B%28c%2F2%29%5E%7B2%7D.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} e:=1+h^{2}(3+w^{2}/4)+(c/2)^{2}=1+(v^{2}+(cw/2)^{2}+cvw)(1/4)(3+w^{2}/4)+(c/2)^{2}. \end{aligned}"/></div>
<p style="text-align: justify;">For all but <img alt="O(1)" class="latex" src="https://s0.wp.com/latex.php?latex=O%281%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="O(1)"/> values of <img alt="w" class="latex" src="https://s0.wp.com/latex.php?latex=w&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="w"/> we have that <img alt="d" class="latex" src="https://s0.wp.com/latex.php?latex=d&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="d"/> is non-zero. Moreover, for all but <img alt="O(1)" class="latex" src="https://s0.wp.com/latex.php?latex=O%281%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="O(1)"/> values of <img alt="v,w" class="latex" src="https://s0.wp.com/latex.php?latex=v%2Cw&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="v,w"/> the term <img alt="e" class="latex" src="https://s0.wp.com/latex.php?latex=e&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="e"/> is a non-zero polynomial in <img alt="c" class="latex" src="https://s0.wp.com/latex.php?latex=c&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="c"/>. (Specifically, for any <img alt="v\ne 0" class="latex" src="https://s0.wp.com/latex.php?latex=v%5Cne+0&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="v\ne 0"/> and any <img alt="w" class="latex" src="https://s0.wp.com/latex.php?latex=w&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="w"/> such that <img alt="3+w^{2}/4\ne 0" class="latex" src="https://s0.wp.com/latex.php?latex=3%2Bw%5E%7B2%7D%2F4%5Cne+0&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="3+w^{2}/4\ne 0"/>.) So we only consider the values of <img alt="c" class="latex" src="https://s0.wp.com/latex.php?latex=c&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="c"/> that make it non-zero. Those where <img alt="e=0" class="latex" src="https://s0.wp.com/latex.php?latex=e%3D0&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="e=0"/> give <img alt="O(q)" class="latex" src="https://s0.wp.com/latex.php?latex=O%28q%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="O(q)"/> solutions, which is fine. We conclude with the following lemma.</p>
<div class="newtheorem">
<p style="text-align: justify;"><span class="head"> <a id="x1-6001r6"/> Lemma 6. </span>For <img alt="d" class="latex" src="https://s0.wp.com/latex.php?latex=d&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="d"/> and <img alt="e" class="latex" src="https://s0.wp.com/latex.php?latex=e&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="e"/> non-zero, and prime <img alt="q" class="latex" src="https://s0.wp.com/latex.php?latex=q&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="q"/>, the number of solutions over <img alt="\mathbb{F} _{q}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathbb%7BF%7D+_%7Bq%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\mathbb{F} _{q}"/> to the Pell equation</p>
<div style="text-align: center;"><img alt="\begin{aligned} x^{2}+dy^{2}=e \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+x%5E%7B2%7D%2Bdy%5E%7B2%7D%3De+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} x^{2}+dy^{2}=e \end{aligned}"/></div>
<p style="text-align: justify;">is within <img alt="O(1)" class="latex" src="https://s0.wp.com/latex.php?latex=O%281%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="O(1)"/> of <img alt="q" class="latex" src="https://s0.wp.com/latex.php?latex=q&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="q"/>.</p>
<p style="text-align: justify;">
</p></div>
<p style="text-align: justify;">This is a basic result from algebraic geometry that can be proved from first principles.</p>
<div class="proof">
<p style="text-align: justify;"><span class="head"> Proof. </span>If <img alt="d=-f^{2}" class="latex" src="https://s0.wp.com/latex.php?latex=d%3D-f%5E%7B2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="d=-f^{2}"/> for some <img alt="f\in \mathbb{F} _{q}" class="latex" src="https://s0.wp.com/latex.php?latex=f%5Cin+%5Cmathbb%7BF%7D+_%7Bq%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="f\in \mathbb{F} _{q}"/>, then we can replace <img alt="y" class="latex" src="https://s0.wp.com/latex.php?latex=y&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="y"/> with <img alt="fy" class="latex" src="https://s0.wp.com/latex.php?latex=fy&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="fy"/> and we can count instead the solutions to the equation</p>
<div style="text-align: center;"><img alt="\begin{aligned} x^{2}-y^{2}=e. \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+x%5E%7B2%7D-y%5E%7B2%7D%3De.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} x^{2}-y^{2}=e. \end{aligned}"/></div>
<p style="text-align: justify;">Because <img alt="x^{2}-y^{2}=(x-y)(x+y)" class="latex" src="https://s0.wp.com/latex.php?latex=x%5E%7B2%7D-y%5E%7B2%7D%3D%28x-y%29%28x%2By%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x^{2}-y^{2}=(x-y)(x+y)"/> we can set <img alt="x':=x-y" class="latex" src="https://s0.wp.com/latex.php?latex=x%27%3A%3Dx-y&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x':=x-y"/> and <img alt="y':=x+y" class="latex" src="https://s0.wp.com/latex.php?latex=y%27%3A%3Dx%2By&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="y':=x+y"/>, which preserves the number of solutions, and rewrite the equation as</p>
<div style="text-align: center;"><img alt="\begin{aligned} x'y'=e. \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+x%27y%27%3De.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} x'y'=e. \end{aligned}"/></div>
<p style="text-align: justify;">Because <img alt="e\ne 0" class="latex" src="https://s0.wp.com/latex.php?latex=e%5Cne+0&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="e\ne 0"/>, this has <img alt="q-1" class="latex" src="https://s0.wp.com/latex.php?latex=q-1&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="q-1"/> solutions: for every non-zero <img alt="y'" class="latex" src="https://s0.wp.com/latex.php?latex=y%27&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="y'"/> we have <img alt="x'=e/y'" class="latex" src="https://s0.wp.com/latex.php?latex=x%27%3De%2Fy%27&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x'=e/y'"/>.</p>
<p style="text-align: justify;">So now we can assume that <img alt="d\ne -f^{2}" class="latex" src="https://s0.wp.com/latex.php?latex=d%5Cne+-f%5E%7B2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="d\ne -f^{2}"/> for any <img alt="f\in \mathbb{F} _{q}" class="latex" src="https://s0.wp.com/latex.php?latex=f%5Cin+%5Cmathbb%7BF%7D+_%7Bq%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="f\in \mathbb{F} _{q}"/>. Because the number of squares is <img alt="(q+1)/2" class="latex" src="https://s0.wp.com/latex.php?latex=%28q%2B1%29%2F2&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="(q+1)/2"/>, the range of <img alt="x^{2}" class="latex" src="https://s0.wp.com/latex.php?latex=x%5E%7B2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x^{2}"/> has size <img alt="(q+1)/2" class="latex" src="https://s0.wp.com/latex.php?latex=%28q%2B1%29%2F2&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="(q+1)/2"/>. Similarly, the range of <img alt="e-dy^{2}" class="latex" src="https://s0.wp.com/latex.php?latex=e-dy%5E%7B2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="e-dy^{2}"/> also has size <img alt="(q+1)/2" class="latex" src="https://s0.wp.com/latex.php?latex=%28q%2B1%29%2F2&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="(q+1)/2"/>. Hence these two ranges intersect, and there is a solution <img alt="(a,b)" class="latex" src="https://s0.wp.com/latex.php?latex=%28a%2Cb%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="(a,b)"/>.</p>
<p style="text-align: justify;">We take a line passing through <img alt="(a,b)" class="latex" src="https://s0.wp.com/latex.php?latex=%28a%2Cb%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="(a,b)"/>: for parameters <img alt="s,t\in \mathbb{F} " class="latex" src="https://s0.wp.com/latex.php?latex=s%2Ct%5Cin+%5Cmathbb%7BF%7D+&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="s,t\in \mathbb{F} "/> we consider pairs <img alt="(a+t,b+st)" class="latex" src="https://s0.wp.com/latex.php?latex=%28a%2Bt%2Cb%2Bst%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="(a+t,b+st)"/>. There is a bijection between such pairs with <img alt="t\ne 0" class="latex" src="https://s0.wp.com/latex.php?latex=t%5Cne+0&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="t\ne 0"/> and the points <img alt="(x,y)" class="latex" src="https://s0.wp.com/latex.php?latex=%28x%2Cy%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="(x,y)"/> with <img alt="x\ne a" class="latex" src="https://s0.wp.com/latex.php?latex=x%5Cne+a&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x\ne a"/>. Because the number of solutions with <img alt="x=a" class="latex" src="https://s0.wp.com/latex.php?latex=x%3Da&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x=a"/> is <img alt="O(1)" class="latex" src="https://s0.wp.com/latex.php?latex=O%281%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="O(1)"/>, using that <img alt="d\ne 0" class="latex" src="https://s0.wp.com/latex.php?latex=d%5Cne+0&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="d\ne 0"/>, it suffices to count the solutions with <img alt="t\ne 0" class="latex" src="https://s0.wp.com/latex.php?latex=t%5Cne+0&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="t\ne 0"/>.</p>
<p style="text-align: justify;">The intuition is that this line has two intersections with the curve <img alt="x^{2}+dy^{2}=e" class="latex" src="https://s0.wp.com/latex.php?latex=x%5E%7B2%7D%2Bdy%5E%7B2%7D%3De&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x^{2}+dy^{2}=e"/>. Because one of them, <img alt="(a,b)" class="latex" src="https://s0.wp.com/latex.php?latex=%28a%2Cb%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="(a,b)"/>, lies in <img alt="\mathbb{F} _{q}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathbb%7BF%7D+_%7Bq%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\mathbb{F} _{q}"/>, the other has to lie as well there. Algebraically, we can plug the pair in the expression to obtain the equivalent equation</p>
<div style="text-align: center;"><img alt="\begin{aligned} a^{2}+t^{2}+2at+d(b^{2}+s^{2}t^{2}+2bst)=e. \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+a%5E%7B2%7D%2Bt%5E%7B2%7D%2B2at%2Bd%28b%5E%7B2%7D%2Bs%5E%7B2%7Dt%5E%7B2%7D%2B2bst%29%3De.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} a^{2}+t^{2}+2at+d(b^{2}+s^{2}t^{2}+2bst)=e. \end{aligned}"/></div>
<p style="text-align: justify;">Using that <img alt="(a,b)" class="latex" src="https://s0.wp.com/latex.php?latex=%28a%2Cb%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="(a,b)"/> is a solution this becomes</p>
<div style="text-align: center;"><img alt="\begin{aligned} t^{2}+2at+ds^{2}t^{2}+2dbst=0 \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+t%5E%7B2%7D%2B2at%2Bds%5E%7B2%7Dt%5E%7B2%7D%2B2dbst%3D0+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} t^{2}+2at+ds^{2}t^{2}+2dbst=0 \end{aligned}"/></div>
<p style="text-align: justify;">We can divide by <img alt="t\ne 0" class="latex" src="https://s0.wp.com/latex.php?latex=t%5Cne+0&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="t\ne 0"/>. Obtaining</p>
<div style="text-align: center;"><img alt="\begin{aligned} t(1+ds^{2})+2a+2dbs=0. \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+t%281%2Bds%5E%7B2%7D%29%2B2a%2B2dbs%3D0.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} t(1+ds^{2})+2a+2dbs=0. \end{aligned}"/></div>
<p style="text-align: justify;">We can now divide by <img alt="1+ds^{2}" class="latex" src="https://s0.wp.com/latex.php?latex=1%2Bds%5E%7B2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="1+ds^{2}"/> which is non-zero by the assumption <img alt="d\ne -f^{2}" class="latex" src="https://s0.wp.com/latex.php?latex=d%5Cne+-f%5E%7B2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="d\ne -f^{2}"/>. This yields</p>
<div style="text-align: center;"><img alt="\begin{aligned} t=(-2a-2dbs)/(1+ds^{2}). \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+t%3D%28-2a-2dbs%29%2F%281%2Bds%5E%7B2%7D%29.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} t=(-2a-2dbs)/(1+ds^{2}). \end{aligned}"/></div>
<p style="text-align: justify;">Hence for every value of <img alt="s" class="latex" src="https://s0.wp.com/latex.php?latex=s&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="s"/> there is a unique <img alt="t" class="latex" src="https://s0.wp.com/latex.php?latex=t&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="t"/> giving a solution. This gives <img alt="q" class="latex" src="https://s0.wp.com/latex.php?latex=q&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="q"/> solutions. <img alt="\square " class="latex" src="https://s0.wp.com/latex.php?latex=%5Csquare+&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\square "/></p>
</div>
<h3 class="sectionHead"><span class="titlemark">4 </span> <a id="x1-70004"/>Three parties, number-in-hand</h3>
<p style="text-align: justify;">In this section we consider the following three-party number-in-hand problem: Alice gets <img alt="x" class="latex" src="https://s0.wp.com/latex.php?latex=x&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x"/>, Bob gets <img alt="y" class="latex" src="https://s0.wp.com/latex.php?latex=y&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="y"/>, Charlie gets <img alt="z" class="latex" src="https://s0.wp.com/latex.php?latex=z&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="z"/>, and they want to know if <img alt="x\cdot y\cdot z=1_{G}" class="latex" src="https://s0.wp.com/latex.php?latex=x%5Ccdot+y%5Ccdot+z%3D1_%7BG%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x\cdot y\cdot z=1_{G}"/>. The communication depends on the group <img alt="G" class="latex" src="https://s0.wp.com/latex.php?latex=G&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="G"/>. We present next two efficient protocols for abelian groups, and then a communication lower bound for other groups.</p>
<h4 class="subsectionHead"><span class="titlemark">4.1 </span> <a id="x1-80004.1"/>A randomized protocol for the hypercube</h4>
<p style="text-align: justify;">We begin with the simplest setting. Let <img alt="G=(\mathbb {Z}_{2})^{n}" class="latex" src="https://s0.wp.com/latex.php?latex=G%3D%28%5Cmathbb+%7BZ%7D_%7B2%7D%29%5E%7Bn%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="G=(\mathbb {Z}_{2})^{n}"/>, that is <img alt="n" class="latex" src="https://s0.wp.com/latex.php?latex=n&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="n"/>-bit strings with bit-wise addition modulo 2. The parties want to check if <img alt="x+y+z=0^{n}" class="latex" src="https://s0.wp.com/latex.php?latex=x%2By%2Bz%3D0%5E%7Bn%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x+y+z=0^{n}"/>. They can do so as follows. First, they pick a hash function <img alt="h" class="latex" src="https://s0.wp.com/latex.php?latex=h&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h"/> that is linear: <img alt="h(x+y)=h(x)+h(y)" class="latex" src="https://s0.wp.com/latex.php?latex=h%28x%2By%29%3Dh%28x%29%2Bh%28y%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h(x+y)=h(x)+h(y)"/>. Specifically, for a uniformly random <img alt="a\in \{0,1\}^{n}" class="latex" src="https://s0.wp.com/latex.php?latex=a%5Cin+%5C%7B0%2C1%5C%7D%5E%7Bn%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="a\in \{0,1\}^{n}"/> define <img alt="h_{a}(x):=\sum a_{i}x_{i}\mod 2" class="latex" src="https://s0.wp.com/latex.php?latex=h_%7Ba%7D%28x%29%3A%3D%5Csum+a_%7Bi%7Dx_%7Bi%7D%5Cmod+2&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h_{a}(x):=\sum a_{i}x_{i}\mod 2"/>. Then, the protocol is as follows.</p>
<ul class="itemize1">
<li class="itemize">Alice sends <img alt="h_{a}(x)" class="latex" src="https://s0.wp.com/latex.php?latex=h_%7Ba%7D%28x%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h_{a}(x)"/>,</li>
<li class="itemize">Bob send <img alt="h_{a}(y)" class="latex" src="https://s0.wp.com/latex.php?latex=h_%7Ba%7D%28y%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h_{a}(y)"/>,</li>
<li class="itemize">Charlie accepts if and only if <img alt="h_{a}(x)+h_{a}(y)+h_{a}(z)=0s" class="latex" src="https://s0.wp.com/latex.php?latex=h_%7Ba%7D%28x%29%2Bh_%7Ba%7D%28y%29%2Bh_%7Ba%7D%28z%29%3D0s&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h_{a}(x)+h_{a}(y)+h_{a}(z)=0s"/>.</li>
</ul>
<p style="text-align: justify;">The hash function outputs 1 bit, so the communication is constant. By linearity, the protocol accepts iff <img alt="h_{a}(x+y+z)=0" class="latex" src="https://s0.wp.com/latex.php?latex=h_%7Ba%7D%28x%2By%2Bz%29%3D0&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h_{a}(x+y+z)=0"/>. If <img alt="x+y+z=0" class="latex" src="https://s0.wp.com/latex.php?latex=x%2By%2Bz%3D0&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x+y+z=0"/> this is always the case, otherwise it happens with probability <img alt="1/2" class="latex" src="https://s0.wp.com/latex.php?latex=1%2F2&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="1/2"/>.</p>
<h4 class="subsectionHead"><span class="titlemark">4.2 </span> <a id="x1-90004.2"/>A randomized protocol for <img alt="\mathbb {Z}_{N}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BZ%7D_%7BN%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\mathbb {Z}_{N}"/></h4>
<p style="text-align: justify;">This protocol is from <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#XViola-ccsum">Vio14</a>]</span>. For simplicity we only consider the case <img alt="N=2^{n}" class="latex" src="https://s0.wp.com/latex.php?latex=N%3D2%5E%7Bn%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="N=2^{n}"/> here – the protocol for general <img alt="N" class="latex" src="https://s0.wp.com/latex.php?latex=N&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="N"/> is in <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#XViola-ccsum">Vio14</a>]</span>. Again, the parties want to check if <img alt="x+y+z=0\mod N" class="latex" src="https://s0.wp.com/latex.php?latex=x%2By%2Bz%3D0%5Cmod+N&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x+y+z=0\mod N"/>. For this group, there is no 100% linear hash function but there are almost linear hash functions <img alt="h:\mathbb {Z}_{N}\rightarrow \mathbb {Z}_{2^{\ell }}" class="latex" src="https://s0.wp.com/latex.php?latex=h%3A%5Cmathbb+%7BZ%7D_%7BN%7D%5Crightarrow+%5Cmathbb+%7BZ%7D_%7B2%5E%7B%5Cell+%7D%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h:\mathbb {Z}_{N}\rightarrow \mathbb {Z}_{2^{\ell }}"/> that satisfy the following properties. Note that the inputs to <img alt="h" class="latex" src="https://s0.wp.com/latex.php?latex=h&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h"/> are interpreted modulo <img alt="N" class="latex" src="https://s0.wp.com/latex.php?latex=N&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="N"/> and the outputs modulo <img alt="2^{\ell }" class="latex" src="https://s0.wp.com/latex.php?latex=2%5E%7B%5Cell+%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="2^{\ell }"/>.</p>
<ol class="enumerate1">
<li class="enumerate" id="x1-9002x1">for all <img alt="a,x,y" class="latex" src="https://s0.wp.com/latex.php?latex=a%2Cx%2Cy&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="a,x,y"/> there is <img alt="c\in \{0,1\}" class="latex" src="https://s0.wp.com/latex.php?latex=c%5Cin+%5C%7B0%2C1%5C%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="c\in \{0,1\}"/> such that <img alt="h_{a}(x+y)=h_{a}(x)+h_{a}(y)+c" class="latex" src="https://s0.wp.com/latex.php?latex=h_%7Ba%7D%28x%2By%29%3Dh_%7Ba%7D%28x%29%2Bh_%7Ba%7D%28y%29%2Bc&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h_{a}(x+y)=h_{a}(x)+h_{a}(y)+c"/>,</li>
<li class="enumerate" id="x1-9004x2">for all <img alt="x\neq 0" class="latex" src="https://s0.wp.com/latex.php?latex=x%5Cneq+0&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x\neq 0"/> we have <img alt="\mathbb{P} _{a}[h_{a}(x)\in \{-2,-1,0,1,2\}]\leq O(1/2^{\ell })" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathbb%7BP%7D+_%7Ba%7D%5Bh_%7Ba%7D%28x%29%5Cin+%5C%7B-2%2C-1%2C0%2C1%2C2%5C%7D%5D%5Cleq+O%281%2F2%5E%7B%5Cell+%7D%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\mathbb{P} _{a}[h_{a}(x)\in \{-2,-1,0,1,2\}]\leq O(1/2^{\ell })"/>,</li>
<li class="enumerate" id="x1-9006x3"><img alt="h_{a}(0)=0" class="latex" src="https://s0.wp.com/latex.php?latex=h_%7Ba%7D%280%29%3D0&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h_{a}(0)=0"/>.</li>
</ol>
<p style="text-align: justify;">Assuming some random hash function <img alt="h" class="latex" src="https://s0.wp.com/latex.php?latex=h&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h"/> that satisfies the above properties the protocol works similarly to the previous one:</p>
<ul class="itemize1">
<li class="itemize">Alice sends <img alt="h_{a}(x)" class="latex" src="https://s0.wp.com/latex.php?latex=h_%7Ba%7D%28x%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h_{a}(x)"/>,</li>
<li class="itemize">Bob sends <img alt="h_{a}(y)" class="latex" src="https://s0.wp.com/latex.php?latex=h_%7Ba%7D%28y%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h_{a}(y)"/>,</li>
<li class="itemize">Charlie accepts if and only if <img alt="h_{a}(x)+h_{a}(y)+h_{a}(z)\in \{-2,-1,0\}" class="latex" src="https://s0.wp.com/latex.php?latex=h_%7Ba%7D%28x%29%2Bh_%7Ba%7D%28y%29%2Bh_%7Ba%7D%28z%29%5Cin+%5C%7B-2%2C-1%2C0%5C%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h_{a}(x)+h_{a}(y)+h_{a}(z)\in \{-2,-1,0\}"/>.</li>
</ul>
<p style="text-align: justify;">We can set <img alt="\ell =O(1)" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cell+%3DO%281%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\ell =O(1)"/> to achieve constant communication and constant error.</p>
<p style="text-align: justify;">To prove correctness of the protocol, first note that <img alt="h_{a}(x)+h_{a}(y)+h_{a}(z)=h_{a}(x+y+z)-c" class="latex" src="https://s0.wp.com/latex.php?latex=h_%7Ba%7D%28x%29%2Bh_%7Ba%7D%28y%29%2Bh_%7Ba%7D%28z%29%3Dh_%7Ba%7D%28x%2By%2Bz%29-c&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h_{a}(x)+h_{a}(y)+h_{a}(z)=h_{a}(x+y+z)-c"/> for some <img alt="c\in \{0,1,2\}" class="latex" src="https://s0.wp.com/latex.php?latex=c%5Cin+%5C%7B0%2C1%2C2%5C%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="c\in \{0,1,2\}"/>. Then consider the following two cases:</p>
<ul class="itemize1">
<li class="itemize">if <img alt="x+y+z=0" class="latex" src="https://s0.wp.com/latex.php?latex=x%2By%2Bz%3D0&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x+y+z=0"/> then <img alt="h_{a}(x+y+z)-c=h_{a}(0)-c=-c," class="latex" src="https://s0.wp.com/latex.php?latex=h_%7Ba%7D%28x%2By%2Bz%29-c%3Dh_%7Ba%7D%280%29-c%3D-c%2C&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h_{a}(x+y+z)-c=h_{a}(0)-c=-c,"/> and the protocol is always correct.</li>
<li class="itemize">if <img alt="x+y+z\neq 0" class="latex" src="https://s0.wp.com/latex.php?latex=x%2By%2Bz%5Cneq+0&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x+y+z\neq 0"/> then the probability that <img alt="h_{a}(x+y+z)-c\in \{-2,-1,0\}" class="latex" src="https://s0.wp.com/latex.php?latex=h_%7Ba%7D%28x%2By%2Bz%29-c%5Cin+%5C%7B-2%2C-1%2C0%5C%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h_{a}(x+y+z)-c\in \{-2,-1,0\}"/> for some <img alt="c\in \{0,1,2\}" class="latex" src="https://s0.wp.com/latex.php?latex=c%5Cin+%5C%7B0%2C1%2C2%5C%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="c\in \{0,1,2\}"/> is at most the probability that <img alt="h_{a}(x+y+z)\in \{-2,-1,0,1,2\}" class="latex" src="https://s0.wp.com/latex.php?latex=h_%7Ba%7D%28x%2By%2Bz%29%5Cin+%5C%7B-2%2C-1%2C0%2C1%2C2%5C%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h_{a}(x+y+z)\in \{-2,-1,0,1,2\}"/> which is <img alt="\leq 2^{-\Omega (\ell )}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cleq+2%5E%7B-%5COmega+%28%5Cell+%29%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\leq 2^{-\Omega (\ell )}"/>; so the protocol is correct with high probability.</li>
</ul>
<p style="text-align: justify;"><b>The hash function.</b>.</p>
<p style="text-align: justify;">For the hash function we can use a function analyzed in <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#XDietzfelbingerHKP97">DHKP97</a>]</span>. Let <img alt="a" class="latex" src="https://s0.wp.com/latex.php?latex=a&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="a"/> be a random odd number modulo <img alt="2^{n}" class="latex" src="https://s0.wp.com/latex.php?latex=2%5E%7Bn%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="2^{n}"/>. Define</p>
<div style="text-align: center;"><img alt="\begin{aligned} h_{a}(x):=(a\cdot x\gg n-\ell )\mod 2^{\ell } \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+h_%7Ba%7D%28x%29%3A%3D%28a%5Ccdot+x%5Cgg+n-%5Cell+%29%5Cmod+2%5E%7B%5Cell+%7D+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} h_{a}(x):=(a\cdot x\gg n-\ell )\mod 2^{\ell } \end{aligned}"/></div>
<p>where the product <img alt="a\cdot x" class="latex" src="https://s0.wp.com/latex.php?latex=a%5Ccdot+x&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="a\cdot x"/> is integer multiplication, and <img alt="\gg " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cgg+&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\gg "/> is bit-shift. In other words we output the bits <img alt="n-\ell +1,n-\ell +2,\ldots ,n" class="latex" src="https://s0.wp.com/latex.php?latex=n-%5Cell+%2B1%2Cn-%5Cell+%2B2%2C%5Cldots+%2Cn&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="n-\ell +1,n-\ell +2,\ldots ,n"/> of the integer product <img alt="a\cdot x" class="latex" src="https://s0.wp.com/latex.php?latex=a%5Ccdot+x&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="a\cdot x"/>.</p>
<p style="text-align: justify;">We now verify that the above hash function family satisfies the three properties we required above.</p>
<p style="text-align: justify;">Property (3) is trivially satisfied.</p>
<p style="text-align: justify;">For property (1) we have the following. Let <img alt="s=a\cdot x" class="latex" src="https://s0.wp.com/latex.php?latex=s%3Da%5Ccdot+x&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="s=a\cdot x"/> and <img alt="t=a\cdot y" class="latex" src="https://s0.wp.com/latex.php?latex=t%3Da%5Ccdot+y&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="t=a\cdot y"/> and <img alt="u=n-\ell " class="latex" src="https://s0.wp.com/latex.php?latex=u%3Dn-%5Cell+&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="u=n-\ell "/>. To recap, by definition we have:</p>
<ul class="itemize1">
<li class="itemize"><img alt="h_{a}(x+y)=((s+t)\gg u)\mod 2^{\ell }," class="latex" src="https://s0.wp.com/latex.php?latex=h_%7Ba%7D%28x%2By%29%3D%28%28s%2Bt%29%5Cgg+u%29%5Cmod+2%5E%7B%5Cell+%7D%2C&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h_{a}(x+y)=((s+t)\gg u)\mod 2^{\ell },"/></li>
<li class="itemize"><img alt="h_{a}(x)=(s\gg u)\mod 2^{\ell }" class="latex" src="https://s0.wp.com/latex.php?latex=h_%7Ba%7D%28x%29%3D%28s%5Cgg+u%29%5Cmod+2%5E%7B%5Cell+%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h_{a}(x)=(s\gg u)\mod 2^{\ell }"/>,</li>
<li class="itemize"><img alt="h_{a}(x)=(t\gg u)\mod 2^{\ell }" class="latex" src="https://s0.wp.com/latex.php?latex=h_%7Ba%7D%28x%29%3D%28t%5Cgg+u%29%5Cmod+2%5E%7B%5Cell+%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h_{a}(x)=(t\gg u)\mod 2^{\ell }"/>.</li>
</ul>
<p style="text-align: justify;">Notice that if in the addition <img alt="s+t" class="latex" src="https://s0.wp.com/latex.php?latex=s%2Bt&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="s+t"/> the carry into the <img alt="u+1" class="latex" src="https://s0.wp.com/latex.php?latex=u%2B1&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="u+1"/> bit is <img alt="0" class="latex" src="https://s0.wp.com/latex.php?latex=0&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="0"/>, then</p>
<div style="text-align: center;"><img alt="\begin{aligned} (s\gg u)+(t\gg u)=(s+t)\gg u \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%28s%5Cgg+u%29%2B%28t%5Cgg+u%29%3D%28s%2Bt%29%5Cgg+u+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} (s\gg u)+(t\gg u)=(s+t)\gg u \end{aligned}"/></div>
<p>otherwise</p>
<div style="text-align: center;"><img alt="\begin{aligned} (s\gg u)+(t\gg u)+1=(s+t)\gg u \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%28s%5Cgg+u%29%2B%28t%5Cgg+u%29%2B1%3D%28s%2Bt%29%5Cgg+u+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} (s\gg u)+(t\gg u)+1=(s+t)\gg u \end{aligned}"/></div>
<p>which concludes the proof for property (1).</p>
<p style="text-align: justify;">Finally, we prove property (2). We start by writing <img alt="x=s\cdot 2^{c}" class="latex" src="https://s0.wp.com/latex.php?latex=x%3Ds%5Ccdot+2%5E%7Bc%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x=s\cdot 2^{c}"/> where <img alt="s" class="latex" src="https://s0.wp.com/latex.php?latex=s&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="s"/> is odd. So the binary representation of <img alt="x" class="latex" src="https://s0.wp.com/latex.php?latex=x&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x"/> looks like</p>
<div style="text-align: center;"><img alt="\begin{aligned} (\cdots \cdots 1\underbrace {0\cdots 0}_{c~\textrm {bits}}). \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%28%5Ccdots+%5Ccdots+1%5Cunderbrace+%7B0%5Ccdots+0%7D_%7Bc%7E%5Ctextrm+%7Bbits%7D%7D%29.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} (\cdots \cdots 1\underbrace {0\cdots 0}_{c~\textrm {bits}}). \end{aligned}"/></div>
<p>The binary representation of the product <img alt="a\cdot x" class="latex" src="https://s0.wp.com/latex.php?latex=a%5Ccdot+x&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="a\cdot x"/> for a uniformly random <img alt="a" class="latex" src="https://s0.wp.com/latex.php?latex=a&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="a"/> looks like</p>
<div style="text-align: center;"><img alt="\begin{aligned} (\textit {uniform}~1\underbrace {0\cdots 0}_{c~\textrm {bits}}). \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%28%5Ctextit+%7Buniform%7D%7E1%5Cunderbrace+%7B0%5Ccdots+0%7D_%7Bc%7E%5Ctextrm+%7Bbits%7D%7D%29.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} (\textit {uniform}~1\underbrace {0\cdots 0}_{c~\textrm {bits}}). \end{aligned}"/></div>
<p>We consider the two following cases for the product <img alt="a\cdot x" class="latex" src="https://s0.wp.com/latex.php?latex=a%5Ccdot+x&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="a\cdot x"/>:</p>
<ol class="enumerate1">
<li class="enumerate" id="x1-9008x1">If <img alt="a\cdot x=(\underbrace {\textit {uniform}~1\overbrace {00}^{2~bits}}_{\ell ~bits}\cdots 0)" class="latex" src="https://s0.wp.com/latex.php?latex=a%5Ccdot+x%3D%28%5Cunderbrace+%7B%5Ctextit+%7Buniform%7D%7E1%5Coverbrace+%7B00%7D%5E%7B2%7Ebits%7D%7D_%7B%5Cell+%7Ebits%7D%5Ccdots+0%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="a\cdot x=(\underbrace {\textit {uniform}~1\overbrace {00}^{2~bits}}_{\ell ~bits}\cdots 0)"/>, or equivalently <img alt="c\geq n-\ell +2" class="latex" src="https://s0.wp.com/latex.php?latex=c%5Cgeq+n-%5Cell+%2B2&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="c\geq n-\ell +2"/>, the output never lands in the bad set <img alt="\{-2,-1,0,1,2\}" class="latex" src="https://s0.wp.com/latex.php?latex=%5C%7B-2%2C-1%2C0%2C1%2C2%5C%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\{-2,-1,0,1,2\}"/>;</li>
<li class="enumerate" id="x1-9010x2">Otherwise, the hash function output has <img alt="\ell -O(1)" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cell+-O%281%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\ell -O(1)"/> uniform bits. For any set <img alt="B" class="latex" src="https://s0.wp.com/latex.php?latex=B&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="B"/>, the probability that the output lands in <img alt="B" class="latex" src="https://s0.wp.com/latex.php?latex=B&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="B"/> is at most <img alt="|B|\cdot 2^{-\ell +O(1)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7CB%7C%5Ccdot+2%5E%7B-%5Cell+%2BO%281%29%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="|B|\cdot 2^{-\ell +O(1)}"/>.</li>
</ol>
<h4 class="subsectionHead"><span class="titlemark">4.3 </span> <a id="x1-100004.3"/>Quasirandom groups</h4>
<p style="text-align: justify;">What happens in other groups? The hash function used in the previous result was fairly non-trivial. Do we have an almost linear hash function for <img alt="2\times 2" class="latex" src="https://s0.wp.com/latex.php?latex=2%5Ctimes+2&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="2\times 2"/> matrices? The answer is negative. For <img alt="SL_{2}(q)" class="latex" src="https://s0.wp.com/latex.php?latex=SL_%7B2%7D%28q%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="SL_{2}(q)"/> and <img alt="A_{n}" class="latex" src="https://s0.wp.com/latex.php?latex=A_%7Bn%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="A_{n}"/> the problem is hard, even under the promise. For a group <img alt="G" class="latex" src="https://s0.wp.com/latex.php?latex=G&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="G"/> the complexity can be expressed in terms of a parameter <img alt="d" class="latex" src="https://s0.wp.com/latex.php?latex=d&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="d"/> which comes from representation theory. We will not formally define this parameter here, but several qualitatively equivalent formulations can be found in <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#XGowers08">Gow08</a>]</span>. Instead the following table shows the <img alt="d" class="latex" src="https://s0.wp.com/latex.php?latex=d&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="d"/>’s for the groups we’ve introduced.</p>
<div style="text-align: center;">
<div class="tabular">
<table cellpadding="0" cellspacing="0" class="tabular" id="TBL-1">
<colgroup id="TBL-1-1g">
<col id="TBL-1-1"/></colgroup>
<colgroup id="TBL-1-2g">
<col id="TBL-1-2"/></colgroup>
<colgroup id="TBL-1-3g">
<col id="TBL-1-3"/></colgroup>
<colgroup id="TBL-1-4g">
<col id="TBL-1-4"/></colgroup>
<colgroup id="TBL-1-5g">
<col id="TBL-1-5"/></colgroup>
<tbody>
<tr class="hline">
<td>
<hr/>
</td>
<td>
<hr/>
</td>
<td>
<hr/>
</td>
<td>
<hr/>
</td>
<td>
<hr/>
</td>
</tr>
<tr id="TBL-1-1-" style="vertical-align: baseline;">
<td class="td11" id="TBL-1-1-1" style="white-space: nowrap; text-align: center;"><img alt="G" class="latex" src="https://s0.wp.com/latex.php?latex=G&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="G"/></td>
<td class="td11" id="TBL-1-1-2" style="white-space: nowrap; text-align: center;">:</td>
<td class="td11" id="TBL-1-1-3" style="white-space: nowrap; text-align: center;">abelian</td>
<td class="td11" id="TBL-1-1-4" style="white-space: nowrap; text-align: center;"><img alt="A_{n}" class="latex" src="https://s0.wp.com/latex.php?latex=A_%7Bn%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="A_{n}"/></td>
<td class="td11" id="TBL-1-1-5" style="white-space: nowrap; text-align: center;"><img alt="SL_{2}(q)" class="latex" src="https://s0.wp.com/latex.php?latex=SL_%7B2%7D%28q%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="SL_{2}(q)"/></td>
</tr>
<tr class="hline">
<td>
<hr/>
</td>
<td>
<hr/>
</td>
<td>
<hr/>
</td>
<td>
<hr/>
</td>
<td>
<hr/>
</td>
</tr>
<tr id="TBL-1-2-" style="vertical-align: baseline;">
<td class="td11" id="TBL-1-2-1" style="white-space: nowrap; text-align: center;"><img alt="d" class="latex" src="https://s0.wp.com/latex.php?latex=d&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="d"/></td>
<td class="td11" id="TBL-1-2-2" style="white-space: nowrap; text-align: center;">:</td>
<td class="td11" id="TBL-1-2-3" style="white-space: nowrap; text-align: center;"><img alt="1" class="latex" src="https://s0.wp.com/latex.php?latex=1&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="1"/></td>
<td class="td11" id="TBL-1-2-4" style="white-space: nowrap; text-align: center;"><img alt="\Omega (\frac {\log |G|}{\log \log |G|})" class="latex" src="https://s0.wp.com/latex.php?latex=%5COmega+%28%5Cfrac+%7B%5Clog+%7CG%7C%7D%7B%5Clog+%5Clog+%7CG%7C%7D%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\Omega (\frac {\log |G|}{\log \log |G|})"/></td>
<td class="td11" id="TBL-1-2-5" style="white-space: nowrap; text-align: center;"><img alt="|G|^{\Omega (1)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7CG%7C%5E%7B%5COmega+%281%29%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="|G|^{\Omega (1)}"/></td>
</tr>
<tr class="hline">
<td>
<hr/>
</td>
<td>
<hr/>
</td>
<td>
<hr/>
</td>
<td>
<hr/>
</td>
<td>
<hr/>
</td>
</tr>
<tr id="TBL-1-3-" style="vertical-align: baseline;">
<td class="td11" id="TBL-1-3-1" style="white-space: nowrap; text-align: center;"/>
</tr>
</tbody>
</table>
</div>
<p>.</p>
</div>
<p> </p>
<p style="text-align: justify;"><b>Theorem 1.</b> Let <img alt="G" class="latex" src="https://s0.wp.com/latex.php?latex=G&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="G"/> be a group, and let <img alt="h\in G" class="latex" src="https://s0.wp.com/latex.php?latex=h%5Cin+G&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h\in G"/>. Let <img alt="d" class="latex" src="https://s0.wp.com/latex.php?latex=d&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="d"/> be the minimum dimension of any irreducible representation of <img alt="G" class="latex" src="https://s0.wp.com/latex.php?latex=G&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="G"/>. Suppose Alice, Bob, and Charlie receive <img alt="x" class="latex" src="https://s0.wp.com/latex.php?latex=x&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x"/>, y, and <img alt="z" class="latex" src="https://s0.wp.com/latex.php?latex=z&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="z"/> respectively. They are promised that <img alt="x\cdot y\cdot z" class="latex" src="https://s0.wp.com/latex.php?latex=x%5Ccdot+y%5Ccdot+z&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x\cdot y\cdot z"/> either equals <img alt="1_{G}" class="latex" src="https://s0.wp.com/latex.php?latex=1_%7BG%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="1_{G}"/> or <img alt="h" class="latex" src="https://s0.wp.com/latex.php?latex=h&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h"/>. Deciding which case it is requires randomized communication complexity <img alt="\Omega (\log d)" class="latex" src="https://s0.wp.com/latex.php?latex=%5COmega+%28%5Clog+d%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\Omega (\log d)"/>.</p>
<p style="text-align: justify;">This result is tight for the groups we have discussed so far. The arguments are the same as before. Specifically, for <img alt="SL_{2}(q)" class="latex" src="https://s0.wp.com/latex.php?latex=SL_%7B2%7D%28q%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="SL_{2}(q)"/> the communication is <img alt="\Omega (\log |G|)" class="latex" src="https://s0.wp.com/latex.php?latex=%5COmega+%28%5Clog+%7CG%7C%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\Omega (\log |G|)"/>. This is tight up to constants, because Alice and Bob can send their elements. For <img alt="A_{n}" class="latex" src="https://s0.wp.com/latex.php?latex=A_%7Bn%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="A_{n}"/> the communication is <img alt="\Omega (\log \log |G|)" class="latex" src="https://s0.wp.com/latex.php?latex=%5COmega+%28%5Clog+%5Clog+%7CG%7C%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\Omega (\log \log |G|)"/>. This is tight as well, as the parties can again just communicate the images of an element <img alt="a" class="latex" src="https://s0.wp.com/latex.php?latex=a&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="a"/> such that <img alt="h(a)\ne a" class="latex" src="https://s0.wp.com/latex.php?latex=h%28a%29%5Cne+a&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h(a)\ne a"/>, as discussed in Section <a href="https://emanueleviola.wordpress.com/feed/#x1-2002r1">1<!--tex4ht:ref: thm:GV-interleaved --></a>. This also gives a computational proof that <img alt="d" class="latex" src="https://s0.wp.com/latex.php?latex=d&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="d"/> cannot be too large for <img alt="A_{n}" class="latex" src="https://s0.wp.com/latex.php?latex=A_%7Bn%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="A_{n}"/>, i.e., it is at most <img alt="(\log |G|)^{O(1)}" class="latex" src="https://s0.wp.com/latex.php?latex=%28%5Clog+%7CG%7C%29%5E%7BO%281%29%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="(\log |G|)^{O(1)}"/>. For abelian groups we get nothing, matching the efficient protocols given above.</p>
<h3 class="sectionHead"><span class="titlemark">5 </span> <a id="x1-110005"/>Proof of Theorem 1</h3>
<p style="text-align: justify;">First we discuss several “mixing” lemmas for groups, then we come back to protocols and see how to apply one of them there.</p>
<h5 class="subsubsectionHead"><span class="titlemark">5.0.1 </span> <a id="x1-120005.0.1"/><img alt="XY" class="latex" src="https://s0.wp.com/latex.php?latex=XY&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="XY"/> mixing</h5>
<p style="text-align: justify;">We want to consider “high entropy” distributions over <img alt="G" class="latex" src="https://s0.wp.com/latex.php?latex=G&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="G"/>, and state a fact showing that the multiplication of two such distributions “mixes” or in other words increases the entropy. To define entropy we use the norms <img alt="\lVert A\rVert _{c}=\left (\sum _{x}A(x)^{c}\right )^{\frac {1}{c}}" class="latex" src="https://s0.wp.com/latex.php?latex=%5ClVert+A%5CrVert+_%7Bc%7D%3D%5Cleft+%28%5Csum+_%7Bx%7DA%28x%29%5E%7Bc%7D%5Cright+%29%5E%7B%5Cfrac+%7B1%7D%7Bc%7D%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\lVert A\rVert _{c}=\left (\sum _{x}A(x)^{c}\right )^{\frac {1}{c}}"/>. Our notion of (non-)entropy will be <img alt="\lVert A\rVert _{2}" class="latex" src="https://s0.wp.com/latex.php?latex=%5ClVert+A%5CrVert+_%7B2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\lVert A\rVert _{2}"/>. Note that <img alt="\lVert A\rVert _{2}^{2}" class="latex" src="https://s0.wp.com/latex.php?latex=%5ClVert+A%5CrVert+_%7B2%7D%5E%7B2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\lVert A\rVert _{2}^{2}"/> is exactly the <em>collision probability</em> <img alt="\mathbb{P} [A=A']" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathbb%7BP%7D+%5BA%3DA%27%5D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\mathbb{P} [A=A']"/> where <img alt="A'" class="latex" src="https://s0.wp.com/latex.php?latex=A%27&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="A'"/> is independent and identically distributed to <img alt="A" class="latex" src="https://s0.wp.com/latex.php?latex=A&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="A"/>. The smaller this quantity, the higher the entropy of <img alt="A" class="latex" src="https://s0.wp.com/latex.php?latex=A&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="A"/>. For the uniform distribution <img alt="U" class="latex" src="https://s0.wp.com/latex.php?latex=U&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="U"/> we have <img alt="\lVert U\rVert _{2}^{2}=\frac {1}{|G|}" class="latex" src="https://s0.wp.com/latex.php?latex=%5ClVert+U%5CrVert+_%7B2%7D%5E%7B2%7D%3D%5Cfrac+%7B1%7D%7B%7CG%7C%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\lVert U\rVert _{2}^{2}=\frac {1}{|G|}"/> and so we can think of <img alt="1/|G|" class="latex" src="https://s0.wp.com/latex.php?latex=1%2F%7CG%7C&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="1/|G|"/> as maximum entropy. If <img alt="A" class="latex" src="https://s0.wp.com/latex.php?latex=A&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="A"/> is uniform over <img alt="\Omega (|G|)" class="latex" src="https://s0.wp.com/latex.php?latex=%5COmega+%28%7CG%7C%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\Omega (|G|)"/> elements, we have <img alt="\lVert A\rVert _{2}^{2}=O(1/|G|)" class="latex" src="https://s0.wp.com/latex.php?latex=%5ClVert+A%5CrVert+_%7B2%7D%5E%7B2%7D%3DO%281%2F%7CG%7C%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\lVert A\rVert _{2}^{2}=O(1/|G|)"/> and we think of <img alt="A" class="latex" src="https://s0.wp.com/latex.php?latex=A&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="A"/> as having “high” entropy.</p>
<p style="text-align: justify;">Because the entropy of <img alt="U" class="latex" src="https://s0.wp.com/latex.php?latex=U&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="U"/> is small, we can think of the distance between <img alt="A" class="latex" src="https://s0.wp.com/latex.php?latex=A&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="A"/> and <img alt="U" class="latex" src="https://s0.wp.com/latex.php?latex=U&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="U"/> in the 2-norm as being essentially the entropy of <img alt="A" class="latex" src="https://s0.wp.com/latex.php?latex=A&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="A"/>:</p>
<div style="text-align: center;"><img alt="\begin{aligned} \lVert A-U\rVert _{2}^{2} &amp; =\sum _{x\in G}\left (A(x)-\frac {1}{|G|}\right )^{2}\\ &amp; =\sum _{x\in G}A(x)^{2}-2A(x)\frac {1}{|G|}+\frac {1}{|G|^{2}}\\ &amp; =\lVert A\rVert _{2}^{2}-\frac {1}{|G|}\\ &amp; =\lVert A\rVert _{2}^{2}-\lVert U\rVert _{2}^{2}\\ &amp; \approx \lVert A\rVert _{2}^{2}. \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5ClVert+A-U%5CrVert+_%7B2%7D%5E%7B2%7D+%26+%3D%5Csum+_%7Bx%5Cin+G%7D%5Cleft+%28A%28x%29-%5Cfrac+%7B1%7D%7B%7CG%7C%7D%5Cright+%29%5E%7B2%7D%5C%5C+%26+%3D%5Csum+_%7Bx%5Cin+G%7DA%28x%29%5E%7B2%7D-2A%28x%29%5Cfrac+%7B1%7D%7B%7CG%7C%7D%2B%5Cfrac+%7B1%7D%7B%7CG%7C%5E%7B2%7D%7D%5C%5C+%26+%3D%5ClVert+A%5CrVert+_%7B2%7D%5E%7B2%7D-%5Cfrac+%7B1%7D%7B%7CG%7C%7D%5C%5C+%26+%3D%5ClVert+A%5CrVert+_%7B2%7D%5E%7B2%7D-%5ClVert+U%5CrVert+_%7B2%7D%5E%7B2%7D%5C%5C+%26+%5Capprox+%5ClVert+A%5CrVert+_%7B2%7D%5E%7B2%7D.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} \lVert A-U\rVert _{2}^{2} &amp; =\sum _{x\in G}\left (A(x)-\frac {1}{|G|}\right )^{2}\\ &amp; =\sum _{x\in G}A(x)^{2}-2A(x)\frac {1}{|G|}+\frac {1}{|G|^{2}}\\ &amp; =\lVert A\rVert _{2}^{2}-\frac {1}{|G|}\\ &amp; =\lVert A\rVert _{2}^{2}-\lVert U\rVert _{2}^{2}\\ &amp; \approx \lVert A\rVert _{2}^{2}. \end{aligned}"/></div>
<div class="newtheorem">
<p style="text-align: justify;"><span class="head"> <a id="x1-12001r7"/> Lemma 7. </span><span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#XGowers08">Gow08</a>, <a href="https://emanueleviola.wordpress.com/feed/#XBabaiNP08">BNP08</a>]</span> If <img alt="X,Y" class="latex" src="https://s0.wp.com/latex.php?latex=X%2CY&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="X,Y"/> are independent over <img alt="G" class="latex" src="https://s0.wp.com/latex.php?latex=G&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="G"/>, then</p>
<div style="text-align: center;"><img alt="\begin{aligned} \lVert X\cdot Y-U\rVert _{2}\leq \lVert X\rVert _{2}\lVert Y\rVert _{2}\sqrt {\frac {|G|}{d}}, \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5ClVert+X%5Ccdot+Y-U%5CrVert+_%7B2%7D%5Cleq+%5ClVert+X%5CrVert+_%7B2%7D%5ClVert+Y%5CrVert+_%7B2%7D%5Csqrt+%7B%5Cfrac+%7B%7CG%7C%7D%7Bd%7D%7D%2C+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} \lVert X\cdot Y-U\rVert _{2}\leq \lVert X\rVert _{2}\lVert Y\rVert _{2}\sqrt {\frac {|G|}{d}}, \end{aligned}"/></div>
<p>where <img alt="d" class="latex" src="https://s0.wp.com/latex.php?latex=d&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="d"/> is the minimum dimension of an irreducible representation of <img alt="G" class="latex" src="https://s0.wp.com/latex.php?latex=G&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="G"/>.</p>
<p style="text-align: justify;">
</p></div>
<p style="text-align: justify;">By this lemma, for high entropy distributions <img alt="X" class="latex" src="https://s0.wp.com/latex.php?latex=X&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="X"/> and <img alt="Y" class="latex" src="https://s0.wp.com/latex.php?latex=Y&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="Y"/>, we get <img alt="\lVert X\cdot Y-U\rVert _{2}\leq \frac {O(1)}{\sqrt {|G|d}}" class="latex" src="https://s0.wp.com/latex.php?latex=%5ClVert+X%5Ccdot+Y-U%5CrVert+_%7B2%7D%5Cleq+%5Cfrac+%7BO%281%29%7D%7B%5Csqrt+%7B%7CG%7Cd%7D%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\lVert X\cdot Y-U\rVert _{2}\leq \frac {O(1)}{\sqrt {|G|d}}"/>. The factor <img alt="1/\sqrt {|G|}" class="latex" src="https://s0.wp.com/latex.php?latex=1%2F%5Csqrt+%7B%7CG%7C%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="1/\sqrt {|G|}"/> allows us to pass to <em>statistical distance </em><img alt="\lVert .\rVert _{1}" class="latex" src="https://s0.wp.com/latex.php?latex=%5ClVert+.%5CrVert+_%7B1%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\lVert .\rVert _{1}"/> using Cauchy-Schwarz:</p>
<div style="text-align: center;"><img alt="\begin{aligned} \lVert X\cdot Y-U\rVert _{1}\leq \sqrt {|G|}\lVert X\cdot Y-U\rVert _{2}\leq \frac {O(1)}{\sqrt {d}}.~~~~(1) \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5ClVert+X%5Ccdot+Y-U%5CrVert+_%7B1%7D%5Cleq+%5Csqrt+%7B%7CG%7C%7D%5ClVert+X%5Ccdot+Y-U%5CrVert+_%7B2%7D%5Cleq+%5Cfrac+%7BO%281%29%7D%7B%5Csqrt+%7Bd%7D%7D.%7E%7E%7E%7E%281%29+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} \lVert X\cdot Y-U\rVert _{1}\leq \sqrt {|G|}\lVert X\cdot Y-U\rVert _{2}\leq \frac {O(1)}{\sqrt {d}}.~~~~(1) \end{aligned}"/></div>
<p style="text-align: justify;">This is the way in which we will use the lemma.</p>
<p style="text-align: justify;">Another useful consequence of this lemma, which however we will not use directly, is this. Suppose now you have <img alt="three" class="latex" src="https://s0.wp.com/latex.php?latex=three&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="three"/> independent, high-entropy variables <img alt="X,Y,Z" class="latex" src="https://s0.wp.com/latex.php?latex=X%2CY%2CZ&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="X,Y,Z"/>. Then for every <img alt="g\in G" class="latex" src="https://s0.wp.com/latex.php?latex=g%5Cin+G&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="g\in G"/> we have</p>
<div style="text-align: center;"><img alt="\begin{aligned} |\mathbb{P} [X\cdot Y\cdot Z=g]-1/|G||\le \lVert X\rVert _{2}\lVert Y\rVert _{2}\lVert Z\rVert _{2}\sqrt {\frac {|G|}{d}}.~~~~(2) \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%7C%5Cmathbb%7BP%7D+%5BX%5Ccdot+Y%5Ccdot+Z%3Dg%5D-1%2F%7CG%7C%7C%5Cle+%5ClVert+X%5CrVert+_%7B2%7D%5ClVert+Y%5CrVert+_%7B2%7D%5ClVert+Z%5CrVert+_%7B2%7D%5Csqrt+%7B%5Cfrac+%7B%7CG%7C%7D%7Bd%7D%7D.%7E%7E%7E%7E%282%29+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} |\mathbb{P} [X\cdot Y\cdot Z=g]-1/|G||\le \lVert X\rVert _{2}\lVert Y\rVert _{2}\lVert Z\rVert _{2}\sqrt {\frac {|G|}{d}}.~~~~(2) \end{aligned}"/></div>
<p style="text-align: justify;">To show this, set <img alt="g=1_{G}" class="latex" src="https://s0.wp.com/latex.php?latex=g%3D1_%7BG%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="g=1_{G}"/> without loss of generality and rewrite the left-hand-side as</p>
<div style="text-align: center;"><img alt="\begin{aligned} |\sum _{h\in G}\mathbb{P} [X=h](\mathbb{P} [YZ=h^{-1}]-1/|G|)|. \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%7C%5Csum+_%7Bh%5Cin+G%7D%5Cmathbb%7BP%7D+%5BX%3Dh%5D%28%5Cmathbb%7BP%7D+%5BYZ%3Dh%5E%7B-1%7D%5D-1%2F%7CG%7C%29%7C.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} |\sum _{h\in G}\mathbb{P} [X=h](\mathbb{P} [YZ=h^{-1}]-1/|G|)|. \end{aligned}"/></div>
<p>By Cauchy-Schwarz this is at most</p>
<div style="text-align: center;"><img alt="\begin{aligned} \sqrt {\sum _{h}\mathbb{P} ^{2}[X=h]}\sqrt {\sum _{h}(\mathbb{P} [YZ=h^{-1}]-1/|G|)^{2}}=\lVert X\lVert _{2}\lVert YZ-U\lVert _{2} \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Csqrt+%7B%5Csum+_%7Bh%7D%5Cmathbb%7BP%7D+%5E%7B2%7D%5BX%3Dh%5D%7D%5Csqrt+%7B%5Csum+_%7Bh%7D%28%5Cmathbb%7BP%7D+%5BYZ%3Dh%5E%7B-1%7D%5D-1%2F%7CG%7C%29%5E%7B2%7D%7D%3D%5ClVert+X%5ClVert+_%7B2%7D%5ClVert+YZ-U%5ClVert+_%7B2%7D+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} \sqrt {\sum _{h}\mathbb{P} ^{2}[X=h]}\sqrt {\sum _{h}(\mathbb{P} [YZ=h^{-1}]-1/|G|)^{2}}=\lVert X\lVert _{2}\lVert YZ-U\lVert _{2} \end{aligned}"/></div>
<p>and we can conclude by Lemma <a href="https://emanueleviola.wordpress.com/feed/#x1-12001r7">7<!--tex4ht:ref: lem:XY-mixing --></a>. Hence the product of three high-entropy distributions is close to uniform in a point-wise sense: each group element is obtained with roughly probability <img alt="1/|G|" class="latex" src="https://s0.wp.com/latex.php?latex=1%2F%7CG%7C&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="1/|G|"/>.</p>
<p style="text-align: justify;">At least over <img alt="SL(2,q)" class="latex" src="https://s0.wp.com/latex.php?latex=SL%282%2Cq%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="SL(2,q)"/>, there exists an alternative proof of this fact that does not mention representation theory (see <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#XGowersV-cc-int-journal">GVa</a>]</span> and <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#Xviola-blog-mixing-in-groups">Vioa</a>, <a href="https://emanueleviola.wordpress.com/feed/#Xviola-blog-mixing-in-groups-ii">Viob</a>]</span>).</p>
<p style="text-align: justify;">With this notation in hand, we conclude by stating a “mixing” version of Theorem <a href="https://emanueleviola.wordpress.com/feed/#x1-20002">2<!--tex4ht:ref: sec:Two-parties --></a>. For more on this perspective we refer the reader to <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#XGowersV-cc-int-journal">GVa</a>]</span>. <a id="x1-12002r1"/></p>
<p style="text-align: justify;"><b>Theorem 1.</b> Let <img alt="G=SL(2,q)" class="latex" src="https://s0.wp.com/latex.php?latex=G%3DSL%282%2Cq%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="G=SL(2,q)"/>. Let <img alt="X=(X_{1},X_{2})" class="latex" src="https://s0.wp.com/latex.php?latex=X%3D%28X_%7B1%7D%2CX_%7B2%7D%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="X=(X_{1},X_{2})"/> and <img alt="Y=(Y_{1},Y_{2})" class="latex" src="https://s0.wp.com/latex.php?latex=Y%3D%28Y_%7B1%7D%2CY_%7B2%7D%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="Y=(Y_{1},Y_{2})"/> be two distributions over <img alt="G^{2}" class="latex" src="https://s0.wp.com/latex.php?latex=G%5E%7B2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="G^{2}"/>. Suppose <img alt="X" class="latex" src="https://s0.wp.com/latex.php?latex=X&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="X"/> is independent from <img alt="Y" class="latex" src="https://s0.wp.com/latex.php?latex=Y&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="Y"/>. Let <img alt="g\in G" class="latex" src="https://s0.wp.com/latex.php?latex=g%5Cin+G&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="g\in G"/>. We have</p>
<div style="text-align: center;"><img alt="\begin{aligned} |\mathbb{P} [X_{1}Y_{1}X_{2}Y_{2}=g]-1/|G||\le |G|^{1-\Omega (1)}\lVert X\rVert _{2}\lVert Y\rVert _{2}. \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%7C%5Cmathbb%7BP%7D+%5BX_%7B1%7DY_%7B1%7DX_%7B2%7DY_%7B2%7D%3Dg%5D-1%2F%7CG%7C%7C%5Cle+%7CG%7C%5E%7B1-%5COmega+%281%29%7D%5ClVert+X%5CrVert+_%7B2%7D%5ClVert+Y%5CrVert+_%7B2%7D.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} |\mathbb{P} [X_{1}Y_{1}X_{2}Y_{2}=g]-1/|G||\le |G|^{1-\Omega (1)}\lVert X\rVert _{2}\lVert Y\rVert _{2}. \end{aligned}"/></div>
<p style="text-align: justify;">For example, when <img alt="X" class="latex" src="https://s0.wp.com/latex.php?latex=X&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="X"/> and <img alt="Y" class="latex" src="https://s0.wp.com/latex.php?latex=Y&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="Y"/> have high entropy over <img alt="G^{2}" class="latex" src="https://s0.wp.com/latex.php?latex=G%5E%7B2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="G^{2}"/> (that is, are uniform over <img alt="\Omega (|G|^{2})" class="latex" src="https://s0.wp.com/latex.php?latex=%5COmega+%28%7CG%7C%5E%7B2%7D%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\Omega (|G|^{2})"/> pairs), we have <img alt="\lVert X\rVert _{2}\le \sqrt {O(1)/|G|^{2}}" class="latex" src="https://s0.wp.com/latex.php?latex=%5ClVert+X%5CrVert+_%7B2%7D%5Cle+%5Csqrt+%7BO%281%29%2F%7CG%7C%5E%7B2%7D%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\lVert X\rVert _{2}\le \sqrt {O(1)/|G|^{2}}"/>, and so <img alt="|G|^{1-\Omega (1)}\lVert X\rVert _{2}\lVert Y\rVert _{2}\le 1/|G|^{1+\Omega (1)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7CG%7C%5E%7B1-%5COmega+%281%29%7D%5ClVert+X%5CrVert+_%7B2%7D%5ClVert+Y%5CrVert+_%7B2%7D%5Cle+1%2F%7CG%7C%5E%7B1%2B%5COmega+%281%29%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="|G|^{1-\Omega (1)}\lVert X\rVert _{2}\lVert Y\rVert _{2}\le 1/|G|^{1+\Omega (1)}"/>. In particular, <img alt="X_{1}Y_{1}X_{2}Y_{2}" class="latex" src="https://s0.wp.com/latex.php?latex=X_%7B1%7DY_%7B1%7DX_%7B2%7DY_%7B2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="X_{1}Y_{1}X_{2}Y_{2}"/> is <img alt="1/|G|^{\Omega (1)}" class="latex" src="https://s0.wp.com/latex.php?latex=1%2F%7CG%7C%5E%7B%5COmega+%281%29%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="1/|G|^{\Omega (1)}"/> close to uniform over <img alt="G" class="latex" src="https://s0.wp.com/latex.php?latex=G&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="G"/> in statistical distance.</p>
<h5 class="subsubsectionHead"><span class="titlemark">5.0.2 </span> <a id="x1-130005.0.2"/>Back to protocols</h5>
<p style="text-align: justify;">As in the beginning of Section <a href="https://emanueleviola.wordpress.com/feed/#x1-30003">3<!--tex4ht:ref: sec:Proof-of-Gowers-Viola --></a>, for any group element <img alt="g\in G" class="latex" src="https://s0.wp.com/latex.php?latex=g%5Cin+G&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="g\in G"/> we define the distribution on triples <img alt="D_{g}:=(x,y,(x\cdot y)^{-1}g)" class="latex" src="https://s0.wp.com/latex.php?latex=D_%7Bg%7D%3A%3D%28x%2Cy%2C%28x%5Ccdot+y%29%5E%7B-1%7Dg%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="D_{g}:=(x,y,(x\cdot y)^{-1}g)"/>, where <img alt="x,y\in G" class="latex" src="https://s0.wp.com/latex.php?latex=x%2Cy%5Cin+G&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x,y\in G"/> are uniform and independent. Note the product of the elements in <img alt="D_{g}" class="latex" src="https://s0.wp.com/latex.php?latex=D_%7Bg%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="D_{g}"/> is always <img alt="g" class="latex" src="https://s0.wp.com/latex.php?latex=g&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="g"/>. Again as in Section <a href="https://emanueleviola.wordpress.com/feed/#x1-30003">3<!--tex4ht:ref: sec:Proof-of-Gowers-Viola --></a>, it suffices to show that for every <em>deterministic</em> protocols <img alt="P" class="latex" src="https://s0.wp.com/latex.php?latex=P&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="P"/> using little communication we have</p>
<div style="text-align: center;"><img alt="\begin{aligned} |\Pr [P(D_{1})=1]-\Pr [P(D_{h})=1]|\leq \frac {1}{100}. \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%7C%5CPr+%5BP%28D_%7B1%7D%29%3D1%5D-%5CPr+%5BP%28D_%7Bh%7D%29%3D1%5D%7C%5Cleq+%5Cfrac+%7B1%7D%7B100%7D.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} |\Pr [P(D_{1})=1]-\Pr [P(D_{h})=1]|\leq \frac {1}{100}. \end{aligned}"/></div>
<p style="text-align: justify;">Analogously to Lemma <a href="https://emanueleviola.wordpress.com/feed/#x1-4001r4">4<!--tex4ht:ref: lem:prot-rect --></a>, the following lemma describes a protocol using rectangles. The proof is nearly identical and is omitted.</p>
<div class="newtheorem">
<p style="text-align: justify;"><span class="head"> <a id="x1-13001r8"/> Lemma 8. </span>(The set of accepted inputs of) A deterministic <img alt="c" class="latex" src="https://s0.wp.com/latex.php?latex=c&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="c"/>-bit number-in-hand protocol with three parties can be written as a disjoint union of <img alt="2^{c}" class="latex" src="https://s0.wp.com/latex.php?latex=2%5E%7Bc%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="2^{c}"/> “rectangles,” that is sets of the form <img alt="A\times B\times C" class="latex" src="https://s0.wp.com/latex.php?latex=A%5Ctimes+B%5Ctimes+C&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="A\times B\times C"/>.</p>
<p style="text-align: justify;">
</p></div>
<p style="text-align: justify;">Next we show that these product sets cannot distinguish these two distributions <img alt="D_{1},D_{h}" class="latex" src="https://s0.wp.com/latex.php?latex=D_%7B1%7D%2CD_%7Bh%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="D_{1},D_{h}"/>, via a straightforward application of lemma <a href="https://emanueleviola.wordpress.com/feed/#x1-12001r7">7<!--tex4ht:ref: lem:XY-mixing --></a>.</p>
<div class="newtheorem">
<p style="text-align: justify;"><span class="head"> <a id="x1-13002r9"/> Lemma 9. </span>For all <img alt="A,B,C\subseteq G" class="latex" src="https://s0.wp.com/latex.php?latex=A%2CB%2CC%5Csubseteq+G&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="A,B,C\subseteq G"/> we have <img alt="|\mathbb{P} (A\times B\times C)(D_{1})=1]-\mathbb{P} [(A\times B\times C)(D_{h})=1]|\leq 1/d^{\Omega (1)}." class="latex" src="https://s0.wp.com/latex.php?latex=%7C%5Cmathbb%7BP%7D+%28A%5Ctimes+B%5Ctimes+C%29%28D_%7B1%7D%29%3D1%5D-%5Cmathbb%7BP%7D+%5B%28A%5Ctimes+B%5Ctimes+C%29%28D_%7Bh%7D%29%3D1%5D%7C%5Cleq+1%2Fd%5E%7B%5COmega+%281%29%7D.&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="|\mathbb{P} (A\times B\times C)(D_{1})=1]-\mathbb{P} [(A\times B\times C)(D_{h})=1]|\leq 1/d^{\Omega (1)}."/></p>
<p style="text-align: justify;">
</p></div>
<div class="proof">
<p style="text-align: justify;"><span class="head"> Proof. </span>Pick any <img alt="h\in G" class="latex" src="https://s0.wp.com/latex.php?latex=h%5Cin+G&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h\in G"/> and let <img alt="x,y,z" class="latex" src="https://s0.wp.com/latex.php?latex=x%2Cy%2Cz&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x,y,z"/> be the inputs of Alice, Bob, and Charlie respectively. Then</p>
<div style="text-align: center;"><img alt="\begin{aligned} \mathbb{P} [(A\times B\times C)(D_{h})=1]=\mathbb{P} [(x,y)\in A\times B]\cdot \mathbb{P} [(x\cdot y)^{-1}\cdot h\in C|(x,y)\in A\times B],~~~~(3) \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cmathbb%7BP%7D+%5B%28A%5Ctimes+B%5Ctimes+C%29%28D_%7Bh%7D%29%3D1%5D%3D%5Cmathbb%7BP%7D+%5B%28x%2Cy%29%5Cin+A%5Ctimes+B%5D%5Ccdot+%5Cmathbb%7BP%7D+%5B%28x%5Ccdot+y%29%5E%7B-1%7D%5Ccdot+h%5Cin+C%7C%28x%2Cy%29%5Cin+A%5Ctimes+B%5D%2C%7E%7E%7E%7E%283%29+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} \mathbb{P} [(A\times B\times C)(D_{h})=1]=\mathbb{P} [(x,y)\in A\times B]\cdot \mathbb{P} [(x\cdot y)^{-1}\cdot h\in C|(x,y)\in A\times B],~~~~(3) \end{aligned}"/></div>
<p>where <img alt="(x,y)" class="latex" src="https://s0.wp.com/latex.php?latex=%28x%2Cy%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="(x,y)"/> is uniform in <img alt="G^{2}" class="latex" src="https://s0.wp.com/latex.php?latex=G%5E%7B2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="G^{2}"/>. If either <img alt="A" class="latex" src="https://s0.wp.com/latex.php?latex=A&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="A"/> or <img alt="B" class="latex" src="https://s0.wp.com/latex.php?latex=B&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="B"/> is small, that is <img alt="\mathbb{P} [x\in A]\leq \epsilon " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathbb%7BP%7D+%5Bx%5Cin+A%5D%5Cleq+%5Cepsilon+&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\mathbb{P} [x\in A]\leq \epsilon "/> or <img alt="\mathbb{P} [y\in B]\leq \epsilon " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathbb%7BP%7D+%5By%5Cin+B%5D%5Cleq+%5Cepsilon+&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\mathbb{P} [y\in B]\leq \epsilon "/>, then also <img alt="\mathbb{P} [(x,y)\in A\times B]\le \epsilon " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathbb%7BP%7D+%5B%28x%2Cy%29%5Cin+A%5Ctimes+B%5D%5Cle+%5Cepsilon+&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\mathbb{P} [(x,y)\in A\times B]\le \epsilon "/> and hence (??) is at most <img alt="\epsilon " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cepsilon+&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\epsilon "/> as well. This holds for every <img alt="h" class="latex" src="https://s0.wp.com/latex.php?latex=h&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h"/>, so we also have <img alt="|\mathbb{P} (A\times B\times C)(D_{1})=1]-\mathbb{P} [(A\times B\times C)(D_{h})=1]|\leq \epsilon ." class="latex" src="https://s0.wp.com/latex.php?latex=%7C%5Cmathbb%7BP%7D+%28A%5Ctimes+B%5Ctimes+C%29%28D_%7B1%7D%29%3D1%5D-%5Cmathbb%7BP%7D+%5B%28A%5Ctimes+B%5Ctimes+C%29%28D_%7Bh%7D%29%3D1%5D%7C%5Cleq+%5Cepsilon+.&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="|\mathbb{P} (A\times B\times C)(D_{1})=1]-\mathbb{P} [(A\times B\times C)(D_{h})=1]|\leq \epsilon ."/> We will choose <img alt="\epsilon " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cepsilon+&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\epsilon "/> later.</p>
<p style="text-align: justify;">Otherwise, <img alt="A" class="latex" src="https://s0.wp.com/latex.php?latex=A&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="A"/> and <img alt="B" class="latex" src="https://s0.wp.com/latex.php?latex=B&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="B"/> are large: <img alt="\mathbb{P} [x\in A]&gt;\epsilon " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathbb%7BP%7D+%5Bx%5Cin+A%5D%3E%5Cepsilon+&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\mathbb{P} [x\in A]&gt;\epsilon "/> and <img alt="\mathbb{P} [y\in B]&gt;\epsilon " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathbb%7BP%7D+%5By%5Cin+B%5D%3E%5Cepsilon+&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\mathbb{P} [y\in B]&gt;\epsilon "/>. Let <img alt="(x',y')" class="latex" src="https://s0.wp.com/latex.php?latex=%28x%27%2Cy%27%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="(x',y')"/> be the distribution of <img alt="(x,y)" class="latex" src="https://s0.wp.com/latex.php?latex=%28x%2Cy%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="(x,y)"/> conditioned on <img alt="(x,y)\in A\times B" class="latex" src="https://s0.wp.com/latex.php?latex=%28x%2Cy%29%5Cin+A%5Ctimes+B&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="(x,y)\in A\times B"/>. We have that <img alt="x'" class="latex" src="https://s0.wp.com/latex.php?latex=x%27&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x'"/> and <img alt="y'" class="latex" src="https://s0.wp.com/latex.php?latex=y%27&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="y'"/> are independent and each is uniform over at least <img alt="\epsilon |G|" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cepsilon+%7CG%7C&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\epsilon |G|"/> elements. By Lemma <a href="https://emanueleviola.wordpress.com/feed/#x1-12001r7">7<!--tex4ht:ref: lem:XY-mixing --></a> this implies <img alt="\lVert x'\cdot y'-U\rVert _{2}\leq \lVert x'\rVert _{2}\cdot \lVert y'\rVert _{2}\cdot \sqrt {\frac {|G|}{d}}" class="latex" src="https://s0.wp.com/latex.php?latex=%5ClVert+x%27%5Ccdot+y%27-U%5CrVert+_%7B2%7D%5Cleq+%5ClVert+x%27%5CrVert+_%7B2%7D%5Ccdot+%5ClVert+y%27%5CrVert+_%7B2%7D%5Ccdot+%5Csqrt+%7B%5Cfrac+%7B%7CG%7C%7D%7Bd%7D%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\lVert x'\cdot y'-U\rVert _{2}\leq \lVert x'\rVert _{2}\cdot \lVert y'\rVert _{2}\cdot \sqrt {\frac {|G|}{d}}"/>, where <img alt="U" class="latex" src="https://s0.wp.com/latex.php?latex=U&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="U"/> is the uniform distribution. As mentioned after the lemma, by Cauchy–Schwarz we obtain</p>
<div style="text-align: center;"><img alt="\begin{aligned} \lVert x'\cdot y'-U\rVert _{1}\leq |G|\cdot \lVert x'\rVert _{2}\cdot \lVert y'\rVert _{2}\cdot \sqrt {\frac {1}{d}}\leq \frac {1}{\epsilon }\cdot \frac {1}{\sqrt {d}}, \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5ClVert+x%27%5Ccdot+y%27-U%5CrVert+_%7B1%7D%5Cleq+%7CG%7C%5Ccdot+%5ClVert+x%27%5CrVert+_%7B2%7D%5Ccdot+%5ClVert+y%27%5CrVert+_%7B2%7D%5Ccdot+%5Csqrt+%7B%5Cfrac+%7B1%7D%7Bd%7D%7D%5Cleq+%5Cfrac+%7B1%7D%7B%5Cepsilon+%7D%5Ccdot+%5Cfrac+%7B1%7D%7B%5Csqrt+%7Bd%7D%7D%2C+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} \lVert x'\cdot y'-U\rVert _{1}\leq |G|\cdot \lVert x'\rVert _{2}\cdot \lVert y'\rVert _{2}\cdot \sqrt {\frac {1}{d}}\leq \frac {1}{\epsilon }\cdot \frac {1}{\sqrt {d}}, \end{aligned}"/></div>
<p>where the last inequality follows from the fact that <img alt="\lVert x\rVert _{2},\lVert y\rVert _{2}\leq \sqrt {\frac {1}{\epsilon |G|}}" class="latex" src="https://s0.wp.com/latex.php?latex=%5ClVert+x%5CrVert+_%7B2%7D%2C%5ClVert+y%5CrVert+_%7B2%7D%5Cleq+%5Csqrt+%7B%5Cfrac+%7B1%7D%7B%5Cepsilon+%7CG%7C%7D%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\lVert x\rVert _{2},\lVert y\rVert _{2}\leq \sqrt {\frac {1}{\epsilon |G|}}"/>.</p>
<p style="text-align: justify;">This implies that <img alt="\lVert (x'\cdot y')^{-1}-U\rVert _{1}\leq \frac {1}{\epsilon }\cdot \frac {1}{\sqrt {d}}" class="latex" src="https://s0.wp.com/latex.php?latex=%5ClVert+%28x%27%5Ccdot+y%27%29%5E%7B-1%7D-U%5CrVert+_%7B1%7D%5Cleq+%5Cfrac+%7B1%7D%7B%5Cepsilon+%7D%5Ccdot+%5Cfrac+%7B1%7D%7B%5Csqrt+%7Bd%7D%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\lVert (x'\cdot y')^{-1}-U\rVert _{1}\leq \frac {1}{\epsilon }\cdot \frac {1}{\sqrt {d}}"/> and <img alt="\lVert (x'\cdot y')^{-1}\cdot h-U\rVert _{1}\leq \frac {1}{\epsilon }\cdot \frac {1}{\sqrt {d}}" class="latex" src="https://s0.wp.com/latex.php?latex=%5ClVert+%28x%27%5Ccdot+y%27%29%5E%7B-1%7D%5Ccdot+h-U%5CrVert+_%7B1%7D%5Cleq+%5Cfrac+%7B1%7D%7B%5Cepsilon+%7D%5Ccdot+%5Cfrac+%7B1%7D%7B%5Csqrt+%7Bd%7D%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\lVert (x'\cdot y')^{-1}\cdot h-U\rVert _{1}\leq \frac {1}{\epsilon }\cdot \frac {1}{\sqrt {d}}"/>, because taking inverses and multiplying by <img alt="h" class="latex" src="https://s0.wp.com/latex.php?latex=h&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h"/> does not change the distance to uniform. These two last inequalities imply that</p>
<div style="text-align: center;"><img alt="\begin{aligned} |\mathbb{P} [(x'\cdot y')^{-1}\in C]-\mathbb{P} [(x'\cdot y')^{-1}\cdot h\in C]|\le O(\frac {1}{\epsilon \sqrt {d}}); \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%7C%5Cmathbb%7BP%7D+%5B%28x%27%5Ccdot+y%27%29%5E%7B-1%7D%5Cin+C%5D-%5Cmathbb%7BP%7D+%5B%28x%27%5Ccdot+y%27%29%5E%7B-1%7D%5Ccdot+h%5Cin+C%5D%7C%5Cle+O%28%5Cfrac+%7B1%7D%7B%5Cepsilon+%5Csqrt+%7Bd%7D%7D%29%3B+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} |\mathbb{P} [(x'\cdot y')^{-1}\in C]-\mathbb{P} [(x'\cdot y')^{-1}\cdot h\in C]|\le O(\frac {1}{\epsilon \sqrt {d}}); \end{aligned}"/></div>
<p>and thus we get that</p>
<div style="text-align: center;"><img alt="\begin{aligned} |\mathbb{P} [(A\times B\times C)(D_{1})=1]-\mathbb{P} [(A\times B\times C)(D_{h})=1]|\le O(\frac {1}{\epsilon \sqrt {d}}). \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%7C%5Cmathbb%7BP%7D+%5B%28A%5Ctimes+B%5Ctimes+C%29%28D_%7B1%7D%29%3D1%5D-%5Cmathbb%7BP%7D+%5B%28A%5Ctimes+B%5Ctimes+C%29%28D_%7Bh%7D%29%3D1%5D%7C%5Cle+O%28%5Cfrac+%7B1%7D%7B%5Cepsilon+%5Csqrt+%7Bd%7D%7D%29.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} |\mathbb{P} [(A\times B\times C)(D_{1})=1]-\mathbb{P} [(A\times B\times C)(D_{h})=1]|\le O(\frac {1}{\epsilon \sqrt {d}}). \end{aligned}"/></div>
<p>Picking <img alt="\epsilon =1/d^{1/4}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cepsilon+%3D1%2Fd%5E%7B1%2F4%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\epsilon =1/d^{1/4}"/> completes the proof. <img alt="\square " class="latex" src="https://s0.wp.com/latex.php?latex=%5Csquare+&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\square "/></p>
</div>
<p style="text-align: justify;">Returning to arbitrary deterministic protocols <img alt="P" class="latex" src="https://s0.wp.com/latex.php?latex=P&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="P"/> (as opposed to rectangles), write <img alt="P" class="latex" src="https://s0.wp.com/latex.php?latex=P&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="P"/> as a union of <img alt="2^{c}" class="latex" src="https://s0.wp.com/latex.php?latex=2%5E%7Bc%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="2^{c}"/> disjoint rectangles by Lemma <a href="https://emanueleviola.wordpress.com/feed/#x1-13001r8">8<!--tex4ht:ref: lem:prot-nih-rect --></a>. Applying Lemma <a href="https://emanueleviola.wordpress.com/feed/#x1-13002r9">9<!--tex4ht:ref: lem:NIH-rect --></a> and summing over all rectangles we get that the distinguishing advantage of <img alt="P" class="latex" src="https://s0.wp.com/latex.php?latex=P&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="P"/> is at most <img alt="2^{c}/d^{1/4}" class="latex" src="https://s0.wp.com/latex.php?latex=2%5E%7Bc%7D%2Fd%5E%7B1%2F4%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="2^{c}/d^{1/4}"/>. For <img alt="c\leq (1/100)\log d" class="latex" src="https://s0.wp.com/latex.php?latex=c%5Cleq+%281%2F100%29%5Clog+d&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="c\leq (1/100)\log d"/> the advantage is at most <img alt="1/100" class="latex" src="https://s0.wp.com/latex.php?latex=1%2F100&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="1/100"/>, concluding the proof.</p>
<h3 class="sectionHead"><span class="titlemark">6 </span> <a id="x1-140006"/>Three parties, number-on-forehead</h3>
<p style="text-align: justify;">In number-on-forehead (NOH) communication complexity <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#XCFL83">CFL83</a>]</span> with <img alt="k" class="latex" src="https://s0.wp.com/latex.php?latex=k&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="k"/> parties, the input is a <img alt="k" class="latex" src="https://s0.wp.com/latex.php?latex=k&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="k"/>-tuple <img alt="(x_{1},\dotsc ,x_{k})" class="latex" src="https://s0.wp.com/latex.php?latex=%28x_%7B1%7D%2C%5Cdotsc+%2Cx_%7Bk%7D%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="(x_{1},\dotsc ,x_{k})"/> and each party <img alt="i" class="latex" src="https://s0.wp.com/latex.php?latex=i&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="i"/> sees all of it except <img alt="x_{i}" class="latex" src="https://s0.wp.com/latex.php?latex=x_%7Bi%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x_{i}"/>. For background, it is not known how to prove negative results for <img alt="k\ge \log n" class="latex" src="https://s0.wp.com/latex.php?latex=k%5Cge+%5Clog+n&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="k\ge \log n"/> parties.</p>
<p style="text-align: justify;">We mention that Theorem <a href="https://emanueleviola.wordpress.com/feed/#x1-2002r1">1<!--tex4ht:ref: thm:GV-interleaved --></a> can be extended to the multiparty setting, see <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#XGowersV-cc-int-journal">GVa</a>]</span>. Several questions arise here, such as whether this problem remains hard for <img alt="k\ge \log n" class="latex" src="https://s0.wp.com/latex.php?latex=k%5Cge+%5Clog+n&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="k\ge \log n"/>, and what is the minimum length of an interleaved product that is hard for <img alt="k=3" class="latex" src="https://s0.wp.com/latex.php?latex=k%3D3&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="k=3"/> parties (the proof in <a href="https://emanueleviola.wordpress.com/feed/#x1-2002r1">1<!--tex4ht:ref: thm:GV-interleaved --></a> gives a large constant).</p>
<p style="text-align: justify;">However in this survey we shall instead focus on the problem of separating deterministic and randomized communication. For <img alt="k=2" class="latex" src="https://s0.wp.com/latex.php?latex=k%3D2&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="k=2"/>, we know the optimal separation: The equality function requires <img alt="\Omega (n)" class="latex" src="https://s0.wp.com/latex.php?latex=%5COmega+%28n%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\Omega (n)"/> communication for deterministic protocols, but can be solved using <img alt="O(1)" class="latex" src="https://s0.wp.com/latex.php?latex=O%281%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="O(1)"/> communication if we allow the protocols to use public coins. For <img alt="k=3" class="latex" src="https://s0.wp.com/latex.php?latex=k%3D3&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="k=3"/>, the best known separation between deterministic and randomized protocol is <img alt="\Omega (\log n)" class="latex" src="https://s0.wp.com/latex.php?latex=%5COmega+%28%5Clog+n%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\Omega (\log n)"/> vs <img alt="O(1)" class="latex" src="https://s0.wp.com/latex.php?latex=O%281%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="O(1)"/> <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#XBeameDPW10">BDPW10</a>]</span>. In the following we give a new proof of this result, for a different function: <img alt="f(x,y,z)=1_{G}" class="latex" src="https://s0.wp.com/latex.php?latex=f%28x%2Cy%2Cz%29%3D1_%7BG%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="f(x,y,z)=1_{G}"/> if and only if <img alt="x\cdot y\cdot z=1" class="latex" src="https://s0.wp.com/latex.php?latex=x%5Ccdot+y%5Ccdot+z%3D1&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x\cdot y\cdot z=1"/> for <img alt="x,y,z\in SL(2,q)" class="latex" src="https://s0.wp.com/latex.php?latex=x%2Cy%2Cz%5Cin+SL%282%2Cq%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x,y,z\in SL(2,q)"/>. As is true for some functions in <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#XBeameDPW10">BDPW10</a>]</span>, a stronger separation could hold for <img alt="f" class="latex" src="https://s0.wp.com/latex.php?latex=f&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="f"/>. For context, let us state and prove the upper bound for randomized communication.</p>
<div class="newtheorem">
<p style="text-align: justify;"><span class="head"> <a id="x1-14001r10"/> Claim 10. </span><img alt="f" class="latex" src="https://s0.wp.com/latex.php?latex=f&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="f"/> has randomized communication complexity <img alt="O(1)" class="latex" src="https://s0.wp.com/latex.php?latex=O%281%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="O(1)"/>.</p>
<p style="text-align: justify;">
</p></div>
<div class="proof">
<p style="text-align: justify;"><span class="head"> Proof. </span>In the number-on-forehead model, computing <img alt="f" class="latex" src="https://s0.wp.com/latex.php?latex=f&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="f"/> reduces to two-party equality with no additional communication: Alice computes <img alt="y\cdot z=:w" class="latex" src="https://s0.wp.com/latex.php?latex=y%5Ccdot+z%3D%3Aw&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="y\cdot z=:w"/> privately, then Alice and Bob check if <img alt="x=w^{-1}" class="latex" src="https://s0.wp.com/latex.php?latex=x%3Dw%5E%7B-1%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x=w^{-1}"/>. <img alt="\square " class="latex" src="https://s0.wp.com/latex.php?latex=%5Csquare+&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\square "/></p>
</div>
<p style="text-align: justify;">To prove the lower bound for deterministic protocols we reduce the communication problem to a combinatorial problem.</p>
<div class="newtheorem">
<p style="text-align: justify;"><span class="head"> <a id="x1-14002r11"/> Definition 11. </span>A <em>corner</em> in a group <img alt="G" class="latex" src="https://s0.wp.com/latex.php?latex=G&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="G"/> is a set <img alt="\{(x,y),(xz,y),(x,zy)\}\subseteq G^{2}" class="latex" src="https://s0.wp.com/latex.php?latex=%5C%7B%28x%2Cy%29%2C%28xz%2Cy%29%2C%28x%2Czy%29%5C%7D%5Csubseteq+G%5E%7B2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\{(x,y),(xz,y),(x,zy)\}\subseteq G^{2}"/>, where <img alt="x,y" class="latex" src="https://s0.wp.com/latex.php?latex=x%2Cy&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x,y"/> are arbitrary group elements and <img alt="z\neq 1_{G}" class="latex" src="https://s0.wp.com/latex.php?latex=z%5Cneq+1_%7BG%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="z\neq 1_{G}"/>.</p>
<p style="text-align: justify;">
</p></div>
<p style="text-align: justify;">For intuition, if <img alt="G" class="latex" src="https://s0.wp.com/latex.php?latex=G&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="G"/> is the abelian group of real numbers with addition, a corner becomes <img alt="\{(x,y),(x+z,y),(x,y+z)\}" class="latex" src="https://s0.wp.com/latex.php?latex=%5C%7B%28x%2Cy%29%2C%28x%2Bz%2Cy%29%2C%28x%2Cy%2Bz%29%5C%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\{(x,y),(x+z,y),(x,y+z)\}"/> for <img alt="z\neq 0" class="latex" src="https://s0.wp.com/latex.php?latex=z%5Cneq+0&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="z\neq 0"/>, which are the coordinates of an isosceles triangle. We now state the theorem that connects corners and lower bounds.</p>
<div class="newtheorem">
<p style="text-align: justify;"><span class="head"> <a id="x1-14003r12"/> Lemma 12. </span>Let <img alt="G" class="latex" src="https://s0.wp.com/latex.php?latex=G&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="G"/> be a group and <img alt="\delta " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdelta+&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\delta "/> a real number. Suppose that every subset <img alt="A\subseteq G^{2}" class="latex" src="https://s0.wp.com/latex.php?latex=A%5Csubseteq+G%5E%7B2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="A\subseteq G^{2}"/> with <img alt="|A|/|G^{2}|\ge \delta " class="latex" src="https://s0.wp.com/latex.php?latex=%7CA%7C%2F%7CG%5E%7B2%7D%7C%5Cge+%5Cdelta+&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="|A|/|G^{2}|\ge \delta "/> contains a corner. Then the deterministic communication complexity of <img alt="f" class="latex" src="https://s0.wp.com/latex.php?latex=f&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="f"/> (defined as <img alt="f(x,y,z)=1\iff x\cdot y\cdot z=1_{G}" class="latex" src="https://s0.wp.com/latex.php?latex=f%28x%2Cy%2Cz%29%3D1%5Ciff+x%5Ccdot+y%5Ccdot+z%3D1_%7BG%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="f(x,y,z)=1\iff x\cdot y\cdot z=1_{G}"/>) is <img alt="\Omega (\log (1/\delta ))" class="latex" src="https://s0.wp.com/latex.php?latex=%5COmega+%28%5Clog+%281%2F%5Cdelta+%29%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\Omega (\log (1/\delta ))"/>.</p>
<p style="text-align: justify;">
</p></div>
<p style="text-align: justify;">It is known that <img alt="\delta \ge 1/\mathrm {polyloglog}|G|" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdelta+%5Cge+1%2F%5Cmathrm+%7Bpolyloglog%7D%7CG%7C&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\delta \ge 1/\mathrm {polyloglog}|G|"/> implies a corner for certain abelian groups <img alt="G" class="latex" src="https://s0.wp.com/latex.php?latex=G&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="G"/>, see <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#XMR2289954">LM07</a>]</span> for the best bound and pointers to the history of the problem. For <img alt="G=SL(2,q)" class="latex" src="https://s0.wp.com/latex.php?latex=G%3DSL%282%2Cq%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="G=SL(2,q)"/> a stronger result is known: <img alt="\delta \ge 1/\mathrm {polylog}|G|" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdelta+%5Cge+1%2F%5Cmathrm+%7Bpolylog%7D%7CG%7C&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\delta \ge 1/\mathrm {polylog}|G|"/> implies a corner <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#XAustin2016">Aus16</a>]</span>. This in turn implies communication <img alt="\Omega (\log \log |G|)=\Omega (\log n)" class="latex" src="https://s0.wp.com/latex.php?latex=%5COmega+%28%5Clog+%5Clog+%7CG%7C%29%3D%5COmega+%28%5Clog+n%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\Omega (\log \log |G|)=\Omega (\log n)"/>.</p>
<div class="proof">
<p style="text-align: justify;"><span class="head"> Proof. </span>We saw already twice that a number-in-hand <img alt="c" class="latex" src="https://s0.wp.com/latex.php?latex=c&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="c"/>-bit protocol can be written as a disjoint union of <img alt="2^{c}" class="latex" src="https://s0.wp.com/latex.php?latex=2%5E%7Bc%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="2^{c}"/> rectangles (Lemmas <a href="https://emanueleviola.wordpress.com/feed/#x1-4001r4">4<!--tex4ht:ref: lem:prot-rect --></a>, <a href="https://emanueleviola.wordpress.com/feed/#x1-13001r8">8<!--tex4ht:ref: lem:prot-nih-rect --></a>). Likewise, a number-on-forehead <img alt="c" class="latex" src="https://s0.wp.com/latex.php?latex=c&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="c"/>-bit protocol <img alt="P" class="latex" src="https://s0.wp.com/latex.php?latex=P&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="P"/> can be written as a disjoint union of <img alt="2^{c}" class="latex" src="https://s0.wp.com/latex.php?latex=2%5E%7Bc%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="2^{c}"/> cylinder intersections <img alt="C_{i}:=\{(x,y,z):f_{i}(y,z)g_{i}(x,z)h_{i}(x,y)=1\}" class="latex" src="https://s0.wp.com/latex.php?latex=C_%7Bi%7D%3A%3D%5C%7B%28x%2Cy%2Cz%29%3Af_%7Bi%7D%28y%2Cz%29g_%7Bi%7D%28x%2Cz%29h_%7Bi%7D%28x%2Cy%29%3D1%5C%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="C_{i}:=\{(x,y,z):f_{i}(y,z)g_{i}(x,z)h_{i}(x,y)=1\}"/> for some <img alt="f_{i},g_{i},h_{i}\colon G^{2}\to \{0,1\}" class="latex" src="https://s0.wp.com/latex.php?latex=f_%7Bi%7D%2Cg_%7Bi%7D%2Ch_%7Bi%7D%5Ccolon+G%5E%7B2%7D%5Cto+%5C%7B0%2C1%5C%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="f_{i},g_{i},h_{i}\colon G^{2}\to \{0,1\}"/>:</p>
<div style="text-align: center;"><img alt="\begin{aligned} P(x,y,z)=\sum _{i=1}^{2^{c}}f_{i}(y,z)g_{i}(x,z)h_{i}(x,y). \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+P%28x%2Cy%2Cz%29%3D%5Csum+_%7Bi%3D1%7D%5E%7B2%5E%7Bc%7D%7Df_%7Bi%7D%28y%2Cz%29g_%7Bi%7D%28x%2Cz%29h_%7Bi%7D%28x%2Cy%29.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} P(x,y,z)=\sum _{i=1}^{2^{c}}f_{i}(y,z)g_{i}(x,z)h_{i}(x,y). \end{aligned}"/></div>
<p>The proof idea of the above fact is to consider the <img alt="2^{c}" class="latex" src="https://s0.wp.com/latex.php?latex=2%5E%7Bc%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="2^{c}"/> transcripts of <img alt="P" class="latex" src="https://s0.wp.com/latex.php?latex=P&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="P"/>, then one can see that the inputs giving a fixed transcript are a cylinder intersection.</p>
<p style="text-align: justify;">Let <img alt="P" class="latex" src="https://s0.wp.com/latex.php?latex=P&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="P"/> be a <img alt="c" class="latex" src="https://s0.wp.com/latex.php?latex=c&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="c"/>-bit protocol. Consider the inputs <img alt="\{(x,y,(xy)^{-1})\}" class="latex" src="https://s0.wp.com/latex.php?latex=%5C%7B%28x%2Cy%2C%28xy%29%5E%7B-1%7D%29%5C%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\{(x,y,(xy)^{-1})\}"/> on which <img alt="P" class="latex" src="https://s0.wp.com/latex.php?latex=P&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="P"/> accepts. Note that at least <img alt="2^{-c}" class="latex" src="https://s0.wp.com/latex.php?latex=2%5E%7B-c%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="2^{-c}"/> fraction of them are accepted by some cylinder intersection <img alt="C=f\cdot g\cdot h" class="latex" src="https://s0.wp.com/latex.php?latex=C%3Df%5Ccdot+g%5Ccdot+h&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="C=f\cdot g\cdot h"/>. Let <img alt="A:=\{(x,y):(x,y,(xy)^{-1})\in C\}\subseteq G^{2}" class="latex" src="https://s0.wp.com/latex.php?latex=A%3A%3D%5C%7B%28x%2Cy%29%3A%28x%2Cy%2C%28xy%29%5E%7B-1%7D%29%5Cin+C%5C%7D%5Csubseteq+G%5E%7B2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="A:=\{(x,y):(x,y,(xy)^{-1})\in C\}\subseteq G^{2}"/>. Since the first two elements in the tuple determine the last, we have <img alt="|A|/|G^{2}|\ge 2^{-c}" class="latex" src="https://s0.wp.com/latex.php?latex=%7CA%7C%2F%7CG%5E%7B2%7D%7C%5Cge+2%5E%7B-c%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="|A|/|G^{2}|\ge 2^{-c}"/>.</p>
<p style="text-align: justify;">Now suppose <img alt="A" class="latex" src="https://s0.wp.com/latex.php?latex=A&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="A"/> contains a corner <img alt="\{(x,y),(xz,y),(x,zy)\}" class="latex" src="https://s0.wp.com/latex.php?latex=%5C%7B%28x%2Cy%29%2C%28xz%2Cy%29%2C%28x%2Czy%29%5C%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\{(x,y),(xz,y),(x,zy)\}"/>. Then</p>
<div style="text-align: center;"><img alt="\begin{aligned} (x,y)\in A &amp; \implies (x,y,(xy)^{-1})\in C &amp; &amp; \implies h(x,y)=1,\\ (xz,y)\in A &amp; \implies (xz,y,(xzy)^{-1})\in C &amp; &amp; \implies f(y,(xyz)^{-1})=1,\\ (x,zy)\in A &amp; \implies (x,zy,(xzy)^{-1})\in C &amp; &amp; \implies g(x,(xyz)^{-1})=1. \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%28x%2Cy%29%5Cin+A+%26+%5Cimplies+%28x%2Cy%2C%28xy%29%5E%7B-1%7D%29%5Cin+C+%26+%26+%5Cimplies+h%28x%2Cy%29%3D1%2C%5C%5C+%28xz%2Cy%29%5Cin+A+%26+%5Cimplies+%28xz%2Cy%2C%28xzy%29%5E%7B-1%7D%29%5Cin+C+%26+%26+%5Cimplies+f%28y%2C%28xyz%29%5E%7B-1%7D%29%3D1%2C%5C%5C+%28x%2Czy%29%5Cin+A+%26+%5Cimplies+%28x%2Czy%2C%28xzy%29%5E%7B-1%7D%29%5Cin+C+%26+%26+%5Cimplies+g%28x%2C%28xyz%29%5E%7B-1%7D%29%3D1.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} (x,y)\in A &amp; \implies (x,y,(xy)^{-1})\in C &amp; &amp; \implies h(x,y)=1,\\ (xz,y)\in A &amp; \implies (xz,y,(xzy)^{-1})\in C &amp; &amp; \implies f(y,(xyz)^{-1})=1,\\ (x,zy)\in A &amp; \implies (x,zy,(xzy)^{-1})\in C &amp; &amp; \implies g(x,(xyz)^{-1})=1. \end{aligned}"/></div>
<p>This implies <img alt="(x,y,(xzy)^{-1})\in C" class="latex" src="https://s0.wp.com/latex.php?latex=%28x%2Cy%2C%28xzy%29%5E%7B-1%7D%29%5Cin+C&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="(x,y,(xzy)^{-1})\in C"/>, which is a contradiction because <img alt="z\neq 1" class="latex" src="https://s0.wp.com/latex.php?latex=z%5Cneq+1&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="z\neq 1"/> and so <img alt="x\cdot y\cdot (xzy)^{-1}\neq 1_{G}" class="latex" src="https://s0.wp.com/latex.php?latex=x%5Ccdot+y%5Ccdot+%28xzy%29%5E%7B-1%7D%5Cneq+1_%7BG%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x\cdot y\cdot (xzy)^{-1}\neq 1_{G}"/>. <img alt="\square " class="latex" src="https://s0.wp.com/latex.php?latex=%5Csquare+&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\square "/></p>
</div>
<h3 class="sectionHead"><span class="titlemark">7 </span> <a id="x1-150007"/>The corners theorem for quasirandom groups</h3>
<p style="text-align: justify;">In this section we prove the corners theorem for quasirandom groups, following Austin <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#XAustin2016">Aus16</a>]</span>. Our exposition has several minor differences with that in <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#XAustin2016">Aus16</a>]</span>, which may make it more computer-science friendly. Possibly a proof can also be obtained via certain local modifications and simplifications of Green’s exposition <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#XGre04-finite">Gre05b</a>, <a href="https://emanueleviola.wordpress.com/feed/#XGreen-supplement">Gre05a</a>]</span> of an earlier proof for the abelian case. We focus on the case <img alt="G=\textit {SL}(2,q)" class="latex" src="https://s0.wp.com/latex.php?latex=G%3D%5Ctextit+%7BSL%7D%282%2Cq%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="G=\textit {SL}(2,q)"/> for simplicity, but the proof immediately extends to other quasirandom groups (with corresponding parameters). <a id="x1-15001r1"/></p>
<p style="text-align: justify;"><b>Theorem 1.</b> Let <img alt="G=\textit {SL}(2,q)" class="latex" src="https://s0.wp.com/latex.php?latex=G%3D%5Ctextit+%7BSL%7D%282%2Cq%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="G=\textit {SL}(2,q)"/>. Every subset <img alt="A\subseteq G^{2}" class="latex" src="https://s0.wp.com/latex.php?latex=A%5Csubseteq+G%5E%7B2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="A\subseteq G^{2}"/> of density <img alt="|A|/|G|^{2}\geq 1/\log ^{a}|G|" class="latex" src="https://s0.wp.com/latex.php?latex=%7CA%7C%2F%7CG%7C%5E%7B2%7D%5Cgeq+1%2F%5Clog+%5E%7Ba%7D%7CG%7C&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="|A|/|G|^{2}\geq 1/\log ^{a}|G|"/> contains a corner <img alt="\{(x,y),(xz,y),(x,zy)~|~z\neq 1\}" class="latex" src="https://s0.wp.com/latex.php?latex=%5C%7B%28x%2Cy%29%2C%28xz%2Cy%29%2C%28x%2Czy%29%7E%7C%7Ez%5Cneq+1%5C%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\{(x,y),(xz,y),(x,zy)~|~z\neq 1\}"/>.</p>
<h4 class="subsectionHead"><span class="titlemark">7.1 </span> <a id="x1-160007.1"/>Proof idea</h4>
<p style="text-align: justify;">For intuition, suppose <img alt="A" class="latex" src="https://s0.wp.com/latex.php?latex=A&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="A"/> is a product set, i.e., <img alt="A=B\times C" class="latex" src="https://s0.wp.com/latex.php?latex=A%3DB%5Ctimes+C&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="A=B\times C"/> for <img alt="B,C\subseteq G" class="latex" src="https://s0.wp.com/latex.php?latex=B%2CC%5Csubseteq+G&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="B,C\subseteq G"/>. Let’s look at the quantity</p>
<div style="text-align: center;"><img alt="\begin{aligned} \mathbb {E}_{x,y,z\leftarrow G}[A(x,y)A(xz,y)A(x,zy)] \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cmathbb+%7BE%7D_%7Bx%2Cy%2Cz%5Cleftarrow+G%7D%5BA%28x%2Cy%29A%28xz%2Cy%29A%28x%2Czy%29%5D+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} \mathbb {E}_{x,y,z\leftarrow G}[A(x,y)A(xz,y)A(x,zy)] \end{aligned}"/></div>
<p>where <img alt="A(x,y)=1" class="latex" src="https://s0.wp.com/latex.php?latex=A%28x%2Cy%29%3D1&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="A(x,y)=1"/> iff <img alt="(x,y)\in A" class="latex" src="https://s0.wp.com/latex.php?latex=%28x%2Cy%29%5Cin+A&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="(x,y)\in A"/>. Note that the random variable in the expectation is equal to <img alt="1" class="latex" src="https://s0.wp.com/latex.php?latex=1&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="1"/> exactly when <img alt="x,y,z" class="latex" src="https://s0.wp.com/latex.php?latex=x%2Cy%2Cz&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x,y,z"/> form a corner in <img alt="A" class="latex" src="https://s0.wp.com/latex.php?latex=A&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="A"/>. We’ll show that this quantity is greater than <img alt="1/|G|" class="latex" src="https://s0.wp.com/latex.php?latex=1%2F%7CG%7C&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="1/|G|"/>, which implies that <img alt="A" class="latex" src="https://s0.wp.com/latex.php?latex=A&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="A"/> contains a corner (where <img alt="z\neq 1" class="latex" src="https://s0.wp.com/latex.php?latex=z%5Cneq+1&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="z\neq 1"/>). Since we are taking <img alt="A=B\times C" class="latex" src="https://s0.wp.com/latex.php?latex=A%3DB%5Ctimes+C&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="A=B\times C"/>, we can rewrite the above quantity as</p>
<div style="text-align: center;"><img alt="\begin{aligned} \mathbb {E}_{x,y,z\leftarrow G}[B(x)C(y)B(xz)C(y)B(x)C(zy)] &amp; =\mathbb {E}_{x,y,z\leftarrow G}[B(x)C(y)B(xz)C(zy)]\\ &amp; =\mathbb {E}_{x,y,z\leftarrow G}[B(x)C(y)B(z)C(x^{-1}zy)] \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cmathbb+%7BE%7D_%7Bx%2Cy%2Cz%5Cleftarrow+G%7D%5BB%28x%29C%28y%29B%28xz%29C%28y%29B%28x%29C%28zy%29%5D+%26+%3D%5Cmathbb+%7BE%7D_%7Bx%2Cy%2Cz%5Cleftarrow+G%7D%5BB%28x%29C%28y%29B%28xz%29C%28zy%29%5D%5C%5C+%26+%3D%5Cmathbb+%7BE%7D_%7Bx%2Cy%2Cz%5Cleftarrow+G%7D%5BB%28x%29C%28y%29B%28z%29C%28x%5E%7B-1%7Dzy%29%5D+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} \mathbb {E}_{x,y,z\leftarrow G}[B(x)C(y)B(xz)C(y)B(x)C(zy)] &amp; =\mathbb {E}_{x,y,z\leftarrow G}[B(x)C(y)B(xz)C(zy)]\\ &amp; =\mathbb {E}_{x,y,z\leftarrow G}[B(x)C(y)B(z)C(x^{-1}zy)] \end{aligned}"/></div>
<p>where the last line follows by replacing <img alt="z" class="latex" src="https://s0.wp.com/latex.php?latex=z&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="z"/> with <img alt="x^{-1}z" class="latex" src="https://s0.wp.com/latex.php?latex=x%5E%7B-1%7Dz&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x^{-1}z"/> in the uniform distribution. If <img alt="|A|/|G|^{2}\ge \delta " class="latex" src="https://s0.wp.com/latex.php?latex=%7CA%7C%2F%7CG%7C%5E%7B2%7D%5Cge+%5Cdelta+&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="|A|/|G|^{2}\ge \delta "/>, then both |B|/|G|<img alt="\ge \delta " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cge+%5Cdelta+&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\ge \delta "/> and <img alt="|B|/|G|\ge \delta " class="latex" src="https://s0.wp.com/latex.php?latex=%7CB%7C%2F%7CG%7C%5Cge+%5Cdelta+&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="|B|/|G|\ge \delta "/>. Condition on <img alt="x\in B" class="latex" src="https://s0.wp.com/latex.php?latex=x%5Cin+B&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x\in B"/>, <img alt="y\in C" class="latex" src="https://s0.wp.com/latex.php?latex=y%5Cin+C&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="y\in C"/>, <img alt="z\in B" class="latex" src="https://s0.wp.com/latex.php?latex=z%5Cin+B&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="z\in B"/>. Then the distribution <img alt="x^{-1}zy" class="latex" src="https://s0.wp.com/latex.php?latex=x%5E%7B-1%7Dzy&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x^{-1}zy"/> is a product of three independent distributions, each uniform on a set of density <img alt="\ge \delta " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cge+%5Cdelta+&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\ge \delta "/>. (In fact, two distributions would suffice for this.) By Lemma <a href="https://emanueleviola.wordpress.com/feed/#x1-12001r7">7<!--tex4ht:ref: lem:XY-mixing --></a>, <img alt="x^{-1}zy" class="latex" src="https://s0.wp.com/latex.php?latex=x%5E%7B-1%7Dzy&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x^{-1}zy"/> is <img alt="\delta ^{-1}/|G|^{\Omega (1)}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdelta+%5E%7B-1%7D%2F%7CG%7C%5E%7B%5COmega+%281%29%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\delta ^{-1}/|G|^{\Omega (1)}"/> close to uniform in statistical distance. This implies that the above expectation equals</p>
<div style="text-align: center;"><img alt="\begin{aligned} \frac {|A|}{|G|^{2}}\cdot \frac {|B|}{|G|}\cdot \left (\frac {|C|}{|G|}\pm \frac {\delta ^{-1}}{|G|^{\Omega (1)}}\right ) &amp; \geq \delta ^{2}\left (\delta -\frac {1}{|G|^{\Omega (1)}}\right )\geq \delta ^{3}/2&gt;1/|G|, \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cfrac+%7B%7CA%7C%7D%7B%7CG%7C%5E%7B2%7D%7D%5Ccdot+%5Cfrac+%7B%7CB%7C%7D%7B%7CG%7C%7D%5Ccdot+%5Cleft+%28%5Cfrac+%7B%7CC%7C%7D%7B%7CG%7C%7D%5Cpm+%5Cfrac+%7B%5Cdelta+%5E%7B-1%7D%7D%7B%7CG%7C%5E%7B%5COmega+%281%29%7D%7D%5Cright+%29+%26+%5Cgeq+%5Cdelta+%5E%7B2%7D%5Cleft+%28%5Cdelta+-%5Cfrac+%7B1%7D%7B%7CG%7C%5E%7B%5COmega+%281%29%7D%7D%5Cright+%29%5Cgeq+%5Cdelta+%5E%7B3%7D%2F2%3E1%2F%7CG%7C%2C+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} \frac {|A|}{|G|^{2}}\cdot \frac {|B|}{|G|}\cdot \left (\frac {|C|}{|G|}\pm \frac {\delta ^{-1}}{|G|^{\Omega (1)}}\right ) &amp; \geq \delta ^{2}\left (\delta -\frac {1}{|G|^{\Omega (1)}}\right )\geq \delta ^{3}/2&gt;1/|G|, \end{aligned}"/></div>
<p style="text-align: justify;">for <img alt="\delta &gt;1/|G|^{c}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdelta+%3E1%2F%7CG%7C%5E%7Bc%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\delta &gt;1/|G|^{c}"/> for a small enough constant <img alt="c" class="latex" src="https://s0.wp.com/latex.php?latex=c&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="c"/>. Hence, product sets of density polynomial in <img alt="1/|G|" class="latex" src="https://s0.wp.com/latex.php?latex=1%2F%7CG%7C&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="1/|G|"/> contain corners.</p>
<p style="text-align: justify;">Given the above, it is natural to try to decompose an arbitrary set <img alt="A" class="latex" src="https://s0.wp.com/latex.php?latex=A&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="A"/> into product sets. We will make use of a more general result.</p>
<h4 class="subsectionHead"><span class="titlemark">7.2 </span> <a id="x1-170007.2"/>Weak Regularity Lemma</h4>
<p style="text-align: justify;">Let <img alt="U" class="latex" src="https://s0.wp.com/latex.php?latex=U&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="U"/> be some universe (we will take <img alt="U=G^{2}" class="latex" src="https://s0.wp.com/latex.php?latex=U%3DG%5E%7B2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="U=G^{2}"/>) and let <img alt="f:U\rightarrow [-1,1]" class="latex" src="https://s0.wp.com/latex.php?latex=f%3AU%5Crightarrow+%5B-1%2C1%5D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="f:U\rightarrow [-1,1]"/> be a function (for us, <img alt="f=1_{A}" class="latex" src="https://s0.wp.com/latex.php?latex=f%3D1_%7BA%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="f=1_{A}"/>). Let <img alt="D\subseteq \{d:U\rightarrow [-1,1]\}" class="latex" src="https://s0.wp.com/latex.php?latex=D%5Csubseteq+%5C%7Bd%3AU%5Crightarrow+%5B-1%2C1%5D%5C%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="D\subseteq \{d:U\rightarrow [-1,1]\}"/> be some set of functions, which can be thought of as “easy functions” or “distinguishers” (these will be rectangles or closely related to them). The next theorem shows how to decompose <img alt="f" class="latex" src="https://s0.wp.com/latex.php?latex=f&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="f"/> into a linear combination <img alt="g" class="latex" src="https://s0.wp.com/latex.php?latex=g&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="g"/> of the <img alt="d_{i}" class="latex" src="https://s0.wp.com/latex.php?latex=d_%7Bi%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="d_{i}"/> up to an error which is polynomial in the length of the combination. More specifically, <img alt="f" class="latex" src="https://s0.wp.com/latex.php?latex=f&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="f"/> will be indistinguishable from <img alt="g" class="latex" src="https://s0.wp.com/latex.php?latex=g&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="g"/> by the <img alt="d_{i}" class="latex" src="https://s0.wp.com/latex.php?latex=d_%7Bi%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="d_{i}"/>.</p>
<div class="newtheorem">
<p style="text-align: justify;"><span class="head"> <a id="x1-17001r13"/> Lemma 13. </span>Let <img alt="f:U\rightarrow [-1,1]" class="latex" src="https://s0.wp.com/latex.php?latex=f%3AU%5Crightarrow+%5B-1%2C1%5D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="f:U\rightarrow [-1,1]"/> be a function and <img alt="D\subseteq \{d:U\rightarrow [-1,1]\}" class="latex" src="https://s0.wp.com/latex.php?latex=D%5Csubseteq+%5C%7Bd%3AU%5Crightarrow+%5B-1%2C1%5D%5C%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="D\subseteq \{d:U\rightarrow [-1,1]\}"/> a set of functions. For all <img alt="\epsilon &gt;0" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cepsilon+%3E0&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\epsilon &gt;0"/>, there exists a function <img alt="g:=\sum _{i\le s}c_{i}\cdot d_{i}" class="latex" src="https://s0.wp.com/latex.php?latex=g%3A%3D%5Csum+_%7Bi%5Cle+s%7Dc_%7Bi%7D%5Ccdot+d_%7Bi%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="g:=\sum _{i\le s}c_{i}\cdot d_{i}"/> where <img alt="d_{i}\in D" class="latex" src="https://s0.wp.com/latex.php?latex=d_%7Bi%7D%5Cin+D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="d_{i}\in D"/>, <img alt="c_{i}\in \mathbb {R}" class="latex" src="https://s0.wp.com/latex.php?latex=c_%7Bi%7D%5Cin+%5Cmathbb+%7BR%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="c_{i}\in \mathbb {R}"/> and <img alt="s=1/\epsilon ^{2}" class="latex" src="https://s0.wp.com/latex.php?latex=s%3D1%2F%5Cepsilon+%5E%7B2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="s=1/\epsilon ^{2}"/> such that for all <img alt="d\in D" class="latex" src="https://s0.wp.com/latex.php?latex=d%5Cin+D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="d\in D"/></p>
<div style="text-align: center;"><img alt="\begin{aligned} \left |\mathbb {E}_{x\leftarrow U}[f(x)\cdot d(x)]-\mathbb {E}_{x\leftarrow U}[g(x)\cdot d(x)]\right |\le \epsilon . \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cleft+%7C%5Cmathbb+%7BE%7D_%7Bx%5Cleftarrow+U%7D%5Bf%28x%29%5Ccdot+d%28x%29%5D-%5Cmathbb+%7BE%7D_%7Bx%5Cleftarrow+U%7D%5Bg%28x%29%5Ccdot+d%28x%29%5D%5Cright+%7C%5Cle+%5Cepsilon+.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} \left |\mathbb {E}_{x\leftarrow U}[f(x)\cdot d(x)]-\mathbb {E}_{x\leftarrow U}[g(x)\cdot d(x)]\right |\le \epsilon . \end{aligned}"/></div>
<p style="text-align: justify;">
</p></div>
<p style="text-align: justify;">A different way to state the conclusion, which we will use, is to say that we can write <img alt="f=g+h" class="latex" src="https://s0.wp.com/latex.php?latex=f%3Dg%2Bh&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="f=g+h"/> so that <img alt="\mathbb{E} [h(x)\cdot d(x)]" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathbb%7BE%7D+%5Bh%28x%29%5Ccdot+d%28x%29%5D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\mathbb{E} [h(x)\cdot d(x)]"/> is small.</p>
<p style="text-align: justify;">The lemma is due to Frieze and Kannan <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/conf/focs/FriezeK96">FK96</a>]</span>. It is called “weak” because it came after Szemerédi’s regularity lemma, which has a stronger distinguishing conclusion. However, the lemma is also “strong” in the sense that Szemerédi’s regularity lemma has <img alt="s" class="latex" src="https://s0.wp.com/latex.php?latex=s&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="s"/> as a tower of <img alt="1/\epsilon " class="latex" src="https://s0.wp.com/latex.php?latex=1%2F%5Cepsilon+&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="1/\epsilon "/> whereas here we have <img alt="s" class="latex" src="https://s0.wp.com/latex.php?latex=s&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="s"/> polynomial in <img alt="1/\epsilon " class="latex" src="https://s0.wp.com/latex.php?latex=1%2F%5Cepsilon+&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="1/\epsilon "/>. The weak regularity lemma is also simpler. There also exists a proof <span class="cite">[<a href="https://emanueleviola.wordpress.com/feed/#XTao2017-szemerediproof">Tao17</a>]</span> of Szemerédi’s theorem (on arithmetic progressions), which uses weak regularity as opposed to the full regularity lemma used initially.</p>
<div class="proof">
<p style="text-align: justify;"><span class="head"> Proof. </span>We will construct the approximation <img alt="g" class="latex" src="https://s0.wp.com/latex.php?latex=g&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="g"/> through an iterative process producing functions <img alt="g_{0},g_{1},\dots ,g" class="latex" src="https://s0.wp.com/latex.php?latex=g_%7B0%7D%2Cg_%7B1%7D%2C%5Cdots+%2Cg&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="g_{0},g_{1},\dots ,g"/>. We will show that <img alt="||f-g_{i}||_{2}^{2}" class="latex" src="https://s0.wp.com/latex.php?latex=%7C%7Cf-g_%7Bi%7D%7C%7C_%7B2%7D%5E%7B2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="||f-g_{i}||_{2}^{2}"/> decreases by <img alt="\ge \epsilon ^{2}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cge+%5Cepsilon+%5E%7B2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\ge \epsilon ^{2}"/> each iteration.</p>
<p style="text-align: justify;"><b>Start</b>: Define <img alt="g_{0}=0" class="latex" src="https://s0.wp.com/latex.php?latex=g_%7B0%7D%3D0&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="g_{0}=0"/> (which can be realized setting <img alt="c_{0}=0" class="latex" src="https://s0.wp.com/latex.php?latex=c_%7B0%7D%3D0&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="c_{0}=0"/>).</p>
<p style="text-align: justify;"><b>Iterate</b>: If not done, there exists <img alt="d\in D" class="latex" src="https://s0.wp.com/latex.php?latex=d%5Cin+D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="d\in D"/> such that <img alt="|\mathbb {E}[(f-g)\cdot d]|&gt;\epsilon " class="latex" src="https://s0.wp.com/latex.php?latex=%7C%5Cmathbb+%7BE%7D%5B%28f-g%29%5Ccdot+d%5D%7C%3E%5Cepsilon+&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="|\mathbb {E}[(f-g)\cdot d]|&gt;\epsilon "/>. Assume without loss of generality <img alt="\mathbb {E}[(f-g)\cdot d]&gt;\epsilon " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BE%7D%5B%28f-g%29%5Ccdot+d%5D%3E%5Cepsilon+&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\mathbb {E}[(f-g)\cdot d]&gt;\epsilon "/>.</p>
<p style="text-align: justify;"><b>Update</b>: <img alt="g':=g+\lambda d" class="latex" src="https://s0.wp.com/latex.php?latex=g%27%3A%3Dg%2B%5Clambda+d&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="g':=g+\lambda d"/> where <img alt="\lambda \in \mathbb {R}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Clambda+%5Cin+%5Cmathbb+%7BR%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\lambda \in \mathbb {R}"/> shall be picked later.</p>
<p style="text-align: justify;">Let us analyze the progress made by the algorithm.</p>
<div style="text-align: center;"><img alt="\begin{aligned} ||f-g'||_{2}^{2} &amp; =\mathbb {E}_{x}[(f-g')^{2}(x)]\\ &amp; =\mathbb {E}_{x}[(f-g-\lambda d)^{2}(x)]\\ &amp; =\mathbb {E}_{x}[(f-g)^{2}]+\mathbb {E}_{x}[\lambda ^{2}d^{2}(x)]-2\mathbb {E}_{x}[(f-g)\cdot \lambda d(x)]\\ &amp; \leq ||f-g||_{2}^{2}+\lambda ^{2}-2\lambda \mathbb {E}_{x}[(f-g)d(x)]\\ &amp; \leq ||f-g||_{2}^{2}+\lambda ^{2}-2\lambda \epsilon \\ &amp; \leq ||f-g||_{2}^{2}-\epsilon ^{2} \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%7C%7Cf-g%27%7C%7C_%7B2%7D%5E%7B2%7D+%26+%3D%5Cmathbb+%7BE%7D_%7Bx%7D%5B%28f-g%27%29%5E%7B2%7D%28x%29%5D%5C%5C+%26+%3D%5Cmathbb+%7BE%7D_%7Bx%7D%5B%28f-g-%5Clambda+d%29%5E%7B2%7D%28x%29%5D%5C%5C+%26+%3D%5Cmathbb+%7BE%7D_%7Bx%7D%5B%28f-g%29%5E%7B2%7D%5D%2B%5Cmathbb+%7BE%7D_%7Bx%7D%5B%5Clambda+%5E%7B2%7Dd%5E%7B2%7D%28x%29%5D-2%5Cmathbb+%7BE%7D_%7Bx%7D%5B%28f-g%29%5Ccdot+%5Clambda+d%28x%29%5D%5C%5C+%26+%5Cleq+%7C%7Cf-g%7C%7C_%7B2%7D%5E%7B2%7D%2B%5Clambda+%5E%7B2%7D-2%5Clambda+%5Cmathbb+%7BE%7D_%7Bx%7D%5B%28f-g%29d%28x%29%5D%5C%5C+%26+%5Cleq+%7C%7Cf-g%7C%7C_%7B2%7D%5E%7B2%7D%2B%5Clambda+%5E%7B2%7D-2%5Clambda+%5Cepsilon+%5C%5C+%26+%5Cleq+%7C%7Cf-g%7C%7C_%7B2%7D%5E%7B2%7D-%5Cepsilon+%5E%7B2%7D+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} ||f-g'||_{2}^{2} &amp; =\mathbb {E}_{x}[(f-g')^{2}(x)]\\ &amp; =\mathbb {E}_{x}[(f-g-\lambda d)^{2}(x)]\\ &amp; =\mathbb {E}_{x}[(f-g)^{2}]+\mathbb {E}_{x}[\lambda ^{2}d^{2}(x)]-2\mathbb {E}_{x}[(f-g)\cdot \lambda d(x)]\\ &amp; \leq ||f-g||_{2}^{2}+\lambda ^{2}-2\lambda \mathbb {E}_{x}[(f-g)d(x)]\\ &amp; \leq ||f-g||_{2}^{2}+\lambda ^{2}-2\lambda \epsilon \\ &amp; \leq ||f-g||_{2}^{2}-\epsilon ^{2} \end{aligned}"/></div>
<p>where the last line follows by taking <img alt="\lambda =\epsilon " class="latex" src="https://s0.wp.com/latex.php?latex=%5Clambda+%3D%5Cepsilon+&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\lambda =\epsilon "/>. Therefore, there can only be <img alt="1/\epsilon ^{2}" class="latex" src="https://s0.wp.com/latex.php?latex=1%2F%5Cepsilon+%5E%7B2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="1/\epsilon ^{2}"/> iterations because <img alt="||f-g_{0}||_{2}^{2}=||f||_{2}^{2}\leq 1" class="latex" src="https://s0.wp.com/latex.php?latex=%7C%7Cf-g_%7B0%7D%7C%7C_%7B2%7D%5E%7B2%7D%3D%7C%7Cf%7C%7C_%7B2%7D%5E%7B2%7D%5Cleq+1&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="||f-g_{0}||_{2}^{2}=||f||_{2}^{2}\leq 1"/>. <img alt="\square " class="latex" src="https://s0.wp.com/latex.php?latex=%5Csquare+&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\square "/></p>
</div>
<h4 class="subsectionHead"><span class="titlemark">7.3 </span> <a id="x1-180007.3"/>Getting more for rectangles</h4>
<p style="text-align: justify;">Returning to the main proof, we will use the weak regularity lemma to approximate the indicator function for arbitrary <img alt="A" class="latex" src="https://s0.wp.com/latex.php?latex=A&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="A"/> by rectangles. That is, we take <img alt="D" class="latex" src="https://s0.wp.com/latex.php?latex=D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="D"/> to be the collection of indicator functions for all sets of the form <img alt="S\times T" class="latex" src="https://s0.wp.com/latex.php?latex=S%5Ctimes+T&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="S\times T"/> for <img alt="S,T\subseteq G" class="latex" src="https://s0.wp.com/latex.php?latex=S%2CT%5Csubseteq+G&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="S,T\subseteq G"/>. The weak regularity lemma shows how to decompose <img alt="A" class="latex" src="https://s0.wp.com/latex.php?latex=A&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="A"/> into a linear combination of rectangles. These rectangles may overlap. However, we ideally want <img alt="A" class="latex" src="https://s0.wp.com/latex.php?latex=A&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="A"/> to be a linear combination of <em>non-overlapping</em> rectangles. In other words, we want a <em>partition </em>of rectangles. It is possible to achieve this at the price of exponentiating the number of rectangles. Note that an exponential loss is necessary even if <img alt="S=G" class="latex" src="https://s0.wp.com/latex.php?latex=S%3DG&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="S=G"/> in every <img alt="S\times T" class="latex" src="https://s0.wp.com/latex.php?latex=S%5Ctimes+T&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="S\times T"/> rectangle; or in other words in the uni-dimensional setting. This is one step where the terminology “rectangle” may be misleading – the set <img alt="T" class="latex" src="https://s0.wp.com/latex.php?latex=T&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="T"/> is not necessarily an interval. If it was, a polynomial rather than exponential blow-up would have sufficed to remove overlaps.</p>
<div class="newtheorem">
<p style="text-align: justify;"><span class="head"> <a id="x1-18001r14"/> Claim 14. </span>Given a decomposition of <img alt="A" class="latex" src="https://s0.wp.com/latex.php?latex=A&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="A"/> into rectangles from the weak regularity lemma with <img alt="s" class="latex" src="https://s0.wp.com/latex.php?latex=s&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="s"/> functions, there exists a decomposition with <img alt="2^{O(s)}" class="latex" src="https://s0.wp.com/latex.php?latex=2%5E%7BO%28s%29%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="2^{O(s)}"/> rectangles which don’t overlap.</p>
<p style="text-align: justify;">
</p></div>
<div class="proof">
<p style="text-align: justify;"><span class="head"> Proof. </span>Exercise. <img alt="\square " class="latex" src="https://s0.wp.com/latex.php?latex=%5Csquare+&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\square "/></p>
</div>
<p style="text-align: justify;">In the above decomposition, note that it is natural to take the coefficients of rectangles to be the density of points in <img alt="A" class="latex" src="https://s0.wp.com/latex.php?latex=A&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="A"/> that are in the rectangle. This gives rise to the following claim.</p>
<div class="newtheorem">
<p style="text-align: justify;"><span class="head"> <a id="x1-18002r15"/> Claim 15. </span>The weights of the rectangles in the above claim can be the average of <img alt="f" class="latex" src="https://s0.wp.com/latex.php?latex=f&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="f"/> in the rectangle, at the cost of doubling the error.</p>
<p style="text-align: justify;">
</p></div>
<p style="text-align: justify;">Consequently, we have that <img alt="f=g+h" class="latex" src="https://s0.wp.com/latex.php?latex=f%3Dg%2Bh&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="f=g+h"/>, where <img alt="g" class="latex" src="https://s0.wp.com/latex.php?latex=g&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="g"/> is the sum of <img alt="2^{O(s)}" class="latex" src="https://s0.wp.com/latex.php?latex=2%5E%7BO%28s%29%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="2^{O(s)}"/> non-overlapping rectangles <img alt="S\times T" class="latex" src="https://s0.wp.com/latex.php?latex=S%5Ctimes+T&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="S\times T"/> with coefficients <img alt="\mathbb{P} _{(x,y)\in S\times T}[f(x,y)=1]" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathbb%7BP%7D+_%7B%28x%2Cy%29%5Cin+S%5Ctimes+T%7D%5Bf%28x%2Cy%29%3D1%5D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\mathbb{P} _{(x,y)\in S\times T}[f(x,y)=1]"/>.</p>
<div class="proof">
<p style="text-align: justify;"><span class="head"> Proof. </span>Let <img alt="g" class="latex" src="https://s0.wp.com/latex.php?latex=g&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="g"/> be a partition decomposition with arbitrary weights. Let <img alt="g'" class="latex" src="https://s0.wp.com/latex.php?latex=g%27&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="g'"/> be a partition decomposition with weights being the average of <img alt="f" class="latex" src="https://s0.wp.com/latex.php?latex=f&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="f"/>. It is enough to show that for all rectangle distinguishers <img alt="d\in D" class="latex" src="https://s0.wp.com/latex.php?latex=d%5Cin+D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="d\in D"/></p>
<div style="text-align: center;"><img alt="\begin{aligned} |\mathbb {E}[(f-g')d]|\leq |\mathbb {E}[(f-g)d]|. \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%7C%5Cmathbb+%7BE%7D%5B%28f-g%27%29d%5D%7C%5Cleq+%7C%5Cmathbb+%7BE%7D%5B%28f-g%29d%5D%7C.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} |\mathbb {E}[(f-g')d]|\leq |\mathbb {E}[(f-g)d]|. \end{aligned}"/></div>
<p>By the triangle inequality, we have that</p>
<div style="text-align: center;"><img alt="\begin{aligned} |\mathbb {E}[(f-g')d]|\leq |\mathbb {E}[(f-g)d]|+|\mathbb {E}[(g-g')d]|. \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%7C%5Cmathbb+%7BE%7D%5B%28f-g%27%29d%5D%7C%5Cleq+%7C%5Cmathbb+%7BE%7D%5B%28f-g%29d%5D%7C%2B%7C%5Cmathbb+%7BE%7D%5B%28g-g%27%29d%5D%7C.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} |\mathbb {E}[(f-g')d]|\leq |\mathbb {E}[(f-g)d]|+|\mathbb {E}[(g-g')d]|. \end{aligned}"/></div>
<p>To bound <img alt="\mathbb {E}[(g-g')d]|" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BE%7D%5B%28g-g%27%29d%5D%7C&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\mathbb {E}[(g-g')d]|"/>, note that the error is maximized for a <img alt="d" class="latex" src="https://s0.wp.com/latex.php?latex=d&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="d"/> that respects the decomposition in non-overlapping rectangles, i.e., <img alt="d" class="latex" src="https://s0.wp.com/latex.php?latex=d&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="d"/> is the union of some non-overlapping rectangles from the decomposition. This can be argued using that, unlike <img alt="f" class="latex" src="https://s0.wp.com/latex.php?latex=f&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="f"/>, the value of <img alt="g" class="latex" src="https://s0.wp.com/latex.php?latex=g&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="g"/> and <img alt="g'" class="latex" src="https://s0.wp.com/latex.php?latex=g%27&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="g'"/> on a rectangle <img alt="S\times T" class="latex" src="https://s0.wp.com/latex.php?latex=S%5Ctimes+T&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="S\times T"/> from the decomposition is fixed. But, from the point of “view” of such <img alt="d" class="latex" src="https://s0.wp.com/latex.php?latex=d&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="d"/>, <img alt="g'=f" class="latex" src="https://s0.wp.com/latex.php?latex=g%27%3Df&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="g'=f"/>! More formally, <img alt="\mathbb {E}[(g-g')d]=\mathbb {E}[(g-f)d]" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BE%7D%5B%28g-g%27%29d%5D%3D%5Cmathbb+%7BE%7D%5B%28g-f%29d%5D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\mathbb {E}[(g-g')d]=\mathbb {E}[(g-f)d]"/>. This gives</p>
<div style="text-align: center;"><img alt="\begin{aligned} |\mathbb {E}[(f-g')d]|\leq 2|\mathbb {E}[(f-g)d]| \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%7C%5Cmathbb+%7BE%7D%5B%28f-g%27%29d%5D%7C%5Cleq+2%7C%5Cmathbb+%7BE%7D%5B%28f-g%29d%5D%7C+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} |\mathbb {E}[(f-g')d]|\leq 2|\mathbb {E}[(f-g)d]| \end{aligned}"/></div>
<p>and concludes the proof. <img alt="\square " class="latex" src="https://s0.wp.com/latex.php?latex=%5Csquare+&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\square "/></p>
</div>
<p style="text-align: justify;">We need to get still a little more from this decomposition. In our application of the weak regularity lemma above, we took the set of distinguishers to be characteristic functions of rectangles. That is, distinguishers that can be written as <img alt="U(x)\cdot V(y)" class="latex" src="https://s0.wp.com/latex.php?latex=U%28x%29%5Ccdot+V%28y%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="U(x)\cdot V(y)"/> where <img alt="U" class="latex" src="https://s0.wp.com/latex.php?latex=U&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="U"/> and <img alt="V" class="latex" src="https://s0.wp.com/latex.php?latex=V&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="V"/> map <img alt="G\to \{0,1\}" class="latex" src="https://s0.wp.com/latex.php?latex=G%5Cto+%5C%7B0%2C1%5C%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="G\to \{0,1\}"/>. We will use that the same guarantee holds for <img alt="U" class="latex" src="https://s0.wp.com/latex.php?latex=U&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="U"/> and <img alt="V" class="latex" src="https://s0.wp.com/latex.php?latex=V&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="V"/> with range <img alt="[-1,1]" class="latex" src="https://s0.wp.com/latex.php?latex=%5B-1%2C1%5D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="[-1,1]"/>, up to a constant factor loss in the error. Indeed, let <img alt="U" class="latex" src="https://s0.wp.com/latex.php?latex=U&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="U"/> and <img alt="V" class="latex" src="https://s0.wp.com/latex.php?latex=V&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="V"/> have range <img alt="[-1,1]" class="latex" src="https://s0.wp.com/latex.php?latex=%5B-1%2C1%5D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="[-1,1]"/>. Write <img alt="U=U_{+}-U_{-}" class="latex" src="https://s0.wp.com/latex.php?latex=U%3DU_%7B%2B%7D-U_%7B-%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="U=U_{+}-U_{-}"/> where <img alt="U_{+}" class="latex" src="https://s0.wp.com/latex.php?latex=U_%7B%2B%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="U_{+}"/> and <img alt="U_{-}" class="latex" src="https://s0.wp.com/latex.php?latex=U_%7B-%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="U_{-}"/> have range <img alt="[0,1]" class="latex" src="https://s0.wp.com/latex.php?latex=%5B0%2C1%5D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="[0,1]"/>, and the same for <img alt="V" class="latex" src="https://s0.wp.com/latex.php?latex=V&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="V"/>. The error for distinguisher <img alt="U\cdot V" class="latex" src="https://s0.wp.com/latex.php?latex=U%5Ccdot+V&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="U\cdot V"/> is at most the sum of the errors for distinguishers <img alt="U_{+}\cdot V_{+}" class="latex" src="https://s0.wp.com/latex.php?latex=U_%7B%2B%7D%5Ccdot+V_%7B%2B%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="U_{+}\cdot V_{+}"/>, <img alt="U_{+}\cdot V_{-}" class="latex" src="https://s0.wp.com/latex.php?latex=U_%7B%2B%7D%5Ccdot+V_%7B-%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="U_{+}\cdot V_{-}"/>, <img alt="U_{-}\cdot V_{+}" class="latex" src="https://s0.wp.com/latex.php?latex=U_%7B-%7D%5Ccdot+V_%7B%2B%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="U_{-}\cdot V_{+}"/>, and <img alt="U_{-}\cdot V_{-}" class="latex" src="https://s0.wp.com/latex.php?latex=U_%7B-%7D%5Ccdot+V_%7B-%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="U_{-}\cdot V_{-}"/>. So we can restrict our attention to distinguishers <img alt="U(x)\cdot V(y)" class="latex" src="https://s0.wp.com/latex.php?latex=U%28x%29%5Ccdot+V%28y%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="U(x)\cdot V(y)"/> where <img alt="U" class="latex" src="https://s0.wp.com/latex.php?latex=U&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="U"/> and <img alt="V" class="latex" src="https://s0.wp.com/latex.php?latex=V&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="V"/> have range <img alt="[0,1]" class="latex" src="https://s0.wp.com/latex.php?latex=%5B0%2C1%5D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="[0,1]"/>. In turn, a function <img alt="U(x)" class="latex" src="https://s0.wp.com/latex.php?latex=U%28x%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="U(x)"/> with range <img alt="[0,1]" class="latex" src="https://s0.wp.com/latex.php?latex=%5B0%2C1%5D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="[0,1]"/> can be written as an expectation <img alt="\mathbb{E} _{a}U_{a}(x)" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathbb%7BE%7D+_%7Ba%7DU_%7Ba%7D%28x%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\mathbb{E} _{a}U_{a}(x)"/> for functions <img alt="U_{a}" class="latex" src="https://s0.wp.com/latex.php?latex=U_%7Ba%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="U_{a}"/> with range <img alt="\{0,1\}" class="latex" src="https://s0.wp.com/latex.php?latex=%5C%7B0%2C1%5C%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\{0,1\}"/>, and the same for <img alt="V" class="latex" src="https://s0.wp.com/latex.php?latex=V&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="V"/>. We conclude by observing that</p>
<div style="text-align: center;"><img alt="\begin{aligned} \mathbb{E} _{x,y}[(f-g)(x,y)\mathbb{E} _{a}U_{a}(x)\cdot \mathbb{E} _{b}V_{b}(y)]\le \max _{a,b}\mathbb{E} _{x,y}[(f-g)(x,y)U_{a}(x)\cdot V_{b}(y)]. \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cmathbb%7BE%7D+_%7Bx%2Cy%7D%5B%28f-g%29%28x%2Cy%29%5Cmathbb%7BE%7D+_%7Ba%7DU_%7Ba%7D%28x%29%5Ccdot+%5Cmathbb%7BE%7D+_%7Bb%7DV_%7Bb%7D%28y%29%5D%5Cle+%5Cmax+_%7Ba%2Cb%7D%5Cmathbb%7BE%7D+_%7Bx%2Cy%7D%5B%28f-g%29%28x%2Cy%29U_%7Ba%7D%28x%29%5Ccdot+V_%7Bb%7D%28y%29%5D.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} \mathbb{E} _{x,y}[(f-g)(x,y)\mathbb{E} _{a}U_{a}(x)\cdot \mathbb{E} _{b}V_{b}(y)]\le \max _{a,b}\mathbb{E} _{x,y}[(f-g)(x,y)U_{a}(x)\cdot V_{b}(y)]. \end{aligned}"/></div>
<h4 class="subsectionHead"><span class="titlemark">7.4 </span> <a id="x1-190007.4"/>Proof</h4>
<p style="text-align: justify;">Let us now finish the proof by showing a corner exists for sufficiently dense sets <img alt="A\subseteq G^{2}" class="latex" src="https://s0.wp.com/latex.php?latex=A%5Csubseteq+G%5E%7B2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="A\subseteq G^{2}"/>. We’ll use three types of decompositions for <img alt="f:G^{2}\rightarrow \{0,1\}" class="latex" src="https://s0.wp.com/latex.php?latex=f%3AG%5E%7B2%7D%5Crightarrow+%5C%7B0%2C1%5C%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="f:G^{2}\rightarrow \{0,1\}"/>, with respect to the following three types of distinguishers, where <img alt="U_{i}" class="latex" src="https://s0.wp.com/latex.php?latex=U_%7Bi%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="U_{i}"/> and <img alt="V_{i}" class="latex" src="https://s0.wp.com/latex.php?latex=V_%7Bi%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="V_{i}"/> have range <img alt="\{0,1\}" class="latex" src="https://s0.wp.com/latex.php?latex=%5C%7B0%2C1%5C%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\{0,1\}"/>:</p>
<ol class="enumerate1">
<li class="enumerate" id="x1-19002x1"><img alt="U_{1}(x)\cdot V_{1}(y)" class="latex" src="https://s0.wp.com/latex.php?latex=U_%7B1%7D%28x%29%5Ccdot+V_%7B1%7D%28y%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="U_{1}(x)\cdot V_{1}(y)"/>,</li>
<li class="enumerate" id="x1-19004x2"><img alt="U_{2}(xy)\cdot V_{2}(y)" class="latex" src="https://s0.wp.com/latex.php?latex=U_%7B2%7D%28xy%29%5Ccdot+V_%7B2%7D%28y%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="U_{2}(xy)\cdot V_{2}(y)"/>,</li>
<li class="enumerate" id="x1-19006x3"><img alt="U_{3}(x)\cdot V_{3}(xy)" class="latex" src="https://s0.wp.com/latex.php?latex=U_%7B3%7D%28x%29%5Ccdot+V_%7B3%7D%28xy%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="U_{3}(x)\cdot V_{3}(xy)"/>.</li>
</ol>
<p style="text-align: justify;">The first type is just rectangles, what we have been discussing until now. The distinguishers in the last two classes can be visualized over <img alt="\mathbb {R}^{2}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BR%7D%5E%7B2%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\mathbb {R}^{2}"/> as parallelograms with a 45-degree angle. The same extra properties we discussed for rectangles can be verified hold for them too.</p>
<p style="text-align: justify;">Recall that we want to show</p>
<div style="text-align: center;"><img alt="\begin{aligned} \mathbb {E}_{x,y,g}[f(x,y)f(xg,y)f(x,gy)]&gt;\frac {1}{|G|}. \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cmathbb+%7BE%7D_%7Bx%2Cy%2Cg%7D%5Bf%28x%2Cy%29f%28xg%2Cy%29f%28x%2Cgy%29%5D%3E%5Cfrac+%7B1%7D%7B%7CG%7C%7D.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} \mathbb {E}_{x,y,g}[f(x,y)f(xg,y)f(x,gy)]&gt;\frac {1}{|G|}. \end{aligned}"/></div>
<p>We’ll decompose the <img alt="i" class="latex" src="https://s0.wp.com/latex.php?latex=i&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="i"/>-th occurrence of <img alt="f" class="latex" src="https://s0.wp.com/latex.php?latex=f&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="f"/> via the <img alt="i" class="latex" src="https://s0.wp.com/latex.php?latex=i&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="i"/>-th decomposition listed above. We’ll write this decomposition as <img alt="f=g_{i}+h_{i}" class="latex" src="https://s0.wp.com/latex.php?latex=f%3Dg_%7Bi%7D%2Bh_%7Bi%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="f=g_{i}+h_{i}"/>. We apply this in a certain order to produce sums of products of three functions. The inputs to the functions don’t change, so to avoid clutter we do not write them, and it is understood that in each product of three functions the inputs are, in order <img alt="(x,y),(xg,y),(x,gy)" class="latex" src="https://s0.wp.com/latex.php?latex=%28x%2Cy%29%2C%28xg%2Cy%29%2C%28x%2Cgy%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="(x,y),(xg,y),(x,gy)"/>. The decomposition is:</p>
<div style="text-align: center;"><img alt="\begin{aligned} &amp; fff\\ = &amp; ffg_{3}+ffh_{3}\\ = &amp; fg_{2}g_{3}+fh_{2}g_{3}+ffh_{3}\\ = &amp; g_{1}g_{2}g_{3}+h_{1}g_{2}g_{3}+fh_{2}g_{3}+ffh_{3}. \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%26+fff%5C%5C+%3D+%26+ffg_%7B3%7D%2Bffh_%7B3%7D%5C%5C+%3D+%26+fg_%7B2%7Dg_%7B3%7D%2Bfh_%7B2%7Dg_%7B3%7D%2Bffh_%7B3%7D%5C%5C+%3D+%26+g_%7B1%7Dg_%7B2%7Dg_%7B3%7D%2Bh_%7B1%7Dg_%7B2%7Dg_%7B3%7D%2Bfh_%7B2%7Dg_%7B3%7D%2Bffh_%7B3%7D.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} &amp; fff\\ = &amp; ffg_{3}+ffh_{3}\\ = &amp; fg_{2}g_{3}+fh_{2}g_{3}+ffh_{3}\\ = &amp; g_{1}g_{2}g_{3}+h_{1}g_{2}g_{3}+fh_{2}g_{3}+ffh_{3}. \end{aligned}"/></div>
<p style="text-align: justify;">We first show that the expectation of the first term is big. This takes the next two claims. Then we show that the expectations of the other terms are small.</p>
<div class="newtheorem">
<p style="text-align: justify;"><span class="head"> <a id="x1-19007r16"/> Claim 16. </span>For all <img alt="g\in G" class="latex" src="https://s0.wp.com/latex.php?latex=g%5Cin+G&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="g\in G"/>, the expectations <img alt="\mathbb {E}_{x,y}[g_{1}(x,y)g_{2}(xg,y)g_{3}(x,gy)]" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BE%7D_%7Bx%2Cy%7D%5Bg_%7B1%7D%28x%2Cy%29g_%7B2%7D%28xg%2Cy%29g_%7B3%7D%28x%2Cgy%29%5D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\mathbb {E}_{x,y}[g_{1}(x,y)g_{2}(xg,y)g_{3}(x,gy)]"/> are the same up to an error of <img alt="2^{O(s)}/|G|^{\Omega (1)}" class="latex" src="https://s0.wp.com/latex.php?latex=2%5E%7BO%28s%29%7D%2F%7CG%7C%5E%7B%5COmega+%281%29%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="2^{O(s)}/|G|^{\Omega (1)}"/>.</p>
<p style="text-align: justify;">
</p></div>
<div class="proof">
<p style="text-align: justify;"><span class="head"> Proof. </span>We just need to get error <img alt="1/|G|^{\Omega (1)}" class="latex" src="https://s0.wp.com/latex.php?latex=1%2F%7CG%7C%5E%7B%5COmega+%281%29%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="1/|G|^{\Omega (1)}"/> for any product of three functions for the three decomposition types. We have:</p>
<div style="text-align: center;"><img alt="\begin{aligned} &amp; \mathbb {E}_{x,y}[c_{1}U_{1}(x)V_{1}(y)\cdot c_{2}U_{2}(xgy)V_{2}(y)\cdot c_{3}U_{3}(x)V_{3}(xgy)]\\ = &amp; c_{1}c_{2}c_{3}\mathbb {E}_{x,y}[(U_{1}\cdot U_{3})(x)(V_{1}\cdot V_{2})(y)(U_{2}\cdot V_{3})(xgy)]\\ = &amp; c_{1}c_{2}c_{3}\cdot \mathbb {E}_{x}[(U_{1}\cdot U_{3})(x)]\cdot \mathbb {E}_{y}[(V_{1}\cdot V_{2})(y)]\cdot \mathbb {E}_{z}[(U_{2}\cdot V_{3})(z)]\pm \frac {1}{|G|^{\Omega (1)}}. \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%26+%5Cmathbb+%7BE%7D_%7Bx%2Cy%7D%5Bc_%7B1%7DU_%7B1%7D%28x%29V_%7B1%7D%28y%29%5Ccdot+c_%7B2%7DU_%7B2%7D%28xgy%29V_%7B2%7D%28y%29%5Ccdot+c_%7B3%7DU_%7B3%7D%28x%29V_%7B3%7D%28xgy%29%5D%5C%5C+%3D+%26+c_%7B1%7Dc_%7B2%7Dc_%7B3%7D%5Cmathbb+%7BE%7D_%7Bx%2Cy%7D%5B%28U_%7B1%7D%5Ccdot+U_%7B3%7D%29%28x%29%28V_%7B1%7D%5Ccdot+V_%7B2%7D%29%28y%29%28U_%7B2%7D%5Ccdot+V_%7B3%7D%29%28xgy%29%5D%5C%5C+%3D+%26+c_%7B1%7Dc_%7B2%7Dc_%7B3%7D%5Ccdot+%5Cmathbb+%7BE%7D_%7Bx%7D%5B%28U_%7B1%7D%5Ccdot+U_%7B3%7D%29%28x%29%5D%5Ccdot+%5Cmathbb+%7BE%7D_%7By%7D%5B%28V_%7B1%7D%5Ccdot+V_%7B2%7D%29%28y%29%5D%5Ccdot+%5Cmathbb+%7BE%7D_%7Bz%7D%5B%28U_%7B2%7D%5Ccdot+V_%7B3%7D%29%28z%29%5D%5Cpm+%5Cfrac+%7B1%7D%7B%7CG%7C%5E%7B%5COmega+%281%29%7D%7D.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} &amp; \mathbb {E}_{x,y}[c_{1}U_{1}(x)V_{1}(y)\cdot c_{2}U_{2}(xgy)V_{2}(y)\cdot c_{3}U_{3}(x)V_{3}(xgy)]\\ = &amp; c_{1}c_{2}c_{3}\mathbb {E}_{x,y}[(U_{1}\cdot U_{3})(x)(V_{1}\cdot V_{2})(y)(U_{2}\cdot V_{3})(xgy)]\\ = &amp; c_{1}c_{2}c_{3}\cdot \mathbb {E}_{x}[(U_{1}\cdot U_{3})(x)]\cdot \mathbb {E}_{y}[(V_{1}\cdot V_{2})(y)]\cdot \mathbb {E}_{z}[(U_{2}\cdot V_{3})(z)]\pm \frac {1}{|G|^{\Omega (1)}}. \end{aligned}"/></div>
<p style="text-align: justify;">This is similar to what we discussed in the overview, and is where we use mixing. Specifically, if <img alt="\mathbb {E}_{x}[(U_{1}\cdot U_{3})(x)]" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BE%7D_%7Bx%7D%5B%28U_%7B1%7D%5Ccdot+U_%7B3%7D%29%28x%29%5D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\mathbb {E}_{x}[(U_{1}\cdot U_{3})(x)]"/> or <img alt="\mathbb {E}_{y}[(V_{1}\cdot V_{2})(y)]" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BE%7D_%7By%7D%5B%28V_%7B1%7D%5Ccdot+V_%7B2%7D%29%28y%29%5D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\mathbb {E}_{y}[(V_{1}\cdot V_{2})(y)]"/> are at most <img alt="1/|G|^{c}" class="latex" src="https://s0.wp.com/latex.php?latex=1%2F%7CG%7C%5E%7Bc%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="1/|G|^{c}"/> for a small enough constant <img alt="c" class="latex" src="https://s0.wp.com/latex.php?latex=c&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="c"/> than we are done. Otherwise, conditioned on <img alt="(U_{1}\cdot U_{3})(x)=1" class="latex" src="https://s0.wp.com/latex.php?latex=%28U_%7B1%7D%5Ccdot+U_%7B3%7D%29%28x%29%3D1&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="(U_{1}\cdot U_{3})(x)=1"/>, the distribution on <img alt="x" class="latex" src="https://s0.wp.com/latex.php?latex=x&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x"/> is uniform over a set of density <img alt="1/|G|^{c}" class="latex" src="https://s0.wp.com/latex.php?latex=1%2F%7CG%7C%5E%7Bc%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="1/|G|^{c}"/>, and the same holds for <img alt="y" class="latex" src="https://s0.wp.com/latex.php?latex=y&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="y"/>, and the result follows by Lemma <a href="https://emanueleviola.wordpress.com/feed/#x1-12001r7">7<!--tex4ht:ref: lem:XY-mixing --></a>. <img alt="\square " class="latex" src="https://s0.wp.com/latex.php?latex=%5Csquare+&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\square "/></p>
</div>
<p style="text-align: justify;">Recall that we start with a set of density <img alt="\ge 1/\log ^{a}|G|" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cge+1%2F%5Clog+%5E%7Ba%7D%7CG%7C&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\ge 1/\log ^{a}|G|"/>.</p>
<div class="newtheorem">
<p style="text-align: justify;"><span class="head"> <a id="x1-19008r17"/> Claim 17. </span><img alt="\mathbb {E}_{x,y}[g_{1}(x,y)g_{2}(x,y)g_{3}(x,y)]&gt;1/\log ^{4a}|G|" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BE%7D_%7Bx%2Cy%7D%5Bg_%7B1%7D%28x%2Cy%29g_%7B2%7D%28x%2Cy%29g_%7B3%7D%28x%2Cy%29%5D%3E1%2F%5Clog+%5E%7B4a%7D%7CG%7C&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\mathbb {E}_{x,y}[g_{1}(x,y)g_{2}(x,y)g_{3}(x,y)]&gt;1/\log ^{4a}|G|"/>.</p>
<p style="text-align: justify;">
</p></div>
<div class="proof">
<p style="text-align: justify;"><span class="head"> Proof. </span>We will relate the expectation over <img alt="x,y" class="latex" src="https://s0.wp.com/latex.php?latex=x%2Cy&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x,y"/> to <img alt="f" class="latex" src="https://s0.wp.com/latex.php?latex=f&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="f"/> using the Hölder inequality: For random variables <img alt="X_{1},X_{2},\ldots ,X_{k}" class="latex" src="https://s0.wp.com/latex.php?latex=X_%7B1%7D%2CX_%7B2%7D%2C%5Cldots+%2CX_%7Bk%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="X_{1},X_{2},\ldots ,X_{k}"/>,</p>
<div style="text-align: center;"><img alt="\begin{aligned} \mathbb {E}[X_{1}\dots X_{k}]\leq \prod _{i=1}^{k}\mathbb {E}[X_{i}^{c_{i}}]^{1/c_{i}}\text { such that }\sum 1/c_{i}=1. \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cmathbb+%7BE%7D%5BX_%7B1%7D%5Cdots+X_%7Bk%7D%5D%5Cleq+%5Cprod+_%7Bi%3D1%7D%5E%7Bk%7D%5Cmathbb+%7BE%7D%5BX_%7Bi%7D%5E%7Bc_%7Bi%7D%7D%5D%5E%7B1%2Fc_%7Bi%7D%7D%5Ctext+%7B+such+that+%7D%5Csum+1%2Fc_%7Bi%7D%3D1.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} \mathbb {E}[X_{1}\dots X_{k}]\leq \prod _{i=1}^{k}\mathbb {E}[X_{i}^{c_{i}}]^{1/c_{i}}\text { such that }\sum 1/c_{i}=1. \end{aligned}"/></div>
<p style="text-align: justify;">To apply this inequality in our setting, write</p>
<div style="text-align: center;"><img alt="\begin{aligned} f=(f\cdot g_{1}g_{2}g_{3})^{1/4}\cdot \left (\frac {f}{g_{1}}\right )^{1/4}\cdot \left (\frac {f}{g_{2}}\right )^{1/4}\cdot \left (\frac {f}{g_{3}}\right )^{1/4}. \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+f%3D%28f%5Ccdot+g_%7B1%7Dg_%7B2%7Dg_%7B3%7D%29%5E%7B1%2F4%7D%5Ccdot+%5Cleft+%28%5Cfrac+%7Bf%7D%7Bg_%7B1%7D%7D%5Cright+%29%5E%7B1%2F4%7D%5Ccdot+%5Cleft+%28%5Cfrac+%7Bf%7D%7Bg_%7B2%7D%7D%5Cright+%29%5E%7B1%2F4%7D%5Ccdot+%5Cleft+%28%5Cfrac+%7Bf%7D%7Bg_%7B3%7D%7D%5Cright+%29%5E%7B1%2F4%7D.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} f=(f\cdot g_{1}g_{2}g_{3})^{1/4}\cdot \left (\frac {f}{g_{1}}\right )^{1/4}\cdot \left (\frac {f}{g_{2}}\right )^{1/4}\cdot \left (\frac {f}{g_{3}}\right )^{1/4}. \end{aligned}"/></div>
<p>By the Hölder inequality the expectation of the right-hand side is</p>
<div style="text-align: center;"><img alt="\begin{aligned} \leq \mathbb {E}[f\cdot g_{1}g_{2}g_{3}]^{1/4}\mathbb {E}\left [\frac {f}{g_{1}}\right ]^{1/4}\mathbb {E}\left [\frac {f}{g_{2}}\right ]^{1/4}\mathbb {E}\left [\frac {f}{g_{3}}\right ]^{1/4}. \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cleq+%5Cmathbb+%7BE%7D%5Bf%5Ccdot+g_%7B1%7Dg_%7B2%7Dg_%7B3%7D%5D%5E%7B1%2F4%7D%5Cmathbb+%7BE%7D%5Cleft+%5B%5Cfrac+%7Bf%7D%7Bg_%7B1%7D%7D%5Cright+%5D%5E%7B1%2F4%7D%5Cmathbb+%7BE%7D%5Cleft+%5B%5Cfrac+%7Bf%7D%7Bg_%7B2%7D%7D%5Cright+%5D%5E%7B1%2F4%7D%5Cmathbb+%7BE%7D%5Cleft+%5B%5Cfrac+%7Bf%7D%7Bg_%7B3%7D%7D%5Cright+%5D%5E%7B1%2F4%7D.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} \leq \mathbb {E}[f\cdot g_{1}g_{2}g_{3}]^{1/4}\mathbb {E}\left [\frac {f}{g_{1}}\right ]^{1/4}\mathbb {E}\left [\frac {f}{g_{2}}\right ]^{1/4}\mathbb {E}\left [\frac {f}{g_{3}}\right ]^{1/4}. \end{aligned}"/></div>
<p>The last three terms equal to <img alt="1" class="latex" src="https://s0.wp.com/latex.php?latex=1&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="1"/> because</p>
<div style="text-align: center;"><img alt="\begin{aligned} \mathbb {E}_{x,y}\frac {f(x,y)}{g_{i}(x,y)} &amp; =\mathbb {E}_{x,y}\frac {f(x,y)}{\mathbb {E}_{x',y'\in \textit {Cell}(x,y)}[f(x',y')]}=\mathbb {E}_{x,y}\frac {\mathbb {E}_{x',y'\in \textit {Cell}(x,y)}[f(x',y')]}{\mathbb {E}_{x',y'\in \textit {Cell}(x,y)}[f(x',y')]}=1. \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cmathbb+%7BE%7D_%7Bx%2Cy%7D%5Cfrac+%7Bf%28x%2Cy%29%7D%7Bg_%7Bi%7D%28x%2Cy%29%7D+%26+%3D%5Cmathbb+%7BE%7D_%7Bx%2Cy%7D%5Cfrac+%7Bf%28x%2Cy%29%7D%7B%5Cmathbb+%7BE%7D_%7Bx%27%2Cy%27%5Cin+%5Ctextit+%7BCell%7D%28x%2Cy%29%7D%5Bf%28x%27%2Cy%27%29%5D%7D%3D%5Cmathbb+%7BE%7D_%7Bx%2Cy%7D%5Cfrac+%7B%5Cmathbb+%7BE%7D_%7Bx%27%2Cy%27%5Cin+%5Ctextit+%7BCell%7D%28x%2Cy%29%7D%5Bf%28x%27%2Cy%27%29%5D%7D%7B%5Cmathbb+%7BE%7D_%7Bx%27%2Cy%27%5Cin+%5Ctextit+%7BCell%7D%28x%2Cy%29%7D%5Bf%28x%27%2Cy%27%29%5D%7D%3D1.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} \mathbb {E}_{x,y}\frac {f(x,y)}{g_{i}(x,y)} &amp; =\mathbb {E}_{x,y}\frac {f(x,y)}{\mathbb {E}_{x',y'\in \textit {Cell}(x,y)}[f(x',y')]}=\mathbb {E}_{x,y}\frac {\mathbb {E}_{x',y'\in \textit {Cell}(x,y)}[f(x',y')]}{\mathbb {E}_{x',y'\in \textit {Cell}(x,y)}[f(x',y')]}=1. \end{aligned}"/></div>
<p>where <img alt="\textit {Cell}(x,y)" class="latex" src="https://s0.wp.com/latex.php?latex=%5Ctextit+%7BCell%7D%28x%2Cy%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\textit {Cell}(x,y)"/> is the set in the partition that contains <img alt="(x,y)" class="latex" src="https://s0.wp.com/latex.php?latex=%28x%2Cy%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="(x,y)"/>. Putting the above together we obtain</p>
<div style="text-align: center;"><img alt="\begin{aligned} \mathbb {E}[f]\leq \mathbb {E}[f\cdot g_{1}g_{2}g_{3}]^{1/4}. \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cmathbb+%7BE%7D%5Bf%5D%5Cleq+%5Cmathbb+%7BE%7D%5Bf%5Ccdot+g_%7B1%7Dg_%7B2%7Dg_%7B3%7D%5D%5E%7B1%2F4%7D.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} \mathbb {E}[f]\leq \mathbb {E}[f\cdot g_{1}g_{2}g_{3}]^{1/4}. \end{aligned}"/></div>
<p>Finally, because the functions are positive, we have that <img alt="\mathbb {E}[f\cdot g_{1}g_{2}g_{3}]^{1/4}\leq \mathbb {E}[g_{1}g_{2}g_{3}]^{1/4}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BE%7D%5Bf%5Ccdot+g_%7B1%7Dg_%7B2%7Dg_%7B3%7D%5D%5E%7B1%2F4%7D%5Cleq+%5Cmathbb+%7BE%7D%5Bg_%7B1%7Dg_%7B2%7Dg_%7B3%7D%5D%5E%7B1%2F4%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\mathbb {E}[f\cdot g_{1}g_{2}g_{3}]^{1/4}\leq \mathbb {E}[g_{1}g_{2}g_{3}]^{1/4}"/>. This concludes the proof. <img alt="\square " class="latex" src="https://s0.wp.com/latex.php?latex=%5Csquare+&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\square "/></p>
</div>
<p style="text-align: justify;">It remains to show the other terms are small. Let <img alt="\epsilon " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cepsilon+&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\epsilon "/> be the error in the weak regularity lemma with respect to distinguishers with range <img alt="\{0,1\} " class="latex" src="https://s0.wp.com/latex.php?latex=%5C%7B0%2C1%5C%7D+&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\{0,1\} "/>. Recall that this implies error <img alt="O(\epsilon )" class="latex" src="https://s0.wp.com/latex.php?latex=O%28%5Cepsilon+%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="O(\epsilon )"/> with respect to distinguishers with range <img alt="[-1,1]" class="latex" src="https://s0.wp.com/latex.php?latex=%5B-1%2C1%5D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="[-1,1]"/>. We give the proof for one of the terms and then we say little about the other two.</p>
<div class="newtheorem">
<p style="text-align: justify;"><span class="head"> <a id="x1-19009r18"/> Claim 18. </span><img alt="|\mathbb {E}[f(x,y)f(xg,y)h_{3}(x,gy)]|\leq O(\epsilon )^{1/4}" class="latex" src="https://s0.wp.com/latex.php?latex=%7C%5Cmathbb+%7BE%7D%5Bf%28x%2Cy%29f%28xg%2Cy%29h_%7B3%7D%28x%2Cgy%29%5D%7C%5Cleq+O%28%5Cepsilon+%29%5E%7B1%2F4%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="|\mathbb {E}[f(x,y)f(xg,y)h_{3}(x,gy)]|\leq O(\epsilon )^{1/4}"/>.</p>
<p style="text-align: justify;">
</p></div>
<p style="text-align: justify;">The proof involves changing names of variables and doing Cauchy-Schwarz to remove the terms with <img alt="f" class="latex" src="https://s0.wp.com/latex.php?latex=f&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="f"/> and bound the expectation above by <img alt="\mathbb {E}[h_{3}(x,g)U(x)V(xg)]" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BE%7D%5Bh_%7B3%7D%28x%2Cg%29U%28x%29V%28xg%29%5D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\mathbb {E}[h_{3}(x,g)U(x)V(xg)]"/>, which is small by the regularity lemma.</p>
<div class="proof">
<p style="text-align: justify;"><span class="head"> Proof. </span>Replace <img alt="g" class="latex" src="https://s0.wp.com/latex.php?latex=g&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="g"/> with <img alt="gy^{-1}" class="latex" src="https://s0.wp.com/latex.php?latex=gy%5E%7B-1%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="gy^{-1}"/> in the uniform distribution to get</p>
<div style="text-align: center;"><img alt="\begin{aligned} &amp; \mathbb {E}_{x,y,g}^{4}[f(x,y)f(xg,y)h_{3}(x,gy)]\\ &amp; =\mathbb {E}_{x,y,g}^{4}[f(x,y)f(xgy^{-1},y)h_{3}(x,g)]\\ &amp; =\mathbb {E}_{x,y}^{4}[f(x,y)\mathbb {E}_{g}[f(xgy^{-1},y)h_{3}(x,g)]]\\ &amp; \leq \mathbb {E}_{x,y}^{2}[f^{2}(x,y)]\mathbb {E}_{x,y}^{2}\mathbb {E}_{g}^{2}[f(xgy^{-1},y)h_{3}(x,g)]\\ &amp; \leq \mathbb {E}_{x,y}^{2}\mathbb {E}_{g}^{2}[f(xgy^{-1},y)h_{3}(x,g)]\\ &amp; =\mathbb {E}_{x,y,g,g'}^{2}[f(xgy^{-1},y)h_{3}(x,g)f(xg'y^{-1},y)h_{3}(x,g')], \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%26+%5Cmathbb+%7BE%7D_%7Bx%2Cy%2Cg%7D%5E%7B4%7D%5Bf%28x%2Cy%29f%28xg%2Cy%29h_%7B3%7D%28x%2Cgy%29%5D%5C%5C+%26+%3D%5Cmathbb+%7BE%7D_%7Bx%2Cy%2Cg%7D%5E%7B4%7D%5Bf%28x%2Cy%29f%28xgy%5E%7B-1%7D%2Cy%29h_%7B3%7D%28x%2Cg%29%5D%5C%5C+%26+%3D%5Cmathbb+%7BE%7D_%7Bx%2Cy%7D%5E%7B4%7D%5Bf%28x%2Cy%29%5Cmathbb+%7BE%7D_%7Bg%7D%5Bf%28xgy%5E%7B-1%7D%2Cy%29h_%7B3%7D%28x%2Cg%29%5D%5D%5C%5C+%26+%5Cleq+%5Cmathbb+%7BE%7D_%7Bx%2Cy%7D%5E%7B2%7D%5Bf%5E%7B2%7D%28x%2Cy%29%5D%5Cmathbb+%7BE%7D_%7Bx%2Cy%7D%5E%7B2%7D%5Cmathbb+%7BE%7D_%7Bg%7D%5E%7B2%7D%5Bf%28xgy%5E%7B-1%7D%2Cy%29h_%7B3%7D%28x%2Cg%29%5D%5C%5C+%26+%5Cleq+%5Cmathbb+%7BE%7D_%7Bx%2Cy%7D%5E%7B2%7D%5Cmathbb+%7BE%7D_%7Bg%7D%5E%7B2%7D%5Bf%28xgy%5E%7B-1%7D%2Cy%29h_%7B3%7D%28x%2Cg%29%5D%5C%5C+%26+%3D%5Cmathbb+%7BE%7D_%7Bx%2Cy%2Cg%2Cg%27%7D%5E%7B2%7D%5Bf%28xgy%5E%7B-1%7D%2Cy%29h_%7B3%7D%28x%2Cg%29f%28xg%27y%5E%7B-1%7D%2Cy%29h_%7B3%7D%28x%2Cg%27%29%5D%2C+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} &amp; \mathbb {E}_{x,y,g}^{4}[f(x,y)f(xg,y)h_{3}(x,gy)]\\ &amp; =\mathbb {E}_{x,y,g}^{4}[f(x,y)f(xgy^{-1},y)h_{3}(x,g)]\\ &amp; =\mathbb {E}_{x,y}^{4}[f(x,y)\mathbb {E}_{g}[f(xgy^{-1},y)h_{3}(x,g)]]\\ &amp; \leq \mathbb {E}_{x,y}^{2}[f^{2}(x,y)]\mathbb {E}_{x,y}^{2}\mathbb {E}_{g}^{2}[f(xgy^{-1},y)h_{3}(x,g)]\\ &amp; \leq \mathbb {E}_{x,y}^{2}\mathbb {E}_{g}^{2}[f(xgy^{-1},y)h_{3}(x,g)]\\ &amp; =\mathbb {E}_{x,y,g,g'}^{2}[f(xgy^{-1},y)h_{3}(x,g)f(xg'y^{-1},y)h_{3}(x,g')], \end{aligned}"/></div>
<p>where the first inequality is by Cauchy-Schwarz.</p>
<p style="text-align: justify;">Now replace <img alt="g\rightarrow x^{-1}g,g'\rightarrow x^{-1}g" class="latex" src="https://s0.wp.com/latex.php?latex=g%5Crightarrow+x%5E%7B-1%7Dg%2Cg%27%5Crightarrow+x%5E%7B-1%7Dg&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="g\rightarrow x^{-1}g,g'\rightarrow x^{-1}g"/> and reason in the same way:</p>
<div style="text-align: center;"><img alt="\begin{aligned} &amp; =\mathbb {E}_{x,y,g,g'}^{2}[f(gy^{-1},y)h_{3}(x,x^{-1}g)f(g'y^{-1},y)h_{3}(x,x^{-1}g')]\\ &amp; =\mathbb {E}_{g,g',y}^{2}[f(gy^{-1},y)\cdot f(g'y^{-1},y)\mathbb {E}_{x}[h_{3}(x,x^{-1}g)\cdot h_{3}(x,x^{-1}g')]]\\ &amp; \leq \mathbb {E}_{x,x',g,g'}[h_{3}(x,x^{-1}g)h_{3}(x,x^{-1}g')h_{3}(x',x'^{-1}g)h_{3}(x',x'^{-1}g')]. \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%26+%3D%5Cmathbb+%7BE%7D_%7Bx%2Cy%2Cg%2Cg%27%7D%5E%7B2%7D%5Bf%28gy%5E%7B-1%7D%2Cy%29h_%7B3%7D%28x%2Cx%5E%7B-1%7Dg%29f%28g%27y%5E%7B-1%7D%2Cy%29h_%7B3%7D%28x%2Cx%5E%7B-1%7Dg%27%29%5D%5C%5C+%26+%3D%5Cmathbb+%7BE%7D_%7Bg%2Cg%27%2Cy%7D%5E%7B2%7D%5Bf%28gy%5E%7B-1%7D%2Cy%29%5Ccdot+f%28g%27y%5E%7B-1%7D%2Cy%29%5Cmathbb+%7BE%7D_%7Bx%7D%5Bh_%7B3%7D%28x%2Cx%5E%7B-1%7Dg%29%5Ccdot+h_%7B3%7D%28x%2Cx%5E%7B-1%7Dg%27%29%5D%5D%5C%5C+%26+%5Cleq+%5Cmathbb+%7BE%7D_%7Bx%2Cx%27%2Cg%2Cg%27%7D%5Bh_%7B3%7D%28x%2Cx%5E%7B-1%7Dg%29h_%7B3%7D%28x%2Cx%5E%7B-1%7Dg%27%29h_%7B3%7D%28x%27%2Cx%27%5E%7B-1%7Dg%29h_%7B3%7D%28x%27%2Cx%27%5E%7B-1%7Dg%27%29%5D.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} &amp; =\mathbb {E}_{x,y,g,g'}^{2}[f(gy^{-1},y)h_{3}(x,x^{-1}g)f(g'y^{-1},y)h_{3}(x,x^{-1}g')]\\ &amp; =\mathbb {E}_{g,g',y}^{2}[f(gy^{-1},y)\cdot f(g'y^{-1},y)\mathbb {E}_{x}[h_{3}(x,x^{-1}g)\cdot h_{3}(x,x^{-1}g')]]\\ &amp; \leq \mathbb {E}_{x,x',g,g'}[h_{3}(x,x^{-1}g)h_{3}(x,x^{-1}g')h_{3}(x',x'^{-1}g)h_{3}(x',x'^{-1}g')]. \end{aligned}"/></div>
<p style="text-align: justify;">Replace <img alt="g\rightarrow xg" class="latex" src="https://s0.wp.com/latex.php?latex=g%5Crightarrow+xg&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="g\rightarrow xg"/> to rewrite the expectation as</p>
<div style="text-align: center;"><img alt="\begin{aligned} \mathbb {E}[h_{3}(x,g)h_{3}(x,x^{-1}g')h_{3}(x',x'^{-1}xg)h_{3}(x',x'^{-1}g')]. \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cmathbb+%7BE%7D%5Bh_%7B3%7D%28x%2Cg%29h_%7B3%7D%28x%2Cx%5E%7B-1%7Dg%27%29h_%7B3%7D%28x%27%2Cx%27%5E%7B-1%7Dxg%29h_%7B3%7D%28x%27%2Cx%27%5E%7B-1%7Dg%27%29%5D.+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} \mathbb {E}[h_{3}(x,g)h_{3}(x,x^{-1}g')h_{3}(x',x'^{-1}xg)h_{3}(x',x'^{-1}g')]. \end{aligned}"/></div>
<p style="text-align: justify;">We want to view the last three terms as a distinguisher <img alt="U(x)\cdot V(xg)" class="latex" src="https://s0.wp.com/latex.php?latex=U%28x%29%5Ccdot+V%28xg%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="U(x)\cdot V(xg)"/>. First, note that <img alt="h_{3}" class="latex" src="https://s0.wp.com/latex.php?latex=h_%7B3%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h_{3}"/> has range <img alt="[-1,1]" class="latex" src="https://s0.wp.com/latex.php?latex=%5B-1%2C1%5D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="[-1,1]"/>. This is because <img alt="h_{3}(x,y)=f(x,y)-\mathbb{E} _{x',y'\in \textit {Cell}(x,y)}f(x',y')" class="latex" src="https://s0.wp.com/latex.php?latex=h_%7B3%7D%28x%2Cy%29%3Df%28x%2Cy%29-%5Cmathbb%7BE%7D+_%7Bx%27%2Cy%27%5Cin+%5Ctextit+%7BCell%7D%28x%2Cy%29%7Df%28x%27%2Cy%27%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h_{3}(x,y)=f(x,y)-\mathbb{E} _{x',y'\in \textit {Cell}(x,y)}f(x',y')"/> and <img alt="f" class="latex" src="https://s0.wp.com/latex.php?latex=f&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="f"/> has range <img alt="\{0,1\}" class="latex" src="https://s0.wp.com/latex.php?latex=%5C%7B0%2C1%5C%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\{0,1\}"/>, where recall that <img alt="Cell(x,y)" class="latex" src="https://s0.wp.com/latex.php?latex=Cell%28x%2Cy%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="Cell(x,y)"/> is the set in the partition that contains <img alt="(x,y)" class="latex" src="https://s0.wp.com/latex.php?latex=%28x%2Cy%29&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="(x,y)"/>. Fix <img alt="x',g'" class="latex" src="https://s0.wp.com/latex.php?latex=x%27%2Cg%27&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x',g'"/>. The last term in the expectation becomes a constant <img alt="c\in [-1,1]" class="latex" src="https://s0.wp.com/latex.php?latex=c%5Cin+%5B-1%2C1%5D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="c\in [-1,1]"/>. The second term only depends on <img alt="x" class="latex" src="https://s0.wp.com/latex.php?latex=x&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x"/>, and the third only on <img alt="xg" class="latex" src="https://s0.wp.com/latex.php?latex=xg&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="xg"/>. Hence for appropriate functions <img alt="U" class="latex" src="https://s0.wp.com/latex.php?latex=U&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="U"/> and <img alt="V" class="latex" src="https://s0.wp.com/latex.php?latex=V&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="V"/> with range <img alt="[-1,1]" class="latex" src="https://s0.wp.com/latex.php?latex=%5B-1%2C1%5D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="[-1,1]"/> this expectation can be rewritten as</p>
<div style="text-align: center;"><img alt="\begin{aligned} \mathbb {E}[h_{3}(x,g)U(x)V(xg)], \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cmathbb+%7BE%7D%5Bh_%7B3%7D%28x%2Cg%29U%28x%29V%28xg%29%5D%2C+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} \mathbb {E}[h_{3}(x,g)U(x)V(xg)], \end{aligned}"/></div>
<p>which concludes the proof. <img alt="\square " class="latex" src="https://s0.wp.com/latex.php?latex=%5Csquare+&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\square "/></p>
</div>
<p style="text-align: justify;">There are similar proofs to show the remaining terms are small. For <img alt="fh_{2}g_{3}" class="latex" src="https://s0.wp.com/latex.php?latex=fh_%7B2%7Dg_%7B3%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="fh_{2}g_{3}"/>, we can perform simple manipulations and then reduce to the above case. For <img alt="h_{1}g_{2}g_{3}" class="latex" src="https://s0.wp.com/latex.php?latex=h_%7B1%7Dg_%7B2%7Dg_%7B3%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="h_{1}g_{2}g_{3}"/>, we have a slightly easier proof than above.</p>
<h5 class="subsubsectionHead"><span class="titlemark">7.4.1 </span> <a id="x1-200007.4.1"/>Parameters</h5>
<p style="text-align: justify;">Suppose our set has density <img alt="\delta \ge 1/\log ^{a}|G|" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdelta+%5Cge+1%2F%5Clog+%5E%7Ba%7D%7CG%7C&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\delta \ge 1/\log ^{a}|G|"/>, and the error in the regularity lemma is <img alt="\epsilon " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cepsilon+&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\epsilon "/>. By the above results we can bound</p>
<div style="text-align: center;"><img alt="\begin{aligned} \mathbb {E}_{x,y,g}[f(x,y)f(xg,y)f(x,gy)]\ge 1/\log ^{4a}|G|-2^{O(1/\epsilon ^{2})}/|G|^{\Omega (1)}-\epsilon ^{\Omega (1)}, \end{aligned}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cmathbb+%7BE%7D_%7Bx%2Cy%2Cg%7D%5Bf%28x%2Cy%29f%28xg%2Cy%29f%28x%2Cgy%29%5D%5Cge+1%2F%5Clog+%5E%7B4a%7D%7CG%7C-2%5E%7BO%281%2F%5Cepsilon+%5E%7B2%7D%29%7D%2F%7CG%7C%5E%7B%5COmega+%281%29%7D-%5Cepsilon+%5E%7B%5COmega+%281%29%7D%2C+%5Cend%7Baligned%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\begin{aligned} \mathbb {E}_{x,y,g}[f(x,y)f(xg,y)f(x,gy)]\ge 1/\log ^{4a}|G|-2^{O(1/\epsilon ^{2})}/|G|^{\Omega (1)}-\epsilon ^{\Omega (1)}, \end{aligned}"/></div>
<p>where the terms in the right-hand size come, left-to-right from Claim <a href="https://emanueleviola.wordpress.com/feed/#x1-19008r17">17<!--tex4ht:ref: claim:austin-g1 --></a>, <a href="https://emanueleviola.wordpress.com/feed/#x1-19007r16">16<!--tex4ht:ref: claim:austin-same-for-every-g --></a>, and <a href="https://emanueleviola.wordpress.com/feed/#x1-19009r18">18<!--tex4ht:ref: claim:austin-h-error --></a>. Picking <img alt="\epsilon =1/\log ^{1/3}|G|" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cepsilon+%3D1%2F%5Clog+%5E%7B1%2F3%7D%7CG%7C&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\epsilon =1/\log ^{1/3}|G|"/> the proof is completed for sufficiently small <img alt="a" class="latex" src="https://s0.wp.com/latex.php?latex=a&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="a"/>.</p>
<h3 class="likesectionHead"><a id="x1-210007.4.1"/>References</h3>
<div class="thebibliography">
<p class="bibitem"><span class="biblabel"> [AL00] <span class="bibsp">   </span></span><a id="XAmbainisL00"/>Andris Ambainis and Satyanarayana V. Lokam. Imroved upper bounds on the simultaneous messages complexity of the generalized addressing function. In Latin American Symposium on Theoretical Informatics (LATIN), pages 207–216, 2000.</p>
<p class="bibitem"><span class="biblabel"> [Amb96] <span class="bibsp">   </span></span><a id="XAmbainis96"/>Andris Ambainis. Upper bounds on multiparty communication complexity of shifts. In Symp. on Theoretical Aspects of Computer Science (STACS), pages 631–642, 1996.</p>
<p class="bibitem"><span class="biblabel"> [AMS99] <span class="bibsp">   </span></span><a id="XAMS99"/>Noga Alon, Yossi Matias, and Mario Szegedy. The space complexity of approximating the frequency moments. J. of Computer and System Sciences, 58(1, part 2):137–147, 1999.</p>
<p class="bibitem"><span class="biblabel"> [Aus16] <span class="bibsp">   </span></span><a id="XAustin2016"/>Tim Austin. Ajtai-Szemerédi theorems over quasirandom groups. In Recent trends in combinatorics, volume 159 of IMA Vol. Math. Appl., pages 453–484. Springer, [Cham], 2016.</p>
<p class="bibitem"><span class="biblabel"> [Bar89] <span class="bibsp">   </span></span><a id="XBarrington89"/>David A. Mix Barrington. Bounded-width polynomial-size branching programs recognize exactly those languages in NC<img alt="^1" class="latex" src="https://s0.wp.com/latex.php?latex=%5E1&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="^1"/>. J. of Computer and System Sciences, 38(1):150–164, 1989.</p>
<p class="bibitem"><span class="biblabel"> [BC92] <span class="bibsp">   </span></span><a id="XBen-OrC92"/>Michael Ben-Or and Richard Cleve. Computing algebraic formulas using a constant number of registers. SIAM J. on Computing, 21(1):54–58, 1992.</p>
<p class="bibitem"><span class="biblabel"> [BDPW10]<span class="bibsp">   </span></span><a id="XBeameDPW10"/>Paul Beame, Matei David, Toniann Pitassi, and Philipp Woelfel. Separating deterministic from randomized multiparty communication complexity. Theory of Computing, 6(1):201–225, 2010.</p>
<p class="bibitem"><span class="biblabel"> [BGKL03] <span class="bibsp">   </span></span><a id="XBGKL03"/>László Babai, Anna Gál, Peter G. Kimmel, and Satyanarayana V. Lokam. Communication complexity of simultaneous messages. SIAM J. on Computing, 33(1):137–166, 2003.</p>
<p class="bibitem"><span class="biblabel"> [BNP08] <span class="bibsp">   </span></span><a id="XBabaiNP08"/>László Babai, Nikolay Nikolov, and László Pyber. Product growth and mixing in finite groups. In ACM-SIAM Symp. on Discrete Algorithms (SODA), pages 248–257, 2008.</p>
<p class="bibitem"><span class="biblabel"> [CFL83] <span class="bibsp">   </span></span><a id="XCFL83"/>Ashok K. Chandra, Merrick L. Furst, and Richard J. Lipton. Multi-party protocols. In 15th ACM Symp. on the Theory of Computing (STOC), pages 94–99, 1983.</p>
<p class="bibitem"><span class="biblabel"> [CP10] <span class="bibsp">   </span></span><a id="XDBLP:journals/sigact/ChattopadhyayP10"/>Arkadev Chattopadhyay and Toniann Pitassi. The story of set disjointness. SIGACT News, 41(3):59–85, 2010.</p>
<p class="bibitem"><span class="biblabel"> [DHKP97] <span class="bibsp">   </span></span><a id="XDietzfelbingerHKP97"/>Martin Dietzfelbinger, Torben Hagerup, Jyrki Katajainen, and Martti Penttonen. A reliable randomized algorithm for the closest-pair problem. J. Algorithms, 25(1):19–51, 1997.</p>
<p class="bibitem"><span class="biblabel"> [FK96] <span class="bibsp">   </span></span><a id="XDBLP:conf/focs/FriezeK96"/>Alan M. Frieze and Ravi Kannan. The regularity lemma and approximation schemes for dense problems. In IEEE Symp. on Foundations of Computer Science (FOCS), pages 12–20, 1996.</p>
<p class="bibitem"><span class="biblabel"> [Gow08] <span class="bibsp">   </span></span><a id="XGowers08"/>W. T. Gowers. Quasirandom groups. Combinatorics, Probability &amp; Computing, 17(3):363–387, 2008.</p>
<p class="bibitem"><span class="biblabel"> [Gre05a] <span class="bibsp">   </span></span><a id="XGreen-supplement"/>Ben Green. An argument of Shkredov in the finite field setting, 2005. Available at people.maths.ox.ac.uk/greenbj/papers/corners.pdf.</p>
<p class="bibitem"><span class="biblabel"> [Gre05b] <span class="bibsp">   </span></span><a id="XGre04-finite"/>Ben Green. Finite field models in additive combinatorics. Surveys in Combinatorics, London Math. Soc. Lecture Notes 327, 1-27, 2005.</p>
<p class="bibitem"><span class="biblabel"> [GVa] <span class="bibsp">   </span></span><a id="XGowersV-cc-int-journal"/>W. T. Gowers and Emanuele Viola. Interleaved group products. SIAM J. on Computing.</p>
<p class="bibitem"><span class="biblabel"> [GVb] <span class="bibsp">   </span></span><a id="XGowersV-cc-int-2"/>W. T. Gowers and Emanuele Viola. The multiparty communication complexity of interleaved group products. SIAM J. on Computing.</p>
<p class="bibitem"><span class="biblabel"> [GV15] <span class="bibsp">   </span></span><a id="XGowersV-cc-int"/>W. T. Gowers and Emanuele Viola. The communication complexity of interleaved group products. In ACM Symp. on the Theory of Computing (STOC), 2015.</p>
<p class="bibitem"><span class="biblabel"> [IL95] <span class="bibsp">   </span></span><a id="XImmermanL95"/>Neil Immerman and Susan Landau. The complexity of iterated multiplication. Inf. Comput., 116(1):103–116, 1995.</p>
<p class="bibitem"><span class="biblabel"> [KMR66] <span class="bibsp">   </span></span><a id="XKrohnMR66"/>Kenneth Krohn, W. D. Maurer, and John Rhodes. Realizing complex Boolean functions with simple groups. Information and Control, 9:190–195, 1966.</p>
<p class="bibitem"><span class="biblabel"> [KN97] <span class="bibsp">   </span></span><a id="XKuN97"/>Eyal Kushilevitz and Noam Nisan. Communication complexity. Cambridge University Press, 1997.</p>
<p class="bibitem"><span class="biblabel"> [KS92] <span class="bibsp">   </span></span><a id="XKalyanasundaramS92"/>Bala Kalyanasundaram and Georg Schnitger. The probabilistic communication complexity of set intersection. SIAM J. Discrete Math., 5(4):545–557, 1992.</p>
<p class="bibitem"><span class="biblabel"> [LM07] <span class="bibsp">   </span></span><a id="XMR2289954"/>Michael T. Lacey and William McClain. On an argument of Shkredov on two-dimensional corners. Online J. Anal. Comb., (2):Art. 2, 21, 2007.</p>
<p class="bibitem"><span class="biblabel"> [LW54] <span class="bibsp">   </span></span><a id="XLangWeil54"/>Serge Lang and André Weil. Number of points of varieties in finite fields. American Journal of Mathematics, 76:819–827, 1954.</p>
<p class="bibitem"><span class="biblabel"> [Mil14] <span class="bibsp">   </span></span><a id="XMiles14"/>Eric Miles. Iterated group products and leakage resilience against <img alt="NC^1" class="latex" src="https://s0.wp.com/latex.php?latex=NC%5E1&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="NC^1"/>. In ACM Innovations in Theoretical Computer Science conf. (ITCS), 2014.</p>
<p class="bibitem"><span class="biblabel"> [MV13] <span class="bibsp">   </span></span><a id="XMilesV-leak"/>Eric Miles and Emanuele Viola. Shielding circuits with groups. In ACM Symp. on the Theory of Computing (STOC), 2013.</p>
<p class="bibitem"><span class="biblabel"> [PRS97] <span class="bibsp">   </span></span><a id="XPRS97"/>Pavel Pudlák, Vojtěch Rödl, and Jiří Sgall. Boolean circuits, tensor ranks, and communication complexity. SIAM J. on Computing, 26(3):605–633, 1997.</p>
<p class="bibitem"><span class="biblabel"> [Raz92] <span class="bibsp">   </span></span><a id="XRazborov92"/>Alexander A. Razborov. On the distributional complexity of disjointness. Theor. Comput. Sci., 106(2):385–390, 1992.</p>
<p class="bibitem"><span class="biblabel"> [Raz00] <span class="bibsp">   </span></span><a id="XRaz00"/>Ran Raz. The BNS-Chung criterion for multi-party communication complexity. Computational Complexity, 9(2):113–122, 2000.</p>
<p class="bibitem"><span class="biblabel"> [RY19] <span class="bibsp">   </span></span><a id="XRaoY2019"/>Anup Rao and Amir Yehudayoff. Communication complexity. 2019. <a href="https://homes.cs.washington.edu/&#xA0;anuprao/pubs/book.pdf" rel="nofollow">https://homes.cs.washington.edu/ anuprao/pubs/book.pdf</a>.</p>
<p class="bibitem"><span class="biblabel"> [Sha16] <span class="bibsp">   </span></span><a id="XShalev16"/>Aner Shalev. Mixing, communication complexity and conjectures of Gowers and Viola. Combinatorics, Probability and Computing, pages 1–13, 6 2016. arXiv:1601.00795.</p>
<p class="bibitem"><span class="biblabel"> [She14] <span class="bibsp">   </span></span><a id="XSherstov14-35years"/>Alexander A. Sherstov. Communication complexity theory: Thirty-five years of set disjointness. In Symp. on Math. Foundations of Computer Science (MFCS), pages 24–43, 2014.</p>
<p class="bibitem"><span class="biblabel"> [Tao17] <span class="bibsp">   </span></span><a id="XTao2017-szemerediproof"/>Terence Tao. Szemerédiâs proof of Szemerédiâs theorem, 2017. <a href="https://terrytao.files.wordpress.com/2017/09/szemeredi-proof1.pdf" rel="nofollow">https://terrytao.files.wordpress.com/2017/09/szemeredi-proof1.pdf</a>.</p>
<p class="bibitem"><span class="biblabel"> [Vioa] <span class="bibsp">   </span></span><a id="Xviola-blog-mixing-in-groups"/>Emanuele Viola. Thoughts: Mixing in groups. <a href="https://emanueleviola.wordpress.com/2016/10/21/mixing-in-groups/" rel="nofollow">https://emanueleviola.wordpress.com/2016/10/21/mixing-in-groups/</a>.</p>
<p class="bibitem"><span class="biblabel"> [Viob] <span class="bibsp">   </span></span><a id="Xviola-blog-mixing-in-groups-ii"/>Emanuele Viola. Thoughts: Mixing in groups ii. <a href="https://emanueleviola.wordpress.com/2016/11/15/mixing-in-groups-ii/" rel="nofollow">https://emanueleviola.wordpress.com/2016/11/15/mixing-in-groups-ii/</a>.</p>
<p class="bibitem"><span class="biblabel"> [Vio14] <span class="bibsp">   </span></span><a id="XViola-ccsum"/>Emanuele Viola. The communication complexity of addition. Combinatorica, pages 1–45, 2014.</p>
<p class="bibitem"><span class="biblabel"> [Vio17] <span class="bibsp">   </span></span><a id="Xviola-special-topics17"/>Emanuele Viola. Special topics in complexity theory. Lecture notes of the class taught at Northeastern University. Available at <a href="http://www.ccs.neu.edu/home/viola/classes/spepf17.html" rel="nofollow">http://www.ccs.neu.edu/home/viola/classes/spepf17.html</a>, 2017.</p>
<p class="bibitem"><span class="biblabel"> [Yao79] <span class="bibsp">   </span></span><a id="XYao79"/>Andrew Chi-Chih Yao. Some complexity questions related to distributive computing. In 11th ACM Symp. on the Theory of Computing (STOC), pages 209–213, 1979.</p>
</div>
<p> </p>
<p> </p></div>
    </content>
    <updated>2019-07-10T17:00:32Z</updated>
    <published>2019-07-10T17:00:32Z</published>
    <category term="Uncategorized"/>
    <category term="lecture"/>
    <category term="lower bounds"/>
    <author>
      <name>Emanuele</name>
    </author>
    <source>
      <id>https://emanueleviola.wordpress.com</id>
      <logo>https://s0.wp.com/i/buttonw-com.png</logo>
      <link href="https://emanueleviola.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="https://emanueleviola.wordpress.com" rel="alternate" type="text/html"/>
      <link href="https://emanueleviola.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="https://emanueleviola.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>by Manu</subtitle>
      <title>Thoughts</title>
      <updated>2019-07-11T22:21:07Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://offconvex.github.io/2019/07/10/trajectories-linear-nets/</id>
    <link href="http://offconvex.github.io/2019/07/10/trajectories-linear-nets/" rel="alternate" type="text/html"/>
    <title>Understanding implicit regularization in deep learning by analyzing trajectories of gradient descent</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Sanjeev’s <a href="http://www.offconvex.org/2019/06/03/trajectories/">recent blog post</a> suggested that the conventional view of optimization is insufficient for understanding deep learning, as the value of the training objective does not reliably capture generalization.
He argued that instead, we need to consider the <em>trajectories</em> of optimization.
One of the illustrative examples given was our <a href="https://arxiv.org/abs/1905.13655">new paper with Sanjeev Arora and Yuping Luo</a>, which studies the use of deep linear neural networks for solving <a href="https://en.wikipedia.org/wiki/Matrix_completion"><em>matrix completion</em></a> more accurately than the classic convex programming approach. 
The current post provides more details on this result.</p>

<p>Recall that in matrix completion we are given some entries $\{ M_{i, j} : (i, j) \in \Omega \}$ of an unknown <em>ground truth</em> matrix $M$, and our goal is to recover the remaining entries.
This can be thought of as a supervised learning (regression) problem, where the training examples are the observed entries of $M$, the model is a matrix $W$ trained with the loss:
[
L(W) = \sum\nolimits_{(i, j) \in \Omega} (W_{i, j} - M_{i, j})^2 ~,
]
and generalization corresponds to how similar $W$ is to $M$ in the unobserved locations.
Obviously the problem is ill-posed if we assume nothing about $M$ $-$ the loss $L(W)$ is underdetermined, i.e. has multiple optima, and it would be impossible to tell (without access to unobserved entries) if one solution is better than another.
The standard assumption (which has many <a href="https://en.wikipedia.org/wiki/Matrix_completion#Applications">practical applications</a>) is that the ground truth matrix $M$ is low-rank, and thus the goal is to find, from among all global minima of the loss $L(W)$, one with minimal rank. 
The classic algorithm for achieving this is to find the matrix with minimum <a href="https://en.wikipedia.org/wiki/Matrix_norm#Schatten_norms"><em>nuclear norm</em></a>. 
This is a convex program, which <em>given enough observed entries</em> (and under mild technical assumptions $-$ “incoherence”) recovers the ground truth exactly (cf. <a href="https://statweb.stanford.edu/~candes/papers/MatrixCompletion.pdf">Candes and Recht</a>). 
We’re interested in the regime where the number of revealed entries is too small for the classic algorithm to succeed.
There it can be beaten by a simple deep learning approach, as described next.</p>

<h2 id="linear-neural-networks-lnn">Linear Neural Networks (LNN)</h2>

<p>A linear neural network (LNN) is a fully-connected neural network with linear activation (i.e. no non-linearity).
If $W_j$ is the weight matrix in layer $j$ of a depth $N$ network, the <em>end-to-end matrix</em> is given by $W = W_N W_{N-1} \cdots W_1$.
Our method for solving matrix completion involves minimizing the loss $L(W)$ by running gradient descent (GD) on this (over-)parameterization, with depth $N \geq 2$ and hidden dimensions that do not constrain rank.
This can be viewed as a deep learning problem with $\ell_2$ loss, and GD can be implemented through the chain rule as usual.
Note that the training objective does not include any regularization term controlling the individual layer matrices $\{ W_j \}_j$.</p>

<p>At first glance our algorithm seems naive, since parameterization by an LNN (that does not constrain rank) is equivalent to parameterization by a single matrix $W$, and obviously running GD on $L(W)$ directly with no regularization is not a good approach (nothing will be learned in the unobserved locations).
However, since matrix completion is an underdetermined problem (has multiple optima), the optimum reached by GD can vary depending on the chosen parameterization.
Our setup isolates the role of over-parameterization in implicitly biasing GD towards certain optima (that hopefully generalize well).</p>

<p>Note that in the special case of depth $N = 2$ our method reduces to a traditional approach for matrix completion,  named <em>matrix factorization</em>. 
By analogy, we refer to the case $N \geq 3$ as <em>deep matrix factorization</em>. 
The table below shows reconstruction errors (generalization) on a matrix completion task where the number of observed entries is too small for nuclear norm minimization to succeed.
As can be seen, it is outperformed by matrix factorization, which itself is outperformed by deep matrix factorization.</p>

<div style="text-align: center;">
<img src="http://www.offconvex.org/assets/trajectories-linear-nets-exp-reconst-errs.png" style="width: 700px;"/>
<br/>
<b>Table 1:</b> Results for matrix completion with small number of observations.
</div>
<p><br/>
The main focus of our paper is on developing a theoretical understanding of this phenomenon.</p>

<h2 id="trajectory-analysis-implicit-regularization-towards-low-rank">Trajectory Analysis: Implicit Regularization Towards Low Rank</h2>

<p>We are interested in understanding what end-to-end matrix $W$ emerges when we run GD on an LNN to minimize a general convex loss $L(W)$, and in particular the matrix completion loss given above. 
Note that $L(W)$ is convex, but the objective obtained by over-parameterizing with an LNN is not.
We analyze the trajectories of $W$, and specifically the dynamics of its singular value decomposition.
Denote the singular values by $\{ \sigma_r \}_r$, and the corresponding left and right singular vectors by $\{ \mathbf{u}_r \}_r$ and $\{ \mathbf{v}_r \}_r$ respectively.</p>

<p>We start by considering GD applied to $L(W)$ directly (no over-parameterization).</p>

<blockquote>
  <p><strong>Known result:</strong>
Minimizing $L(W)$ directly by GD (with small learning rate $\eta$) leads the singular values of $W$ to evolve by:
[
\sigma_r(t + 1) \leftarrow \sigma_r(t) - \eta \cdot \langle \nabla L(W(t)) , \mathbf{u}_r(t) \mathbf{v}_r^\top(t) \rangle ~.
\qquad (1)
]</p>
</blockquote>

<p>This statement implies that the movement of a singular value is proportional to the projection of the gradient onto the corresponding singular component.</p>

<p>Now suppose that we parameterize $W$ with an $N$-layer LNN, i.e. as $W = W_N W_{N-1} \cdots W_1$.
In previous work (described in <a href="http://www.offconvex.org/2018/03/02/acceleration-overparameterization/">Nadav’s earlier blog post</a>) we have shown that running GD on the LNN, with small learning rate $\eta$ and initialization close to the origin, leads the end-to-end matrix $W$ to evolve by:</p>



<p>In the new paper we rely on this result to prove the following:</p>

<blockquote>
  <p><strong>Theorem:</strong>
Minimizing $L(W)$ by running GD (with small learning rate $\eta$ and initialization close to the origin) on an $N$-layer LNN leads the singular values of $W$ to evolve by:
[ \sigma_r(t + 1) \leftarrow \sigma_r(t) - \eta \cdot \langle \nabla L(W(t)) , \mathbf{u}_r(t) \mathbf{v}_r^\top(t) \rangle \cdot \color{purple}{N \cdot (\sigma_r(t))^{2 - 2 / N}} ~.
]</p>
</blockquote>

<p>Comparing this to Equation $(1)$, we see that over-parameterizing the loss $L(W)$ with an $N$-layer LNN introduces the multiplicative factors $\color{purple}{N \cdot (\sigma_r(t))^{2 - 2 / N}}$ to the evolution of singular values.
While the constant $N$ does not change relative dynamics (can be absorbed into the learning rate $\eta$), the terms $(\sigma_r(t))^{2 - 2 / N}$ do $-$ they enhance movement of large singular values, and on the hand attenuate that of small ones.
Moreover, the enhancement/attenuation becomes more significant as $N$ (network depth) grows.</p>

<div style="text-align: center;">
<img src="http://www.offconvex.org/assets/trajectories-linear-nets-thm-dynamics.png" style="width: 900px;"/>
<br/>
<b>Figure 1:</b> Over-parameterizing with LNN modifies dynamics of singular values.
</div>
<p><br/></p>

<p>The enhancement/attenuation effect induced by an LNN (factors $\color{purple}{N \cdot (\sigma_r(t))^{2 - 2 / N}}$) leads each singular value to progress very slowly after initialization, when close to zero, and then, upon reaching a certain threshold, move rapidly, with the transition from slow to rapid movement being sharper in case of a deeper network (larger $N$).
If the loss $L(W)$ is underdetermined (has multiple optima) these dynamics promote solutions that have a few large singular values and many small ones (that have yet to reach the phase transition between slow to rapid movement), with a gap that is more extreme the deeper the network is. 
This is an implicit regularization towards low rank, which intensifies with depth.
In the paper we support the intuition with empirical evaluations and theoretical illustrations, demonstrating how adding depth to an LNN can lead GD to produce solutions closer to low-rank.
For example, the following plots, corresponding to a task of matrix completion, show evolution of singular values throughout training of networks with varying depths $-$ as can be seen, adding layers indeed admits a final solution whose spectrum is closer to low-rank, thereby improving generalization.</p>

<div style="text-align: center;">
<img src="http://www.offconvex.org/assets/trajectories-linear-nets-exp-dynamics.png" style="width: 900px;"/>
<br/>
<b>Figure 2:</b> Dynamics of singular values in training matrix factorizations (LNN).
</div>

<h2 id="do-the-trajectories-minimize-some-regularized-objective">Do the Trajectories Minimize Some Regularized Objective?</h2>

<p>In recent years, researchers have come to realize the importance of implicit regularization induced by the choice of optimization algorithm.
The strong gravitational pull of the conventional view on optimization (see <a href="http://www.offconvex.org/2019/06/03/trajectories/">Sanjeev’s post</a>) has led most papers on this line to try and capture the effect in the language of regularized objectives. 
For example, it is known that over linear models, i.e. depth $1$ networks, GD finds the solution with minimal Frobenius norm (cf. Section 5 in <a href="https://openreview.net/pdf?id=Sy8gdB9xx">Zhang et al.</a>), and a common hypothesis is that this persists over more elaborate neural networks, with Frobenius norm potentially replaced by some other norm (or quasi-norm) that depends on network architecture.
<a href="https://papers.nips.cc/paper/7195-implicit-regularization-in-matrix-factorization.pdf">Gunasekar et al.</a> explicitly conjectured:</p>

<blockquote>
  <p><strong>Conjecture (by <a href="https://papers.nips.cc/paper/7195-implicit-regularization-in-matrix-factorization.pdf">Gunasekar et al.</a>, informally stated):</strong>
GD (with small learning rate and near-zero initialization) training a matrix factorization finds a solution with minimum <a href="https://en.wikipedia.org/wiki/Matrix_norm#Schatten_norms">nuclear norm</a>.</p>
</blockquote>

<p>This conjecture essentially states that matrix factorization (i.e. $2$-layer LNN) trained by GD is equivalent to the famous method of nuclear norm minimization.
Gunasekar et al. motivated the conjecture with some empirical evidence, as well as mathematical evidence in the form of a proof for a (very) restricted setting.</p>

<p>Given the empirical observation by which adding depth to a matrix factorization can improve results in matrix completion, it would be natural to extend the conjecture of Gunasekar et al., and assert that the implicit regularization with depth $3$ or higher corresponds to minimizing some other norm (or quasi-norm) that approximates rank better than nuclear norm does.
For example, a natural candidate would be a <a href="https://en.wikipedia.org/wiki/Schatten_norm">Schatten-$p$ quasi-norm</a> with some $0 &lt; p &lt; 1$.</p>

<p>Our investigation began with this approach, but ultimately, we became skeptical of the entire “implicit regularization as norm minimization” line of reasoning, and in particular of the conjecture by Gunasekar et al.</p>

<blockquote>
  <p><strong>Theorem (mathematical evidence against the conjecture):</strong>
In the same restricted setting for which Gunasekar et al. proved their conjecture, nuclear norm is minimized by GD over matrix factorization not only with depth $2$, but with any depth $\geq 3$ as well.</p>
</blockquote>

<p>This theorem disqualifies Schatten quasi-norms as the implicit regularization in deep matrix factorizations, and instead suggests that all depths correspond to nuclear norm.
However, empirically we found a notable difference in performance between different depths, so the conceptual leap from a proof in the restricted setting to a general conjecture, as done by Gunasekar et al., seems questionable.</p>

<p>In the paper we conduct a systematic set of experiments to empirically evaluate the conjecture.
We find that in the regime where nuclear norm minimization is suboptimal (few observed entries), matrix factorizations consistently outperform it (see for example Table 1).
This holds in particular with depth $2$, in contrast to the conjecture’s prediction.
Together, our theory and experiments lead us to believe that it may not be possible to capture the implicit regularization in LNN with a single mathematical norm (or quasi-norm).</p>

<p>Full details behind our results on “implicit regularization as norm minimization” can be found in Section 2 of <a href="https://arxiv.org/abs/1905.13655">the paper</a>.
The trajectory analysis we discussed earlier appears in Section 3 there.</p>

<h2 id="conclusion">Conclusion</h2>

<p>The <a href="http://www.offconvex.org/2019/06/03/trajectories/">conventional view of optimization</a> has been integral to the theory of machine learning. 
Our study suggests that the associated vocabulary may not suffice for understanding generalization in deep learning, and one should instead analyze trajectories of optimization, taking into account that speed of convergence does not necessarily correlate with generalization.
We hope this work will motivate development of a new vocabulary for analyzing deep learning.</p></div>
    </summary>
    <updated>2019-07-10T17:00:00Z</updated>
    <published>2019-07-10T17:00:00Z</published>
    <source>
      <id>http://offconvex.github.io/</id>
      <author>
        <name>Off the Convex Path</name>
      </author>
      <link href="http://offconvex.github.io/" rel="alternate" type="text/html"/>
      <link href="http://offconvex.github.io/feed.xml" rel="self" type="application/atom+xml"/>
      <subtitle>Algorithms off the convex path.</subtitle>
      <title>Off the convex path</title>
      <updated>2019-07-11T16:21:18Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>https://blogs.princeton.edu/imabandit/?p=1382</id>
    <link href="https://blogs.princeton.edu/imabandit/2019/07/10/guest-post-by-julien-mairal-a-kernel-point-of-view-on-convolutional-neural-networks-part-i/" rel="alternate" type="text/html"/>
    <title>Guest post by Julien Mairal: A Kernel Point of View on Convolutional Neural Networks, part I</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>    I (n.b., Julien Mairal) have been interested in drawing links between neural networks and kernel methods for some time, and I am grateful to Sebastien for giving me the opportunity to say a few words about it on … <a href="https://blogs.princeton.edu/imabandit/2019/07/10/guest-post-by-julien-mairal-a-kernel-point-of-view-on-convolutional-neural-networks-part-i/">Continue reading <span class="meta-nav">→</span></a></p></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p> </p>
<p><a class="liimagelink" href="https://i0.wp.com/blogs.princeton.edu/imabandit/wp-content/uploads/sites/122/2019/07/kernel_fig.jpg?ssl=1"><img alt="" class="alignnone wp-image-1393" height="368" src="https://i0.wp.com/blogs.princeton.edu/imabandit/wp-content/uploads/sites/122/2019/07/kernel_fig.jpg?resize=646%2C368&amp;ssl=1" width="646"/></a></p>
<p> </p>
<p>I (<em>n.b., <a class="liinternal" href="https://lear.inrialpes.fr/people/mairal/">Julien Mairal</a></em>) have been interested in drawing links between neural networks and kernel methods for some time, and I am grateful to Sebastien for giving me the opportunity to say a few words about it on his blog. My initial motivation was not to provide another “why deep learning works” theory, but simply to encode into kernel methods a few successful principles from convolutional neural networks (CNNs), such as the ability to model the local stationarity of natural images at multiple scales—we may call that modeling receptive fields—along with feature compositions and invariant representations. There was also something challenging in trying to reconcile end-to-end deep neural networks and non-parametric methods based on kernels that typically decouple data representation from the learning task.</p>
<p>The main goal of this blog post is then to discuss the construction of a particular multilayer kernel for images that encodes the previous principles, derive some invariance and stability properties for CNNs, and also present a simple mechanism to perform feature learning in reproducing kernel Hilbert spaces. In other words, we should not see any intrinsic contradiction between kernels and representation learning.</p>
<p><strong>Preliminaries on kernel methods</strong></p>
<p>Given data living in a set <img alt="\mathcal{X}" class="ql-img-inline-formula " height="12" src="https://i1.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-e44d6dd2d58e906a7f3ec11d7f3cac9c_l3.png?resize=15%2C12&amp;ssl=1" style="vertical-align: 0px;" title="Rendered by QuickLaTeX.com" width="15"/>, a positive definite kernel <img alt="K: \mathcal{X} \times \mathcal{X} \to \mathbb{R}" class="ql-img-inline-formula " height="13" src="https://i2.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-f0d19a1401658006e20eb7aff7c20689_l3.png?resize=124%2C13&amp;ssl=1" title="Rendered by QuickLaTeX.com" width="124"/> implicitly defines a Hilbert space <img alt="\mathcal{H}" class="ql-img-inline-formula " height="12" src="https://i0.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-d8c7ae0e5e08bd1b3f5ef053720bf142_l3.png?resize=15%2C12&amp;ssl=1" style="vertical-align: 0px;" title="Rendered by QuickLaTeX.com" width="15"/> of functions from <img alt="\mathcal{X}" class="ql-img-inline-formula " height="12" src="https://i1.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-e44d6dd2d58e906a7f3ec11d7f3cac9c_l3.png?resize=15%2C12&amp;ssl=1" style="vertical-align: 0px;" title="Rendered by QuickLaTeX.com" width="15"/> to <img alt="\mathbb{R}" class="ql-img-inline-formula " height="12" src="https://i0.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-b2c3c459eddec9847f841b19a2274a3d_l3.png?resize=13%2C12&amp;ssl=1" style="vertical-align: 0px;" title="Rendered by QuickLaTeX.com" width="13"/>, called reproducing kernel Hilbert space (RKHS), along with a mapping function <img alt="\varphi: \mathcal{X} \to \mathcal{H}" class="ql-img-inline-formula " height="16" src="https://i2.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-075eb9a40ac7f19fc1d24932d430cf57_l3.png?resize=84%2C16&amp;ssl=1" title="Rendered by QuickLaTeX.com" width="84"/>.</p>
<p>A predictive model <img alt="f" class="ql-img-inline-formula " height="16" src="https://i1.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-c7d97b919a3b73617cf2fbb375fff3b1_l3.png?resize=10%2C16&amp;ssl=1" title="Rendered by QuickLaTeX.com" width="10"/> in <img alt="\mathcal{H}" class="ql-img-inline-formula " height="12" src="https://i0.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-d8c7ae0e5e08bd1b3f5ef053720bf142_l3.png?resize=15%2C12&amp;ssl=1" style="vertical-align: 0px;" title="Rendered by QuickLaTeX.com" width="15"/> associates to every point <img alt="x" class="ql-img-inline-formula " height="8" src="https://i1.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-1b9fbfb207b6d17d74b33c6d8342a1a4_l3.png?resize=10%2C8&amp;ssl=1" style="vertical-align: 0px;" title="Rendered by QuickLaTeX.com" width="10"/> a label in <img alt="\mathbb{R}" class="ql-img-inline-formula " height="12" src="https://i0.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-b2c3c459eddec9847f841b19a2274a3d_l3.png?resize=13%2C12&amp;ssl=1" style="vertical-align: 0px;" title="Rendered by QuickLaTeX.com" width="13"/>, and admits a simple form <img alt="f(x) =\langle f, \varphi(x) \rangle_{\mathcal{H}}" class="ql-img-inline-formula " height="19" src="https://i0.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-af2242f529038b9f66bdd803a7fcf32d_l3.png?resize=138%2C19&amp;ssl=1" title="Rendered by QuickLaTeX.com" width="138"/>. Then, Cauchy-Schwarz inequality gives us a first basic stability property</p>
<p class="ql-center-displayed-equation" style="line-height: 21px;"><span class="ql-right-eqno">   </span><span class="ql-left-eqno">   </span><img alt="\[ \forall x, x'\in \mathcal{X},~~~~~ |f(x)-f(x')| \leq \|f\|_{\mathcal{H}} \| \varphi(x) - \varphi(x')\|_\mathcal{H}. \]" class="ql-img-displayed-equation " height="21" src="https://i0.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-ba1f97e9889116f67e3caf7d27f6dca2_l3.png?resize=418%2C21&amp;ssl=1" title="Rendered by QuickLaTeX.com" width="418"/></p>
<p>This relation exhibits a discrepancy between neural networks and kernel methods. Whereas neural networks optimize the data representation for a specific task, the term on the right involves the product of two quantities where data representation and learning are decoupled:</p>
<p><img alt="\|\varphi(x)-\varphi(x')\|_\mathcal{H}" class="ql-img-inline-formula " height="19" src="https://i2.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-9b7eefc0051c0b86a82ee0265f44a085_l3.png?resize=125%2C19&amp;ssl=1" title="Rendered by QuickLaTeX.com" width="125"/> is a distance between two data representations <img alt="\varphi(x),\varphi(x')" class="ql-img-inline-formula " height="18" src="https://i0.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-41c6c60616e1acea2bdd02deee51011e_l3.png?resize=83%2C18&amp;ssl=1" title="Rendered by QuickLaTeX.com" width="83"/>, which are independent of the learning process, and <img alt="\|f\|_\mathcal{H}" class="ql-img-inline-formula " height="19" src="https://i0.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-c755a8a9349d0895075e9494d1b11fc1_l3.png?resize=38%2C19&amp;ssl=1" title="Rendered by QuickLaTeX.com" width="38"/> is a norm on the model <img alt="f" class="ql-img-inline-formula " height="16" src="https://i1.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-c7d97b919a3b73617cf2fbb375fff3b1_l3.png?resize=10%2C16&amp;ssl=1" title="Rendered by QuickLaTeX.com" width="10"/> (typically optimized over data) that acts as a measure of complexity.</p>
<p>Thinking about neural networks in terms of kernel methods then requires defining the underlying representation <img alt="\varphi(x)" class="ql-img-inline-formula " height="18" src="https://i2.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-eb419c2adecf84ed9a2d9693bc58d101_l3.png?resize=35%2C18&amp;ssl=1" title="Rendered by QuickLaTeX.com" width="35"/>, which can only depend on the network architecture, and the model <img alt="f" class="ql-img-inline-formula " height="16" src="https://i1.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-c7d97b919a3b73617cf2fbb375fff3b1_l3.png?resize=10%2C16&amp;ssl=1" title="Rendered by QuickLaTeX.com" width="10"/>, which will be parametrized by (learned) network’s weights.</p>
<p><strong>Building a convolutional kernel for convolutional neural networks</strong></p>
<p>Following <a class="lipdf" href="http://jmlr.org/papers/volume20/18-190/18-190.pdf">Alberto Bietti’s paper</a>, we now consider the direct construction of a multilayer convolutional kernel for images. Given a two-dimensional image <img alt="x_0" class="ql-img-inline-formula " height="11" src="https://i1.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-55b536a6647748d6c0c6b58015805c68_l3.png?resize=17%2C11&amp;ssl=1" title="Rendered by QuickLaTeX.com" width="17"/>, the main idea is to build a sequence of “feature maps” <img alt="x_1,x_2,\ldots" class="ql-img-inline-formula " height="12" src="https://i1.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-4e504020251e8444e8047821206317fa_l3.png?resize=71%2C12&amp;ssl=1" title="Rendered by QuickLaTeX.com" width="71"/> that are two-dimensional spatial maps carrying information about image neighborhoods (a.k.a receptive fields) at every location. As we proceed in this sequence, the goal is to model larger neighborhoods with more “invariance”.</p>
<p>Formally, an input image <img alt="x_0" class="ql-img-inline-formula " height="11" src="https://i1.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-55b536a6647748d6c0c6b58015805c68_l3.png?resize=17%2C11&amp;ssl=1" title="Rendered by QuickLaTeX.com" width="17"/> is represented as a square-integrable function in <img alt="L^2(\Omega,\mathcal{H}_0)" class="ql-img-inline-formula " height="19" src="https://i0.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-b1cdcac953d52ed35e77925a243c3df7_l3.png?resize=76%2C19&amp;ssl=1" title="Rendered by QuickLaTeX.com" width="76"/>, where <img alt="\Omega" class="ql-img-inline-formula " height="12" src="https://i2.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-ec0c546b6596f336d8e1d41bb064b951_l3.png?resize=12%2C12&amp;ssl=1" style="vertical-align: 0px;" title="Rendered by QuickLaTeX.com" width="12"/> is a set of pixel coordinates, and <img alt="\mathcal{H}_0" class="ql-img-inline-formula " height="15" src="https://i1.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-c58a47e1230e20fa0f090bbe6e111ba7_l3.png?resize=22%2C15&amp;ssl=1" title="Rendered by QuickLaTeX.com" width="22"/> is a Hilbert space. <img alt="\Omega" class="ql-img-inline-formula " height="12" src="https://i2.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-ec0c546b6596f336d8e1d41bb064b951_l3.png?resize=12%2C12&amp;ssl=1" style="vertical-align: 0px;" title="Rendered by QuickLaTeX.com" width="12"/> may be a discrete grid or a continuous domain such as <img alt="\mathbb{R}^2" class="ql-img-inline-formula " height="15" src="https://i0.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-d5abe0f29e8cc710ae26f4f0af5a0859_l3.png?resize=20%2C15&amp;ssl=1" style="vertical-align: 0px;" title="Rendered by QuickLaTeX.com" width="20"/>, and <img alt="\mathcal{H}_0" class="ql-img-inline-formula " height="15" src="https://i1.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-c58a47e1230e20fa0f090bbe6e111ba7_l3.png?resize=22%2C15&amp;ssl=1" title="Rendered by QuickLaTeX.com" width="22"/> may simply be <img alt="\mathbb{R}^3" class="ql-img-inline-formula " height="15" src="https://i2.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-97886402213f48c46e631e5331a34035_l3.png?resize=20%2C15&amp;ssl=1" style="vertical-align: 0px;" title="Rendered by QuickLaTeX.com" width="20"/> for RGB images. Then, a feature map <img alt="x_k" class="ql-img-inline-formula " height="11" src="https://i1.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-3ad23c5c360c3f33031a5d000d37416f_l3.png?resize=17%2C11&amp;ssl=1" title="Rendered by QuickLaTeX.com" width="17"/> in <img alt="L^2(\Omega,\mathcal{H}_k)" class="ql-img-inline-formula " height="19" src="https://i1.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-66fdb69a62e8ec8647eac89f54998a71_l3.png?resize=77%2C19&amp;ssl=1" title="Rendered by QuickLaTeX.com" width="77"/> is obtained from a previous layer <img alt="x_{k-1}" class="ql-img-inline-formula " height="12" src="https://i0.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-246f2a4e2f0c791d5589f43eca6383b8_l3.png?resize=35%2C12&amp;ssl=1" title="Rendered by QuickLaTeX.com" width="35"/> as follows:</p>
<ul>
<li><em> modeling larger neighborhoods than in the previous layer:</em> we map neighborhoods (patches) from <img alt="x_{k-1}" class="ql-img-inline-formula " height="12" src="https://i0.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-246f2a4e2f0c791d5589f43eca6383b8_l3.png?resize=35%2C12&amp;ssl=1" title="Rendered by QuickLaTeX.com" width="35"/> to a new Hilbert space <img alt="\mathcal{H}_k" class="ql-img-inline-formula " height="15" src="https://i2.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-bc26f0de4084a72b9e625a080bd5d674_l3.png?resize=22%2C15&amp;ssl=1" title="Rendered by QuickLaTeX.com" width="22"/>. Concretely, we define a homogeneous dot-product kernel between patches <img alt="z, z'" class="ql-img-inline-formula " height="18" src="https://i0.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-ce80943b7f55934d998e09542933b73e_l3.png?resize=30%2C18&amp;ssl=1" title="Rendered by QuickLaTeX.com" width="30"/> from <img alt="x_{k-1}" class="ql-img-inline-formula " height="12" src="https://i0.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-246f2a4e2f0c791d5589f43eca6383b8_l3.png?resize=35%2C12&amp;ssl=1" title="Rendered by QuickLaTeX.com" width="35"/>:
<p class="ql-center-displayed-equation" style="line-height: 43px;"><span class="ql-right-eqno">   </span><span class="ql-left-eqno">   </span><img alt="\[ K_k(z,z') = \|z\| \|z'\| \kappa_k \left( \left\langle \frac{z}{\|z\|}, \frac{z'}{\|z'\|} \right\rangle \right), \]" class="ql-img-displayed-equation " height="43" src="https://i1.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-e98e6c584e7aa34a129d04fa46a6981c_l3.png?resize=304%2C43&amp;ssl=1" title="Rendered by QuickLaTeX.com" width="304"/></p>
<p> where <img alt="\langle . , . \rangle" class="ql-img-inline-formula " height="19" src="https://i0.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-b62527a227d32e3e2f43b8b9b2b31ad5_l3.png?resize=29%2C19&amp;ssl=1" title="Rendered by QuickLaTeX.com" width="29"/> is an inner-product derived from <img alt="\mathcal{H}_{k-1}" class="ql-img-inline-formula " height="16" src="https://i0.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-ec7eee8a3bac08b4c319cfce53408682_l3.png?resize=39%2C16&amp;ssl=1" title="Rendered by QuickLaTeX.com" width="39"/>, and <img alt="\kappa_k" class="ql-img-inline-formula " height="11" src="https://i2.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-684fcf23472c51919624049fb4e0129a_l3.png?resize=17%2C11&amp;ssl=1" title="Rendered by QuickLaTeX.com" width="17"/> is a non-linear function that ensures positive definiteness, <em>e.g.</em>, <img alt="\kappa_k(\langle u,u'\rangle ) = e^{\alpha (\langle u,u'\rangle -1)} = e^{-\frac{\alpha}{2}\|u-u'\|^2}" class="ql-img-inline-formula " height="23" src="https://i2.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-46c64b76ccc9f508d30fec2fb80e244d_l3.png?resize=289%2C23&amp;ssl=1" title="Rendered by QuickLaTeX.com" width="289"/> for vectors <img alt="u, u'" class="ql-img-inline-formula " height="18" src="https://i0.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-0b88ce07daf9a52ba8a46659cff355fd_l3.png?resize=32%2C18&amp;ssl=1" title="Rendered by QuickLaTeX.com" width="32"/> with unit norm, see <a class="lipdf" href="http://jmlr.org/papers/volume20/18-190/18-190.pdf">this paper</a>. By doing so, we implicitly define a kernel mapping <img alt="\varphi_k" class="ql-img-inline-formula " height="12" src="https://i1.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-243ed60e88d807834cd7cb1e1fbe0658_l3.png?resize=19%2C12&amp;ssl=1" title="Rendered by QuickLaTeX.com" width="19"/> that maps patches from <img alt="x_{k-1}" class="ql-img-inline-formula " height="12" src="https://i0.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-246f2a4e2f0c791d5589f43eca6383b8_l3.png?resize=35%2C12&amp;ssl=1" title="Rendered by QuickLaTeX.com" width="35"/> to a new Hilbert space <img alt="\mathcal{H}_k" class="ql-img-inline-formula " height="15" src="https://i2.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-bc26f0de4084a72b9e625a080bd5d674_l3.png?resize=22%2C15&amp;ssl=1" title="Rendered by QuickLaTeX.com" width="22"/>. This mechanism is illustrated in the picture at the beginning of the post, and produces a spatial map that carries these patch representations.</p></li>
<li><em>increasing invariance:</em> to gain invariance to small deformations, we smooth~<img alt="x_{k-1}" class="ql-img-inline-formula " height="12" src="https://i0.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-246f2a4e2f0c791d5589f43eca6383b8_l3.png?resize=35%2C12&amp;ssl=1" title="Rendered by QuickLaTeX.com" width="35"/> with a linear filter, as shown in the picture at the beginning of the post, which may be interpreted as anti-aliasing (in terms of signal processing) or linear pooling (in terms of neural networks).</li>
</ul>
<p>Formally, the previous construction amounts to applying operators <img alt="P_k" class="ql-img-inline-formula " height="15" src="https://i1.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-4726bbf70431cf284be54bbc6a04ad60_l3.png?resize=18%2C15&amp;ssl=1" title="Rendered by QuickLaTeX.com" width="18"/> (patch extraction), <img alt="M_k" class="ql-img-inline-formula " height="15" src="https://i1.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-78f07026bc8c5150a11bf9e00756b7a7_l3.png?resize=24%2C15&amp;ssl=1" title="Rendered by QuickLaTeX.com" width="24"/> (kernel mapping), and <img alt="A_k" class="ql-img-inline-formula " height="15" src="https://i0.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-866de181a59a21d2ca2306a9adbd9bc1_l3.png?resize=20%2C15&amp;ssl=1" title="Rendered by QuickLaTeX.com" width="20"/> (smoothing/pooling operator) to <img alt="x_{k-1}" class="ql-img-inline-formula " height="12" src="https://i0.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-246f2a4e2f0c791d5589f43eca6383b8_l3.png?resize=35%2C12&amp;ssl=1" title="Rendered by QuickLaTeX.com" width="35"/> such that the <img alt="n" class="ql-img-inline-formula " height="8" src="https://i2.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-a63eb5ff0272d3119fa684be6e7acce8_l3.png?resize=11%2C8&amp;ssl=1" style="vertical-align: 0px;" title="Rendered by QuickLaTeX.com" width="11"/>-th layer representation can be written as</p>
<p class="ql-center-displayed-equation" style="line-height: 21px;"><span class="ql-right-eqno">   </span><span class="ql-left-eqno">   </span><img alt="\[ \Phi_n(x_0)= x_n= A_n M_n P_n \ldots A_1 M_1 P_1 x_0~~~\text{in}~~~~L^2(\Omega,\mathcal{H}_n). \]" class="ql-img-displayed-equation " height="21" src="https://i1.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-e8c2d99cc679426d1af08e6d15510211_l3.png?resize=437%2C21&amp;ssl=1" title="Rendered by QuickLaTeX.com" width="437"/></p>
<p>We may finally define a kernel for images as <img alt="\mathcal{K}_n(x_0,x_0')=\langle \Phi_n(x_0), \Phi_n(x_0') \rangle" class="ql-img-inline-formula " height="19" src="https://i2.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-16be084d5dd2ed3d7a18cdcf70c33fe2_l3.png?resize=231%2C19&amp;ssl=1" title="Rendered by QuickLaTeX.com" width="231"/>, whose RKHS contains the functions <img alt="f_w(x_0) = \langle w , \Phi_n(x_0) \rangle" class="ql-img-inline-formula " height="19" src="https://i1.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-95aa9a4388dd5f5da6292875abe6596a_l3.png?resize=162%2C19&amp;ssl=1" title="Rendered by QuickLaTeX.com" width="162"/> for <img alt="w" class="ql-img-inline-formula " height="8" src="https://i0.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-78d46af3f19bae0d88ac0cabd450a296_l3.png?resize=13%2C8&amp;ssl=1" style="vertical-align: 0px;" title="Rendered by QuickLaTeX.com" width="13"/> in <img alt="L^2(\Omega,\mathcal{H}_n)" class="ql-img-inline-formula " height="19" src="https://i0.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-502d385c60e5ecdb1a0f26ee770d30b1_l3.png?resize=77%2C19&amp;ssl=1" title="Rendered by QuickLaTeX.com" width="77"/>. Note now that we have introduced a concept of image representation <img alt="\Phi_n" class="ql-img-inline-formula " height="16" src="https://i0.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-273242b8e92b3a9f4dc13c62b2785bd3_l3.png?resize=21%2C16&amp;ssl=1" title="Rendered by QuickLaTeX.com" width="21"/>, which only depends on some network architecture (amounts of pooling, patch size), and predictive model <img alt="f_w" class="ql-img-inline-formula " height="16" src="https://i1.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-fb636251e88ba51d909c76c1110eed5e_l3.png?resize=19%2C16&amp;ssl=1" title="Rendered by QuickLaTeX.com" width="19"/> parametrized by <img alt="w" class="ql-img-inline-formula " height="8" src="https://i0.wp.com/blogs.princeton.edu/imabandit/wp-content/ql-cache/quicklatex.com-78d46af3f19bae0d88ac0cabd450a296_l3.png?resize=13%2C8&amp;ssl=1" style="vertical-align: 0px;" title="Rendered by QuickLaTeX.com" width="13"/>.</p>
<p>From such a construction, we will now derive stability results for classical convolutional neural networks (CNNs) and then derive non-standard CNNs based on kernel approximations that we call convolutional kernel networks (CKNs).</p>
<p> </p>
<p>Next week, we will see how to perform feature (end-to-end) learning with the previous kernel representation, and also discuss other classical links between neural networks and kernel methods.</p>
<p> </p>
<p> </p></div>
    </content>
    <updated>2019-07-10T15:20:34Z</updated>
    <published>2019-07-10T15:20:34Z</published>
    <category term="Machine learning"/>
    <author>
      <name>Sebastien Bubeck</name>
    </author>
    <source>
      <id>https://blogs.princeton.edu/imabandit</id>
      <link href="https://blogs.princeton.edu/imabandit/feed/" rel="self" type="application/atom+xml"/>
      <link href="https://blogs.princeton.edu/imabandit" rel="alternate" type="text/html"/>
      <subtitle>Random topics in optimization, probability, and statistics. By Sébastien Bubeck</subtitle>
      <title>I’m a bandit</title>
      <updated>2019-07-10T23:50:39Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1907.04302</id>
    <link href="http://arxiv.org/abs/1907.04302" rel="alternate" type="text/html"/>
    <title>Interactive Verifiable Polynomial Evaluation</title>
    <feedworld_mtime>1562716800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/s/Sahraei:Saeid.html">Saeid Sahraei</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/m/Maddah=Ali:Mohammad_Ali.html">Mohammad Ali Maddah-Ali</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/a/Avestimehr:Salman.html">Salman Avestimehr</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1907.04302">PDF</a><br/><b>Abstract: </b>Cloud computing platforms have created the possibility for computationally
limited users to delegate demanding tasks to strong but untrusted servers.
Verifiable computing algorithms help build trust in such interactions by
enabling the server to provide a proof of correctness of his results which the
user can check very efficiently. In this paper, we present a doubly-efficient
interactive algorithm for verifiable polynomial evaluation. Unlike the
mainstream literature on verifiable computing, the soundness of our algorithm
is information-theoretic and cannot be broken by a computationally unbounded
server. By relying on basic properties of error correcting codes, our algorithm
enforces a dishonest server to provide false results to problems which become
progressively easier to verify. After roughly $\log d$ rounds, the user can
verify the response of the server against a look-up table that has been
pre-computed during an initialization phase. For a polynomial of degree $d$, we
achieve a user complexity of $O(d^{\epsilon})$, a server complexity of
$O(d^{1+\epsilon})$, a round complexity of $O(\log d)$ and an initialization
complexity of $O(d^{1+\epsilon})$.
</p></div>
    </summary>
    <updated>2019-07-10T23:20:35Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Complexity"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CC" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Complexity (cs.CC) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CC updates on arXiv.org</title>
      <updated>2019-07-10T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1907.04295</id>
    <link href="http://arxiv.org/abs/1907.04295" rel="alternate" type="text/html"/>
    <title>Better Sample -- Random Subset Sum in $2^{0.255n}$ and its Impact on Decoding Random Linear Codes</title>
    <feedworld_mtime>1562716800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/e/Esser:Andre.html">Andre Esser</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/m/May:Alexander.html">Alexander May</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1907.04295">PDF</a><br/><b>Abstract: </b>We propose a new heuristic algorithm for solving random subset sum instances
$a_1, \ldots, a_n, t \in \mathbb{Z}_{2^n}$, which play a crucial role in
cryptographic constructions. Our algorithm is search tree-based and solves the
instances in a divide-and-conquer method using the representation method. From
a high level perspective, our algorithm is similar to the algorithm of
Howgrave-Graham-Joux (HGJ) and Becker-Coron-Joux (BCJ), but instead of
enumerating the initial lists we sample candidate solutions. So whereas HGJ and
BCJ are based on combinatorics, our analysis is stochastic. Our sampling
technique introduces variance that increases the amount of representations and
gives our algorithm more optimization flexibility. This results in the
remarkable and natural property that we improve with increasing search tree
depth.
</p>
<p>Whereas BCJ achieves the currently best known (heuristic) run time
$2^{0.291n}$ for random subset sum, we improve (heuristically) down to
$2^{0.255n}$ using a search tree of depth at least $13$.
</p>
<p>We also apply our subset algorithm to the decoding of random binary linear
codes, where we improve the best known run time of the Becker-Joux-May-Meurer
algorithm from $2^{0.048n}$ in the half distance decoding setting down to
$2^{0.042n}$.
</p></div>
    </summary>
    <updated>2019-07-10T23:38:08Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-07-10T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1907.04284</id>
    <link href="http://arxiv.org/abs/1907.04284" rel="alternate" type="text/html"/>
    <title>No-dimensional Tverberg Theorems and Algorithms</title>
    <feedworld_mtime>1562716800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/c/Choudhary:Aruni.html">Aruni Choudhary</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/m/Mulzer:Wolfgang.html">Wolfgang Mulzer</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1907.04284">PDF</a><br/><b>Abstract: </b>Tverberg's theorem is a classic result in discrete geometry. It states that
for any integer $k \ge 2$ and any finite $d$-dimensional point set $P \subseteq
\mathbb{R}^d$ of at least $(d + 1)(k - 1) + 1$ points, we can partition $P$
into $k$ subsets whose convex hulls have a non-empty intersection. The
computational problem of finding such a partition lies in the complexity class
$\mathrm{PPAD} \cap \mathrm{PLS}$, but no hardness results are known.
Tverberg's theorem also has a colorful variant: the points in $P$ have colors,
and under certain conditions, $P$ can be partitioned into colorful sets, i.e.,
sets in which each color appears exactly once such that the convex hulls of the
sets intersect.
</p>
<p>Recently, Adiprasito, Barany, and Mustafa [SODA 2019] proved a no-dimensional
version of Tverberg's theorem, in which the convex hulls of the sets in the
partition may intersect in an approximate fashion, relaxing the requirement on
the cardinality of $P$. The argument is constructive, but it does not result in
a polynomial-time algorithm.
</p>
<p>We present an alternative proof for a no-dimensional Tverberg theorem that
leads to an efficient algorithm to find the partition. More specifically, we
show an deterministic algorithm that finds for any set $P \subseteq
\mathbb{R}^d$ of $n$ points and any $k \in \{2, \dots, n\}$ in $O(nd \log k )$
time a partition of $P$ into $k$ subsets such that there is a ball of radius
$O(\frac{k}{\sqrt{n}}\textrm{diam}(P))$ intersecting the convex hull of each
subset. A similar result holds also for the colorful version.
</p>
<p>To obtain our result, we generalize Sarkaria's tensor product constructions
[Israel Journal Math., 1992] that reduces the Tverberg problem to the Colorful
Caratheodory problem. By carefully choosing the vectors used in the tensor
products, we implement the reduction in an efficient manner.
</p></div>
    </summary>
    <updated>2019-07-10T23:45:07Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Geometry"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CG" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Geometry (cs.CG) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CG updates on arXiv.org</title>
      <updated>2019-07-10T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1907.04279</id>
    <link href="http://arxiv.org/abs/1907.04279" rel="alternate" type="text/html"/>
    <title>Multiple Knapsack-Constrained Monotone DR-Submodular Maximization on Distributive Lattice --- Continuous Greedy Algorithm on Median Complex ---</title>
    <feedworld_mtime>1562716800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/m/Maehara:Takanori.html">Takanori Maehara</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/n/Nakashima:So.html">So Nakashima</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/y/Yamaguchi:Yutaro.html">Yutaro Yamaguchi</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1907.04279">PDF</a><br/><b>Abstract: </b>We consider a problem of maximizing a monotone DR-submodular function under
multiple order-consistent knapsack constraints on a distributive lattice. Since
a distributive lattice is used to represent a dependency constraint, the
problem can represent a dependency constrained version of a submodular
maximization problem on a set. We propose a $1 - 1/e$ approximation algorithm
for this problem. To achieve this result, we generalize the continuous greedy
algorithm to distributive lattices: We choose a median complex as a continuous
relaxation of a distributive lattice and define the multilinear extension on
it. We show that the median complex admits special curves, named uniform linear
motions, such that the multilinear extension of a DR-submodular function is
concave along a positive uniform linear motion, which is a key property of the
continuous greedy algorithm.
</p></div>
    </summary>
    <updated>2019-07-10T23:38:16Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-07-10T01:30:00Z</updated>
    </source>
  </entry>
</feed>
