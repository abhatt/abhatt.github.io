<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:planet="http://planet.intertwingly.net/" xmlns:indexing="urn:atom-extension:indexing" indexing:index="no"><access:restriction xmlns:access="http://www.bloglines.com/about/specs/fac-1.0" relationship="deny"/>
  <title>Theory of Computing Blog Aggregator</title>
  <updated>2019-05-08T23:58:38Z</updated>
  <generator uri="http://intertwingly.net/code/venus/">Venus</generator>
  <author>
    <name>Arnab Bhattacharyya, Suresh Venkatasubramanian</name>
    <email>arbhat+cstheoryfeed@gmail.com</email>
  </author>
  <id>http://www.cstheory-feed.org/atom.xml</id>
  <link href="http://www.cstheory-feed.org/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="http://www.cstheory-feed.org/" rel="alternate"/>

  <entry xml:lang="en">
    <id>http://tcsplus.wordpress.com/?p=353</id>
    <link href="https://tcsplus.wordpress.com/2019/05/08/tcs-talk-wednesday-may-15th-ewin-tang-university-of-washington/" rel="alternate" type="text/html"/>
    <title>TCS+ talk: Wednesday, May 15th — Ewin Tang, University of Washington</title>
    <summary>The next TCS+ talk will take place this coming Wednesday, May 15th at 1:00 PM Eastern Time (10:00 AM Pacific Time, 18:00 Central European Time, 17:00 UTC). Ewin Tang from University of Washington will tell us about “Quantum-inspired classical linear algebra algorithms: why and how?” (abstract below). Please make sure you reserve a spot for […]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>The next TCS+ talk will take place this coming Wednesday, May 15th at 1:00 PM Eastern Time (10:00 AM Pacific Time, 18:00 Central European Time, 17:00 UTC). <strong><a href="https://ewintang.com/" rel="noopener" target="_blank">Ewin Tang</a></strong> from University of Washington will tell us about “<em>Quantum-inspired classical linear algebra algorithms: why and how?</em>” (abstract below).</p>
<p>Please make sure you reserve a spot for your group to join us live by signing up on <a href="https://sites.google.com/site/plustcs/livetalk/live-seat-reservation">the online form</a>. As usual, for more information about the TCS+ online seminar series and the upcoming talks, or to <a href="https://sites.google.com/site/plustcs/suggest">suggest</a> a possible topic or speaker, please see <a href="https://sites.google.com/site/plustcs/">the website</a>.</p>
<blockquote><p>Abstract: Over the past ten years, the field of quantum machine learning (QML) has produced many polylogarithmic-time procedures for linear algebra routines, assuming certain “state preparation” assumptions. Though such algorithms are formally incomparable with classical computing, a recent line of work uses an analogous classical model of computation as an effective point of comparison to reveal speedups (or lack thereof) gained by QML. The resulting “dequantized” algorithms assume sampling access to input to speed up runtimes to polylogarithmic in input size.</p>
<p>In this talk, we will discuss the motivation behind this model and its relation to existing randomized linear algebra literature. Then, we will delve into an example quantum-inspired algorithm: Gilyen, Lloyd, and Tang’s algorithm for low-rank matrix inversion. This dequantizes a variant of Harrow, Hassidim, and Lloyd’s matrix inversion algorithm, a seminal work in QML. Finally, we will consider the implications of this work on exponential speedups in QML. No background of quantum computing is assumed for this talk.</p></blockquote></div>
    </content>
    <updated>2019-05-08T22:26:55Z</updated>
    <published>2019-05-08T22:26:55Z</published>
    <category term="Announcements"/>
    <author>
      <name>plustcs</name>
    </author>
    <source>
      <id>https://tcsplus.wordpress.com</id>
      <logo>https://s0.wp.com/i/buttonw-com.png</logo>
      <link href="https://tcsplus.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="https://tcsplus.wordpress.com" rel="alternate" type="text/html"/>
      <link href="https://tcsplus.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="https://tcsplus.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>A carbon-free dissemination of ideas across the globe.</subtitle>
      <title>TCS+</title>
      <updated>2019-05-08T23:58:06Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1905.02709</id>
    <link href="http://arxiv.org/abs/1905.02709" rel="alternate" type="text/html"/>
    <title>Hiring Under Uncertainty</title>
    <feedworld_mtime>1557273600</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/r/Raghavan:Manish.html">Manish Raghavan</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/p/Purohit:Manish.html">Manish Purohit</a>, Sreenivas Gollupadi <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1905.02709">PDF</a><br/><b>Abstract: </b>In this paper we introduce the hiring under uncertainty problem to model the
questions faced by hiring committees in large enterprises and universities
alike. Given a set of $n$ eligible candidates, the decision maker needs to
choose the sequence of candidates to make offers so as to hire the $k$ best
candidates. However, candidates may choose to reject an offer (for instance,
due to a competing offer) and the decision maker has a time limit by which all
positions must be filled. Given an estimate of the probabilities of acceptance
for each candidate, the hiring under uncertainty problem is to design a
strategy of making offers so that the total expected value of all candidates
hired by the time limit is maximized. We provide a 2-approximation algorithm
for the setting where offers must be made in sequence, an 8-approximation when
offers may be made in parallel, and a 10-approximation for the more general
stochastic knapsack setting with finite probes.
</p></div>
    </summary>
    <updated>2019-05-08T23:26:54Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-05-08T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1905.02687</id>
    <link href="http://arxiv.org/abs/1905.02687" rel="alternate" type="text/html"/>
    <title>The algorithm for the recovery of integer vector via linear measurements</title>
    <feedworld_mtime>1557273600</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/r/Ryutin:K=_S=.html">K. S. Ryutin</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1905.02687">PDF</a><br/><b>Abstract: </b>In this paper we continue the studies on the integer sparse recovery problem
that was introduced in \cite{FKS} and studied in \cite{K},\cite{KS}. We provide
an algorithm for the recovery of an unknown sparse integer vector for the
measurement matrix described in \cite{KS} and estimate the number of
arithmetical operations.
</p></div>
    </summary>
    <updated>2019-05-08T23:20:49Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Complexity"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CC" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Complexity (cs.CC) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CC updates on arXiv.org</title>
      <updated>2019-05-08T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1905.02620</id>
    <link href="http://arxiv.org/abs/1905.02620" rel="alternate" type="text/html"/>
    <title>External Memory Planar Point Location with Fast Updates</title>
    <feedworld_mtime>1557273600</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/i/Iacono:John.html">John Iacono</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/k/Karsin:Ben.html">Ben Karsin</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/k/Koumoutsos:Grigorios.html">Grigorios Koumoutsos</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1905.02620">PDF</a><br/><b>Abstract: </b>We study dynamic planar point location in the External Memory Model or Disk
Access Model (DAM). Previous work in this model achieves polylog query and
polylog amortized update time. We present a data structure with $O( \log_B^2
N)$ query time and $O(\frac{1}{ B^{1-\epsilon}} \log_B N)$ amortized update
time, where $N$ is the number of segments, $B$ the block size and $\epsilon$ is
a small positive constant. This is a $B^{1-\epsilon}$ factor faster for updates
than the fastest previous structure, and brings the cost of insertion and
deletion down to subconstant amortized time for reasonable choices of $N$ and
$B$. Our structure solves the problem of vertical ray-shooting queries among a
dynamic set of interior-disjoint line segments; this is well-known to solve
dynamic planar point location for a connected subdivision of the plane.
</p></div>
    </summary>
    <updated>2019-05-08T23:27:59Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-05-08T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1905.02592</id>
    <link href="http://arxiv.org/abs/1905.02592" rel="alternate" type="text/html"/>
    <title>Distributed Construction of Light Networks</title>
    <feedworld_mtime>1557273600</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/e/Elkin:Michael.html">Michael Elkin</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/f/Filtser:Arnold.html">Arnold Filtser</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/n/Neiman:Ofer.html">Ofer Neiman</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1905.02592">PDF</a><br/><b>Abstract: </b>A $t$-{\em spanner} $H$ of a weighted graph $G=(V,E,w)$ is a subgraph that
approximates all pairwise distances up to a factor of $t$. The {\em lightness}
of $H$ is defined as the ratio between the weight of $H$ to that of the minimum
spanning tree. An $(\alpha,\beta)$-{\em Shallow Light Tree} (SLT) is a tree of
lightness $\beta$, that approximates all distances from a designated root
vertex up to a factor of $\alpha$. A long line of works resulted in efficient
algorithms that produce (nearly) optimal light spanners and SLTs.
</p>
<p>Some of the most notable algorithmic applications of light spanners and SLTs
are in distributed settings. Surprisingly, so far there are no known efficient
distributed algorithms for constructing these objects in general graphs. In
this paper we devise efficient distributed algorithms in the CONGEST model for
constructing light spanners and SLTs, with near optimal parameters.
Specifically, for any $k\ge 1$ and $0&lt;\epsilon&lt;1$, we show a
$(2k-1)\cdot(1+\epsilon)$-spanner with lightness $O(k\cdot n^{1/k})$ can be
built in $\tilde{O}\left(n^{\frac12+\frac{1}{4k+2}}+D\right)$ rounds (where
$n=|V|$ and $D$ is the hop-diameter of $G$). In addition, for any $\alpha&gt;1$ we
provide an $(\alpha,1+\frac{O(1)}{\alpha-1})$-SLT in $(\sqrt{n}+D)\cdot
n^{o(1)}$ rounds. The running time of our algorithms cannot be substantially
improved.
</p>
<p>We also consider spanners for the family of doubling graphs, and devise a
$(\sqrt{n}+D)\cdot n^{o(1)}$ rounds algorithm in the CONGEST model that
computes a $(1+\epsilon)$-spanner with lightness $(\log n)/\epsilon^{O(1)}$. As
a stepping stone, which is interesting in its own right, we first develop a
distributed algorithm for constructing nets (for arbitrary weighted graphs),
generalizing previous algorithms that worked only for unweighted graphs.
</p></div>
    </summary>
    <updated>2019-05-08T23:27:07Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-05-08T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1905.02589</id>
    <link href="http://arxiv.org/abs/1905.02589" rel="alternate" type="text/html"/>
    <title>Order-Preserving Pattern Matching Indeterminate Strings</title>
    <feedworld_mtime>1557273600</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/c/Costa:Diogo.html">Diogo Costa</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/r/Russo:Lu=iacute=s_M=_S=.html">Luís M. S. Russo</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/h/Henriques:Rui.html">Rui Henriques</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/b/Bannai:Hideo.html">Hideo Bannai</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/f/Francisco:Alexandre_P=.html">Alexandre P. Francisco</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1905.02589">PDF</a><br/><b>Abstract: </b>Given an indeterminate string pattern $p$ and an indeterminate string text
$t$, the problem of order-preserving pattern matching with character
uncertainties ($\mu$OPPM) is to find all substrings of $t$ that satisfy one of
the possible orderings defined by $p$. When the text and pattern are
determinate strings, we are in the presence of the well-studied exact
order-preserving pattern matching (OPPM) problem with diverse applications on
time series analysis. Despite its relevance, the exact OPPM problem suffers
from two major drawbacks: 1) the inability to deal with indetermination in the
text, thus preventing the analysis of noisy time series; and 2) the inability
to deal with indetermination in the pattern, thus imposing the strict
satisfaction of the orders among all pattern positions. This paper provides the
first polynomial algorithm to answer the $\mu$OPPM problem when indetermination
is observed on the pattern or text. Given two strings with length $m$ and
$O(r)$ uncertain characters per string position, we show that the $\mu$OPPM
problem can be solved in $O(mr\lg r)$ time when one string is indeterminate and
$r\in\mathbb{N}^+$. Mappings into satisfiability problems are provided when
indetermination is observed on both the pattern and the text, and results
concerning the general problem complexity are presented as well, with $\mu$OPPM
problem proved to be NP-hard in general.
</p></div>
    </summary>
    <updated>2019-05-08T23:24:56Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-05-08T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1905.02518</id>
    <link href="http://arxiv.org/abs/1905.02518" rel="alternate" type="text/html"/>
    <title>Incorporating Weisfeiler-Leman into algorithms for group isomorphism</title>
    <feedworld_mtime>1557273600</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/b/Brooksbank:Peter_A=.html">Peter A. Brooksbank</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/g/Grochow:Joshua_A=.html">Joshua A. Grochow</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/l/Li:Yinan.html">Yinan Li</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/q/Qiao:Youming.html">Youming Qiao</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/w/Wilson:James_B=.html">James B. Wilson</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1905.02518">PDF</a><br/><b>Abstract: </b>In this paper we combine many of the standard and more recent algebraic
techniques for testing isomorphism of finite groups (GpI) with combinatorial
techniques that have typically been applied to Graph Isomorphism. In
particular, we show how to combine several state-of-the-art GpI algorithms for
specific group classes into an algorithm for general GpI, namely: composition
series isomorphism (Rosenbaum-Wagner, Theoret. Comp. Sci., 2015; Luks, 2015),
recursively-refineable filters (Wilson, J. Group Theory, 2013), and low-genus
GpI (Brooksbank-Maglione-Wilson, J. Algebra, 2017). Recursively-refineable
filters -- a generalization of subgroup series -- form the skeleton of this
framework, and we refine our filter by building a hypergraph encoding low-genus
quotients, to which we then apply a hypergraph variant of the k-dimensional
Weisfeiler-Leman technique. Our technique is flexible enough to readily
incorporate additional hypergraph invariants or additional characteristic
subgroups.
</p></div>
    </summary>
    <updated>2019-05-08T23:20:54Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Complexity"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CC" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Complexity (cs.CC) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CC updates on arXiv.org</title>
      <updated>2019-05-08T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1905.02472</id>
    <link href="http://arxiv.org/abs/1905.02472" rel="alternate" type="text/html"/>
    <title>Self-Adjusting Linear Networks</title>
    <feedworld_mtime>1557273600</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/a/Avin:Chen.html">Chen Avin</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/d/Duijn:Ingo_van.html">Ingo van Duijn</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/s/Schmid:Stefan.html">Stefan Schmid</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1905.02472">PDF</a><br/><b>Abstract: </b>Emerging networked systems become increasingly flexible and reconfigurable.
This introduces an opportunity to adjust networked systems in a demand-aware
manner, leveraging spatial and temporal locality in the workload for online
optimizations. However, it also introduces a trade-off: while more frequent
adjustments can improve performance, they also entail higher reconfiguration
costs.
</p>
<p>This paper initiates the formal study of linear networks which self-adjust to
the demand in an online manner, striking a balance between the benefits and
costs of reconfigurations. We show that the underlying algorithmic problem can
be seen as a distributed generalization of the classic dynamic list update
problem known from self-adjusting datastructures: in a network, requests can
occur between node pairs. This distributed version turns out to be
significantly harder than the classical problem in generalizes. Our main
results are a $\Omega(\log{n})$ lower bound on the competitive ratio, and a
(distributed) online algorithm that is $O(\log{n})$-competitive if the
communication requests are issued according to a linear order.
</p></div>
    </summary>
    <updated>2019-05-08T23:26:22Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-05-08T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1905.02469</id>
    <link href="http://arxiv.org/abs/1905.02469" rel="alternate" type="text/html"/>
    <title>Robust two-stage combinatorial optimization problems under convex uncertainty</title>
    <feedworld_mtime>1557273600</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/g/Goerigk:Marc.html">Marc Goerigk</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/k/Kasperski:Adam.html">Adam Kasperski</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/z/Zielinski:Pawel.html">Pawel Zielinski</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1905.02469">PDF</a><br/><b>Abstract: </b>In this paper a class of robust two-stage combinatorial optimization problems
is discussed. It is assumed that the uncertain second stage costs are specified
in the form of a convex uncertainty set, in particular polyhedral or
ellipsoidal ones. It is shown that the robust two-stage versions of basic
network and selection problems are NP-hard, even in a very restrictive cases.
Some exact and approximation algorithms for the general problem are
constructed. Polynomial and approximation algorithms for the robust two-stage
versions of basic problems, such as the selection and shortest path problems,
are also provided.
</p></div>
    </summary>
    <updated>2019-05-08T23:21:43Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-05-08T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1905.02424</id>
    <link href="http://arxiv.org/abs/1905.02424" rel="alternate" type="text/html"/>
    <title>Equal-Subset-Sum Faster Than the Meet-in-the-Middle</title>
    <feedworld_mtime>1557273600</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/m/Mucha:Marcin.html">Marcin Mucha</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/n/Nederlof:Jesper.html">Jesper Nederlof</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/p/Pawlewicz:Jakub.html">Jakub Pawlewicz</a>, Karol Węgrzycki <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1905.02424">PDF</a><br/><b>Abstract: </b>In the Equal-Subset-Sum problem, we are given a set $S$ of $n$ integers and
the problem is to decide if there exist two disjoint nonempty subsets $A,B
\subseteq S$, whose elements sum up to the same value. The problem is
NP-complete. The state-of-the-art algorithm runs in $O^{*}(3^{n/2}) \le
O^{*}(1.7321^n)$ time and is based on the meet-in-the-middle technique. In this
paper, we improve upon this algorithm and give $O^{*}(1.7088^n)$ worst case
Monte Carlo algorithm. This answers the open problem from Woeginger's
inspirational survey.
</p>
<p>Additionally, we analyse the polynomial space algorithm for Equal-Subset-Sum.
A naive polynomial space algorithm for Equal-Subset-Sum runs in $O^{*}(3^n)$
time. With read-only access to the exponentially many random bits, we show a
randomized algorithm running in $O^{*}(2.6817^n)$ time and polynomial space.
</p></div>
    </summary>
    <updated>2019-05-08T23:28:51Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-05-08T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1905.02383</id>
    <link href="http://arxiv.org/abs/1905.02383" rel="alternate" type="text/html"/>
    <title>Gaussian Differential Privacy</title>
    <feedworld_mtime>1557273600</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/d/Dong:Jinshuo.html">Jinshuo Dong</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/r/Roth:Aaron.html">Aaron Roth</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/s/Su:Weijie_J=.html">Weijie J. Su</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1905.02383">PDF</a><br/><b>Abstract: </b>Differential privacy has seen remarkable success as a rigorous and practical
formalization of data privacy in the past decade. But it also has some well
known weaknesses: notably, it does not tightly handle composition. This
weakness has inspired several recent relaxations of differential privacy based
on Renyi divergences. We propose an alternative relaxation of differential
privacy, which we term "$f$-differential privacy", which has a number of
appealing properties and avoids some of the difficulties associated with
divergence based relaxations. First, it preserves the hypothesis testing
interpretation of differential privacy, which makes its guarantees easily
interpretable. It allows for lossless reasoning about composition and
post-processing, and notably, a direct way to import existing tools from
differential privacy, including privacy amplification by subsampling. We define
a canonical single parameter family of definitions within our class which we
call "Gaussian Differential Privacy", defined based on the hypothesis testing
of two shifted Gaussian distributions. We show that this family is focal by
proving a central limit theorem, which shows that the privacy guarantees of
\emph{any} hypothesis-testing based definition of privacy (including
differential privacy) converges to Gaussian differential privacy in the limit
under composition. We also prove a finite (Berry-Esseen style) version of the
central limit theorem, which gives a useful tool for tractably analyzing the
exact composition of potentially complicated expressions. We demonstrate the
use of the tools we develop by giving an improved analysis of the privacy
guarantees of noisy stochastic gradient descent.
</p></div>
    </summary>
    <updated>2019-05-08T23:52:01Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-05-08T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1905.02367</id>
    <link href="http://arxiv.org/abs/1905.02367" rel="alternate" type="text/html"/>
    <title>Adversarially Robust Submodular Maximization under Knapsack Constraints</title>
    <feedworld_mtime>1557273600</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/a/Avdiukhin:Dmitrii.html">Dmitrii Avdiukhin</a>, Slobodan Mitrović, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/y/Yaroslavtsev:Grigory.html">Grigory Yaroslavtsev</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/z/Zhou:Samson.html">Samson Zhou</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1905.02367">PDF</a><br/><b>Abstract: </b>We propose the first adversarially robust algorithm for monotone submodular
maximization under single and multiple knapsack constraints with scalable
implementations in distributed and streaming settings. For a single knapsack
constraint, our algorithm outputs a robust summary of almost optimal (up to
polylogarithmic factors) size, from which a constant-factor approximation to
the optimal solution can be constructed. For multiple knapsack constraints, our
approximation is within a constant-factor of the best known non-robust
solution.
</p>
<p>We evaluate the performance of our algorithms by comparison to natural
robustifications of existing non-robust algorithms under two objectives: 1)
dominating set for large social network graphs from Facebook and Twitter
collected by the Stanford Network Analysis Project (SNAP), 2) movie
recommendations on a dataset from MovieLens. Experimental results show that our
algorithms give the best objective for a majority of the inputs and show strong
performance even compared to offline algorithms that are given the set of
removals in advance.
</p></div>
    </summary>
    <updated>2019-05-08T23:54:29Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-05-08T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1905.02358</id>
    <link href="http://arxiv.org/abs/1905.02358" rel="alternate" type="text/html"/>
    <title>Exponential Separations Between Turnstile Streaming and Linear Sketching</title>
    <feedworld_mtime>1557273600</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/k/Kallaugher:John.html">John Kallaugher</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/p/Price:Eric.html">Eric Price</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1905.02358">PDF</a><br/><b>Abstract: </b>Almost every known turnstile streaming algorithm is implementable as a linear
sketch. Is this necessarily true, or can there exist turnstile streaming
algorithms that use much less space than any linear sketch?
</p>
<p>It was shown in~\cite{LNW14} that, if a turnstile algorithm works for
arbitrarily long streams with arbitrarily large coordinates at intermediate
stages of the stream, then the turnstile algorithm can be implemented as a
linear sketch. Our results have the opposite form: if either the stream length
or the maximum value of the stream are substantially restricted, there exist
problems where linear sketching is exponentially harder than turnstile
streaming.
</p></div>
    </summary>
    <updated>2019-05-08T23:53:05Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-05-08T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1905.02354</id>
    <link href="http://arxiv.org/abs/1905.02354" rel="alternate" type="text/html"/>
    <title>PRSim: Sublinear Time SimRank Computation on Large Power-Law Graphs</title>
    <feedworld_mtime>1557273600</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/w/Wei:Zhewei.html">Zhewei Wei</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/h/He:Xiaodong.html">Xiaodong He</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/x/Xiao:Xiaokui.html">Xiaokui Xiao</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/w/Wang:Sibo.html">Sibo Wang</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/l/Liu:Yu.html">Yu Liu</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/d/Du:Xiaoyong.html">Xiaoyong Du</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/w/Wen:Ji=Rong.html">Ji-Rong Wen</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1905.02354">PDF</a><br/><b>Abstract: </b>{\it SimRank} is a classic measure of the similarities of nodes in a graph.
Given a node $u$ in graph $G =(V, E)$, a {\em single-source SimRank query}
returns the SimRank similarities $s(u, v)$ between node $u$ and each node $v
\in V$. This type of queries has numerous applications in web search and social
networks analysis, such as link prediction, web mining, and spam detection.
Existing methods for single-source SimRank queries, however, incur query cost
at least linear to the number of nodes $n$, which renders them inapplicable for
real-time and interactive analysis.
</p>
<p>{ This paper proposes \prsim, an algorithm that exploits the structure of
graphs to efficiently answer single-source SimRank queries. \prsim uses an
index of size $O(m)$, where $m$ is the number of edges in the graph, and
guarantees a query time that depends on the {\em reverse PageRank} distribution
of the input graph. In particular, we prove that \prsim runs in sub-linear time
if the degree distribution of the input graph follows the power-law
distribution, a property possessed by many real-world graphs. Based on the
theoretical analysis, we show that the empirical query time of all existing
SimRank algorithms also depends on the reverse PageRank distribution of the
graph.} Finally, we present the first experimental study that evaluates the
absolute errors of various SimRank algorithms on large graphs, and we show that
\prsim outperforms the state of the art in terms of query time, accuracy, index
size, and scalability.
</p></div>
    </summary>
    <updated>2019-05-08T23:29:16Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-05-08T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1905.02322</id>
    <link href="http://arxiv.org/abs/1905.02322" rel="alternate" type="text/html"/>
    <title>Orthogonal Range Reporting and Rectangle Stabbing for Fat Rectangles</title>
    <feedworld_mtime>1557273600</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/c/Chan:Timothy_M=.html">Timothy M. Chan</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/n/Nekrich:Yakov.html">Yakov Nekrich</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/s/Smid:Michiel.html">Michiel Smid</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1905.02322">PDF</a><br/><b>Abstract: </b>In this paper we study two geometric data structure problems in the special
case when input objects or queries are fat rectangles. We show that in this
case a significant improvement compared to the general case can be achieved.
</p>
<p>We describe data structures that answer two- and three-dimensional orthogonal
range reporting queries in the case when the query range is a \emph{fat}
rectangle. Our two-dimensional data structure uses $O(n)$ words and supports
queries in $O(\log\log U +k)$ time, where $n$ is the number of points in the
data structure, $U$ is the size of the universe and $k$ is the number of points
in the query range. Our three-dimensional data structure needs
$O(n\log^{\varepsilon}U)$ words of space and answers queries in $O(\log \log U
+ k)$ time. We also consider the rectangle stabbing problem on a set of
three-dimensional fat rectangles. Our data structure uses $O(n)$ space and
answers stabbing queries in $O(\log U\log\log U +k)$ time.
</p></div>
    </summary>
    <updated>2019-05-08T23:22:38Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-05-08T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1905.02316</id>
    <link href="http://arxiv.org/abs/1905.02316" rel="alternate" type="text/html"/>
    <title>Parallel Cut Pursuit For Minimization of the Graph Total Variation</title>
    <feedworld_mtime>1557273600</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/r/Raguet:Hugo.html">Hugo Raguet</a>, Loic Landrieu <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1905.02316">PDF</a><br/><b>Abstract: </b>We present a parallel version of the cut-pursuit algorithm for minimizing
functionals involving the graph total variation. We show that the decomposition
of the iterate into constant connected components, which is at the center of
this method, allows for the seamless parallelization of the otherwise costly
graph-cut based refinement stage. We demonstrate experimentally the efficiency
of our method in a wide variety of settings, from simple denoising on huge
graphs to more complex inverse problems with nondifferentiable penalties. We
argue that our approach combines the efficiency of graph-cuts based optimizers
with the versatility and ease of parallelization of traditional proximal
</p></div>
    </summary>
    <updated>2019-05-08T23:52:58Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-05-08T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1905.02313</id>
    <link href="http://arxiv.org/abs/1905.02313" rel="alternate" type="text/html"/>
    <title>Optimal Convergence Rate of Hamiltonian Monte Carlo for Strongly Logconcave Distributions</title>
    <feedworld_mtime>1557273600</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/c/Chen:Zongchen.html">Zongchen Chen</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/v/Vempala:Santosh_S=.html">Santosh S. Vempala</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1905.02313">PDF</a><br/><b>Abstract: </b>We study Hamiltonian Monte Carlo (HMC) for sampling from a strongly
logconcave density proportional to $e^{-f}$ where $f:\mathbb{R}^d \to
\mathbb{R}$ is $\mu$-strongly convex and $L$-smooth (the condition number is
$\kappa = L/\mu$). We show that the relaxation time (inverse of the spectral
gap) of ideal HMC is $O(\kappa)$, improving on the previous best bound of
$O(\kappa^{1.5})$; we complement this with an example where the relaxation time
is $\Omega(\kappa)$. When implemented using a nearly optimal ODE solver, HMC
returns an $\varepsilon$-approximate point in $2$-Wasserstein distance using
$\widetilde{O}((\kappa d)^{0.5} \varepsilon^{-1})$ gradient evaluations per
step and $\widetilde{O}((\kappa d)^{1.5}\varepsilon^{-1})$ total time.
</p></div>
    </summary>
    <updated>2019-05-08T23:54:47Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-05-08T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1905.02303</id>
    <link href="http://arxiv.org/abs/1905.02303" rel="alternate" type="text/html"/>
    <title>Design Space Exploration as Quantified Satisfaction</title>
    <feedworld_mtime>1557273600</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/f/Feldman:Alexander.html">Alexander Feldman</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/k/Kleer:Johan_de.html">Johan de Kleer</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/m/Matei:Ion.html">Ion Matei</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1905.02303">PDF</a><br/><b>Abstract: </b>We propose novel algorithms for design and design space exploration. The
designs computed by these algorithms are compositions of function types
specified in component libraries. Our algorithms reduce the design problem to
quantified satisfiability and use advanced solvers to find solutions that
represent useful systems. The algorithms we present in this paper are sound and
complete and are guaranteed to discover correct designs of optimal size, if
they exist. We apply our method to the design of Boolean systems and discover
new and more optimal classical and quantum circuits for common arithmetic
functions such as addition and multiplication. The performance of our
algorithms is evaluated through extensive experimentation. We have first
created a benchmark consisting of specifications of scalable synthetic digital
circuits and real-world mirochips. We have then generated multiple circuits
functionally equivalent to the ones in the benchmark. The quantified
satisfiability method shows more than four orders of magnitude speed-up,
compared to a generate and test method that enumerates all non-isomorphic
circuit topologies. Our approach generalizes circuit optimization. It uses
arbitrary component libraries and has applications to areas such as digital
circuit design, diagnostics, abductive reasoning, test vector generation, and
combinatorial optimization.
</p></div>
    </summary>
    <updated>2019-05-08T23:22:12Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-05-08T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1905.02298</id>
    <link href="http://arxiv.org/abs/1905.02298" rel="alternate" type="text/html"/>
    <title>Even Faster Elastic-Degenerate String Matching via Fast Matrix Multiplication</title>
    <feedworld_mtime>1557273600</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/b/Bernardini:Giulia.html">Giulia Bernardini</a>, Paweł Gawrychowski, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/p/Pisanti:Nadia.html">Nadia Pisanti</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/p/Pissis:Solon_P=.html">Solon P. Pissis</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/r/Rosone:Giovanna.html">Giovanna Rosone</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1905.02298">PDF</a><br/><b>Abstract: </b>An elastic-degenerate (ED) string is a sequence of $n$ sets of strings of
total length $N$, which was recently proposed to model a set of similar
sequences. The ED string matching (EDSM) problem is to find all occurrences of
a pattern of length $m$ in an ED text. The EDSM problem has recently received
some attention in the combinatorial pattern matching community, and an
$\mathcal{O}(nm^{1.5}\sqrt{\log m} + N)$-time algorithm is known [Aoyama et
al., CPM 2018]. The standard assumption in the prior work on this question is
that $N$ is substantially larger than both $n$ and $m$, and thus we would like
to have a linear dependency on the former. Under this assumption, the natural
open problem is whether we can decrease the 1.5 exponent in the time
complexity, similarly as in the related (but, to the best of our knowledge, not
equivalent) word break problem [Backurs and Indyk, FOCS 2016].
</p>
<p>Our starting point is a conditional lower bound for the EDSM problem. We use
the popular combinatorial Boolean matrix multiplication (BMM) conjecture
stating that there is no truly subcubic combinatorial algorithm for BMM [Abboud
and Williams, FOCS 2014]. By designing an appropriate reduction we show that a
combinatorial algorithm solving the EDSM problem in
$\mathcal{O}(nm^{1.5-\epsilon} + N)$ time, for any $\epsilon&gt;0$, refutes this
conjecture. Of course, the notion of combinatorial algorithms is not clearly
defined, so our reduction should be understood as an indication that decreasing
the exponent requires fast matrix multiplication.
</p>
<p>Two standard tools used in algorithms on strings are string periodicity and
fast Fourier transform. Our main technical contribution is that we successfully
combine these tools with fast matrix multiplication to design a
non-combinatorial $\mathcal{O}(nm^{1.381} + N)$-time algorithm for EDSM. To the
best of our knowledge, we are the first to do so.
</p></div>
    </summary>
    <updated>2019-05-08T23:53:25Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-05-08T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1905.02270</id>
    <link href="http://arxiv.org/abs/1905.02270" rel="alternate" type="text/html"/>
    <title>Lifted Multiplicity Codes</title>
    <feedworld_mtime>1557273600</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/l/Li:Ray.html">Ray Li</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/w/Wootters:Mary.html">Mary Wootters</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1905.02270">PDF</a><br/><b>Abstract: </b>Lifted Reed Solomon Codes (Guo, Kopparty, Sudan 2013) were introduced in the
context of locally correctable and testable codes. They are multivariate
polynomials whose restriction to any line is a codeword of a Reed-Solomon code.
We generalize their construction by introducing lifted multiplicity codes,
multivariate polynomial codes whose restriction to any line is a codeword of a
multiplicity code (Kopparty, Saraf, Yekhanin 2014). We show that lifted
multiplicity codes have a better trade-off between redundancy and a notion of
locality called the $t$-disjoint-repair-group property than previously known
constructions. More precisely, we show that lifted multiplicity codes with
length $N$ and redundancy $O(t^{0.585} \sqrt{N})$ have the property that any
symbol of a codeword can be reconstructed in $t$ different ways, each using a
disjoint subset of the other coordinates. This gives the best known trade-off
for this problem for any super-constant $t &lt; \sqrt{N}$. We also give an
alternative analysis of lifted Reed Solomon codes using dual codes, which may
be of independent interest.
</p></div>
    </summary>
    <updated>2019-05-08T23:20:29Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Complexity"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CC" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Complexity (cs.CC) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CC updates on arXiv.org</title>
      <updated>2019-05-08T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>https://eccc.weizmann.ac.il/report/2019/067</id>
    <link href="https://eccc.weizmann.ac.il/report/2019/067" rel="alternate" type="text/html"/>
    <title>TR19-067 |  Sign rank vs Discrepancy | 

	Hamed Hatami, 

	Kaave Hosseini, 

	Shachar Lovett</title>
    <summary>Sign-rank and discrepancy are two central notions in communication complexity. The seminal work of  Babai, Frankl, and Simon from 1986  initiated an active line of research that investigates  the gap between these two notions.
In this article, we establish the strongest possible separation  by constructing a Boolean matrix whose sign-rank is only $3$, and yet its discrepancy is  $2^{-\Omega(n)}$. We note that every matrix of sign-rank $2$ has discrepancy $n^{-O(1)}$.
Our result in particular implies that there are Boolean functions with $O(1)$ unbounded error randomized communication complexity while having $\Omega(n)$ weakly unbounded error randomized communication complexity.</summary>
    <updated>2019-05-07T09:52:08Z</updated>
    <published>2019-05-07T09:52:08Z</published>
    <source>
      <id>https://eccc.weizmann.ac.il/</id>
      <author>
        <name>ECCC papers</name>
      </author>
      <link href="https://eccc.weizmann.ac.il/" rel="alternate" type="text/html"/>
      <link href="https://example.com/feeds/reports/" rel="self" type="application/atom+xml"/>
      <subtitle>Latest Reports published at https://eccc.weizmann.ac.il</subtitle>
      <title>ECCC - Reports</title>
      <updated>2019-05-08T23:56:43Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://rjlipton.wordpress.com/?p=15840</id>
    <link href="https://rjlipton.wordpress.com/2019/05/06/the-network-coding-conjecture-is-powerful/" rel="alternate" type="text/html"/>
    <title>The Network Coding Conjecture Is Powerful</title>
    <summary>More hard Boolean functions Peyman Afshani, Casper Freksen, Lior Kamma, and Kasper Larsen (AFKL) have a recent paper which we just discussed. Today Ken and I will update our discussion. Their paper assumes the network coding conjecture (NCC) and proves a lower bound on the Boolean complexity of integer multiplication. The main result of AFKL […]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>
<font color="#0044cc"><br/>
<em>More hard Boolean functions</em><br/>
<font color="#000000"/></font></p><font color="#0044cc"><font color="#000000">
<p><a href="https://rjlipton.files.wordpress.com/2019/05/akklshifted.jpg"><img alt="" class="alignright wp-image-15841" height="162" src="https://rjlipton.files.wordpress.com/2019/05/akklshifted.jpg?w=197&amp;h=162" width="197"/></a></p>
<p>
Peyman Afshani, Casper Freksen, Lior Kamma, and Kasper Larsen (AFKL) have a recent <a href="https://arxiv.org/abs/1902.10935">paper</a> which we just <a href="https://rjlipton.wordpress.com/2019/04/30/network-coding-yields-lower-bounds/">discussed</a>. </p>
<p>
Today Ken and I will update our discussion. </p>
<p>
Their paper assumes the network coding conjecture (NCC) and proves a lower bound on the Boolean complexity of integer multiplication. The main result of AFKL is:</p>
<blockquote><p><b>Theorem 1</b> <em> If the NCC is true, then every Boolean circuit that computes the <img alt="{\mathsf{shift}}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cmathsf%7Bshift%7D%7D&amp;bg=e8e8e8&amp;fg=000000&amp;s=0" title="{\mathsf{shift}}"/> function has size <img alt="{\Omega(n \log n)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5COmega%28n+%5Clog+n%29%7D&amp;bg=e8e8e8&amp;fg=000000&amp;s=0" title="{\Omega(n \log n)}"/>. </em>
</p></blockquote>
<p/><p>
The <img alt="{\mathsf{shift}}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cmathsf%7Bshift%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\mathsf{shift}}"/> function is: Given an <img alt="{n}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bn%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{n}"/>-bit number <img alt="{x}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x}"/> and a number <img alt="{k}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bk%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{k}"/> so that <img alt="{1 \le k \le n}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B1+%5Cle+k+%5Cle+n%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{1 \le k \le n}"/>, compute the <img alt="{2n}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B2n%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{2n}"/>-bit product of <img alt="{x}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x}"/> by <img alt="{2^{k}}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B2%5E%7Bk%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{2^{k}}"/>: 	</p>
<p align="center"><img alt="\displaystyle  x \times 2^{k}. " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++x+%5Ctimes+2%5E%7Bk%7D.+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  x \times 2^{k}. "/></p>
<p>This is a special case of the integer multiplication problem. In symbols it maps <img alt="{x}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x}"/> and <img alt="{k}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bk%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{k}"/> to <img alt="{0^k x 0^{n-k}}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B0%5Ek+x+0%5E%7Bn-k%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{0^k x 0^{n-k}}"/>, as in our photo above. </p>
<p>
Our point, however, is not about integer multiplication. Nor even about NCC—no knowledge of it will be needed today, so read on even if you are not aware of NCC. No. Our point is that a whole lot of other Boolean functions would inherit the same <img alt="{\Omega(n \log n)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5COmega%28n+%5Clog+n%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\Omega(n \log n)}"/> circuit lower bound as <img alt="{\mathsf{shift}}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cmathsf%7Bshift%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\mathsf{shift}}"/>. And several aspects of that seem troubling.</p>
<p>
</p><p/><h2> Some Worry </h2><p/>
<p/><p>
We are impressed by the AFKL paper but also worried. Proving a super-linear lower bound in the unrestricted Boolean complexity model has long been considered a difficult problem. Maybe a hopeless problem. Yes they are proving it not for a single-output function; they are proving it for a multiple-output function. Still I thought that it seems too good to be correct. Even worse, assuming NCC they also resolve other open problems in complexity theory. I am worried.</p>
<p>
What we suggest is to catalog and study the consequences of their results. If we find that their results lead to a contradiction, then there was something to be worried about. Or perhaps it would mean that NCC is false. If we find no contradiction, then everything we discover is also a consequence of NCC. Either way we learn more.</p>
<p>
</p><p/><h2> AFKL Functions </h2><p/>
<p/><p>
Let’s call a Boolean function an <i>AFKL function</i> provided it has Boolean circuit complexity <img alt="{\Omega(n \log n)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5COmega%28n+%5Clog+n%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\Omega(n \log n)}"/> if the NCC is true. Thanks to AFKL, we now know that integer multiplication is an AFKL function. I started to think about: What functions are in this class? Here are some examples: </p>
<ul>
<li>
Integer multiplication <p/>
</li><li>
Integer multiplication by a power of <img alt="{2}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B2%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{2}"/> <p/>
</li><li>
<img alt="{\mathsf{FLIP}}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cmathsf%7BFLIP%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\mathsf{FLIP}}"/> <p/>
</li><li>
Discrete convolution <p/>
</li><li>
Sparse convolution
</li></ul>
<p>
We describe the last three next. We show they have linear size-preserving reductions from the <img alt="{\mathsf{shift}}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cmathsf%7Bshift%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\mathsf{shift}}"/> function.</p>
<p>
</p><p/><h2> The Flip Function </h2><p/>
<p/><p>
Define <img alt="{\mathsf{FLIP}_{n}: \{0,1\}^{n} \rightarrow \{0,1\}^{n}}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cmathsf%7BFLIP%7D_%7Bn%7D%3A+%5C%7B0%2C1%5C%7D%5E%7Bn%7D+%5Crightarrow+%5C%7B0%2C1%5C%7D%5E%7Bn%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\mathsf{FLIP}_{n}: \{0,1\}^{n} \rightarrow \{0,1\}^{n}}"/> by </p>
<p align="center"><img alt="\displaystyle  \mathsf{FLIP}_{n}(0^{k}1\alpha)= 1\alpha 0^{k}. " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++%5Cmathsf%7BFLIP%7D_%7Bn%7D%280%5E%7Bk%7D1%5Calpha%29%3D+1%5Calpha+0%5E%7Bk%7D.+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  \mathsf{FLIP}_{n}(0^{k}1\alpha)= 1\alpha 0^{k}. "/></p>
<p>for <img alt="{k \ge 1}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bk+%5Cge+1%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{k \ge 1}"/>. For any input not of this form, let <img alt="{\mathsf{FLIP}_{n}}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cmathsf%7BFLIP%7D_%7Bn%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\mathsf{FLIP}_{n}}"/> be <img alt="{0^{n}}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B0%5E%7Bn%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{0^{n}}"/>.</p>
<blockquote><p><b>Theorem 2</b> <em> The Boolean function <img alt="{\mathsf{FLIP}_{n}}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cmathsf%7BFLIP%7D_%7Bn%7D%7D&amp;bg=e8e8e8&amp;fg=000000&amp;s=0" title="{\mathsf{FLIP}_{n}}"/> is an AFKL function. </em>
</p></blockquote>
<p/><p>
<em>Proof:</em>  Let <img alt="{x,k}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx%2Ck%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x,k}"/> be the input to <img alt="{\mathsf{shift}}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cmathsf%7Bshift%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\mathsf{shift}}"/> where <img alt="{|x| = n}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%7Cx%7C+%3D+n%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{|x| = n}"/> and <img alt="{k \leq n}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bk+%5Cleq+n%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{k \leq n}"/> in binary. In linear size we can test <img alt="{k = 0}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bk+%3D+0%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{k = 0}"/>, when there is nothing to do, so presume <img alt="{k \geq 1}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bk+%5Cgeq+1%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{k \geq 1}"/>. The first step is to create </p>
<p align="center"><img alt="\displaystyle  0^{n-k}10^{k-1}. " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++0%5E%7Bn-k%7D10%5E%7Bk-1%7D.+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  0^{n-k}10^{k-1}. "/></p>
<p>This is just binary-to-unary conversion and has linear-size circuits—as in multiplex decoding and as remarked by AFKL. This becomes the first <img alt="{n}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bn%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{n}"/> bits of an application of <img alt="{\mathsf{FLIP}}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cmathsf%7BFLIP%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\mathsf{FLIP}}"/> to the <img alt="{2n}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B2n%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{2n}"/>-bit string </p>
<p align="center"><img alt="\displaystyle  0^{n-k}10^{k-1} x. " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++0%5E%7Bn-k%7D10%5E%7Bk-1%7D+x.+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  0^{n-k}10^{k-1} x. "/></p>
<p>It yields </p>
<p align="center"><img alt="\displaystyle  10^{k-1} x 0^{n-k}. " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++10%5E%7Bk-1%7D+x+0%5E%7Bn-k%7D.+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  10^{k-1} x 0^{n-k}. "/></p>
<p>Changing the first bit to <img alt="{0}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B0%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{0}"/> then leaves the desired output of <img alt="{\mathsf{shift}}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cmathsf%7Bshift%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\mathsf{shift}}"/>. <img alt="\Box" class="latex" src="https://s0.wp.com/latex.php?latex=%5CBox&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\Box"/></p>
<p>
The point is that <img alt="{\mathsf{FLIP}_{n}}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cmathsf%7BFLIP%7D_%7Bn%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\mathsf{FLIP}_{n}}"/> is a super-simple function. It just moves the initial block of <img alt="{0}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B0%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{0}"/>‘s in a string to the end. It is amazing that this function should have only non-linear, indeed <img alt="{\Omega(n\log n)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5COmega%28n%5Clog+n%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\Omega(n\log n)}"/>-sized, circuits. </p>
<p>
This also means that Ken’s <a href="https://blog.computationalcomplexity.org/2007/07/concrete-open-problem.html">function</a>, which takes <img alt="{x \in \{0,1,2\}^*}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx+%5Cin+%5C%7B0%2C1%2C2%5C%7D%5E%2A%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x \in \{0,1,2\}^*}"/> and moves all the <img alt="{2}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B2%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{2}"/>s to the end of <img alt="{x}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x}"/>, is hard even in the special cases where all the <img alt="{2}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B2%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{2}"/>‘s are at the front. What’s strange is that Ken proves his function equivalent to another special case where <img alt="{|x|}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%7Cx%7C%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{|x|}"/> is even and exactly half the characters are <img alt="{2}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B2%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{2}"/>. This latter case is one in which <img alt="{\mathsf{FLIP}}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cmathsf%7BFLIP%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\mathsf{FLIP}}"/> is easy, but the two cases are separate. All this is touch-and-go enough to compound our “worry.”</p>
<p>
</p><p/><h2> The Sparse Convolution Function </h2><p/>
<p/><p>
The following is also an AFKL function. 	</p>
<p align="center"><img alt="\displaystyle  y_{l} = \bigvee_{i=1}^{n-l} w_{i} \wedge x_{i+l}, " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++y_%7Bl%7D+%3D+%5Cbigvee_%7Bi%3D1%7D%5E%7Bn-l%7D+w_%7Bi%7D+%5Cwedge+x_%7Bi%2Bl%7D%2C+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  y_{l} = \bigvee_{i=1}^{n-l} w_{i} \wedge x_{i+l}, "/></p>
<p>for <img alt="{l=1,\dots,n}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bl%3D1%2C%5Cdots%2Cn%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{l=1,\dots,n}"/> where an empty OR is defined to be <img alt="{0}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B0%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{0}"/>. This can even further be restricted to the case where exactly one of the <img alt="{w_{i}}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bw_%7Bi%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{w_{i}}"/> are <img alt="{1}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B1%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{1}"/> and the rest are <img alt="{0}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B0%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{0}"/>. Call this the <i>sparse convolution function</i>.</p>
<blockquote><p><b>Theorem 3</b> <em> The sparse convolution is a monotone AFKL function. </em>
</p></blockquote>
<p/><p>
<em>Proof:</em>  We will give a sketch of why this is true. Define 	</p>
<p align="center"><img alt="\displaystyle  y_{l} = \bigvee_{i = 1}^{n-l} \bar{x}_{1} \wedge \cdots \wedge \bar{x}_{i} \wedge x_{i+1} \wedge x_{i+l}. " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++y_%7Bl%7D+%3D+%5Cbigvee_%7Bi+%3D+1%7D%5E%7Bn-l%7D+%5Cbar%7Bx%7D_%7B1%7D+%5Cwedge+%5Ccdots+%5Cwedge+%5Cbar%7Bx%7D_%7Bi%7D+%5Cwedge+x_%7Bi%2B1%7D+%5Cwedge+x_%7Bi%2Bl%7D.+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  y_{l} = \bigvee_{i = 1}^{n-l} \bar{x}_{1} \wedge \cdots \wedge \bar{x}_{i} \wedge x_{i+1} \wedge x_{i+l}. "/></p>
<p>It is not hard to show that this yields the FLIP function. We can reduce computing it to a convolution of the <img alt="{x_{i}}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx_%7Bi%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x_{i}}"/>‘s and <img alt="{\Gamma(i)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5CGamma%28i%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\Gamma(i)}"/> where 	</p>
<p align="center"><img alt="\displaystyle  \Gamma(i) = \bar{x}_{1} \wedge \cdots \wedge \bar{x}_{i} \wedge x_{i+1}. " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++%5CGamma%28i%29+%3D+%5Cbar%7Bx%7D_%7B1%7D+%5Cwedge+%5Ccdots+%5Cwedge+%5Cbar%7Bx%7D_%7Bi%7D+%5Cwedge+x_%7Bi%2B1%7D.+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  \Gamma(i) = \bar{x}_{1} \wedge \cdots \wedge \bar{x}_{i} \wedge x_{i+1}. "/></p>
<p>The key is to note that exactly one <img alt="{\Gamma(i)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5CGamma%28i%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\Gamma(i)}"/> will be non-zero, and so the convolution is sparse. <img alt="\Box" class="latex" src="https://s0.wp.com/latex.php?latex=%5CBox&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\Box"/></p>
<p>
The sparse convolution function raises an interesting question: Are the methods for sparse FFT useful here? The lower bound for AFKL functions suggests that they are not applicable. </p>
<p>
</p><p/><h2> Is the NCC-Boolean Connection New? </h2><p/>
<p/><p>
The subtitle of our <a href="https://rjlipton.wordpress.com/2019/04/30/network-coding-yields-lower-bounds/">post</a> marveled that a core-theory advance on circuits for multiplication had come via the practical side of throughput in computer networks. AFKL deserve plaudits for linking two communities. We should mention that one theoretician we both know well, Mark Braverman, with his students Sumegha Garg and Ariel Schvartzman at Princeton, <a href="https://arxiv.org/pdf/1608.06545.pdf">proved</a> a fact about NCC that is relevant to this discussion:</p>
<blockquote><p><b>Theorem 4</b> <em><a name="BGS"/> Either NCC is false, or bit-operations save a whole <img alt="{(\log n)^{\Omega(1)}}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%28%5Clog+n%29%5E%7B%5COmega%281%29%7D%7D&amp;bg=e8e8e8&amp;fg=000000&amp;s=0" title="{(\log n)^{\Omega(1)}}"/> factor in the network size. </em>
</p></blockquote>
<p/><p>
Even this paper, however, does not address lower bounds on Boolean circuits. The only prior link between NCC and Boolean complexity is a 2007 <a href="https://www.combinatorics.org/ojs/index.php/eljc/article/view/v14i1r44">paper</a> by Søren Riis, which is cited by AFKL, and has a 2011 <a href="http://emis.impa.br/EMIS/journals/EJC/Volume_18/PDF/v18i1p192.pdf">followup</a> by Demetres Christofides and Klas Markström. The paper by Riis has a new “guessing game” on graphs and a demonstration that a lower-bound conjecture of Leslie Valiant needs to be rescued by dividing by a <img alt="{\log\log n}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Clog%5Clog+n%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\log\log n}"/> factor. Theorem <a href="https://rjlipton.wordpress.com/feed/#BGS">4</a>, however, seems to say that no such <img alt="{\log\log n}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Clog%5Clog+n%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\log\log n}"/> shading can apply to NCC.</p>
<p>
When we ask Google “network coding conjecture Boolean circuit lower bounds” (without quotes), the first page shows AFKL, our posts, and this 2014 <a href="https://people.csail.mit.edu/rrw/ccc14-survey.pdf">survey</a> by Ryan Williams—which mentions neural networks but not NCC. On the next page of hits we see Riis and the followup paper but nothing else that seems directly relevant. Nor does appending `-multiplication’ help screen out AFKL and our posts.</p>
<p>
There is said to be empirical evidence for NCC. We wonder, however, whether that has reached the intensity of thought about circuit lower bounds. We say this because the implications from NCC make three giant steps:</p>
<ol>
<li>
Not only does it assert a super-linear circuit lower bound (okay, for a function with <img alt="{n}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bn%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{n}"/> output bits), but… <p/>
</li><li>
…it asserts <img alt="{\Omega(n\log n)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5COmega%28n%5Clog+n%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\Omega(n\log n)}"/>… <p/>
</li><li>
…for functions that are easily in Turing machine linear time.
</li></ol>
<p>
So one side of our worry is whether NCC can actually shed light on so many fundamental issues from complexity theory, more than absorbing light. At the very least, AFKL have re-stimulated interest in all of these issues. </p>
<p>
</p><p/><h2> Open Problems </h2><p/>
<p/><p>
Is <img alt="{\mathsf{FLIP}}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cmathsf%7BFLIP%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\mathsf{FLIP}}"/> hard? Is NCC true? What other Boolean functions are AFKL functions? What about other consequences of the NCC to complexity theory?</p>
<p/></font></font></div>
    </content>
    <updated>2019-05-07T03:05:05Z</updated>
    <published>2019-05-07T03:05:05Z</published>
    <category term="All Posts"/>
    <category term="Ideas"/>
    <category term="News"/>
    <category term="Open Problems"/>
    <category term="P=NP"/>
    <category term="Results"/>
    <category term="AFKL functions"/>
    <category term="Casper Freksen"/>
    <category term="circuit complexity"/>
    <category term="conjecture"/>
    <category term="integer multiplication"/>
    <category term="Kasper Larsen"/>
    <category term="Lior Kamma"/>
    <category term="lower bounds"/>
    <category term="Mark Braverman"/>
    <category term="network coding"/>
    <category term="Peyman Afshani"/>
    <category term="reductions"/>
    <author>
      <name>RJLipton+KWRegan</name>
    </author>
    <source>
      <id>https://rjlipton.wordpress.com</id>
      <logo>https://s0.wp.com/i/buttonw-com.png</logo>
      <link href="https://rjlipton.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="https://rjlipton.wordpress.com" rel="alternate" type="text/html"/>
      <link href="https://rjlipton.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="https://rjlipton.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>a personal view of the theory of computation</subtitle>
      <title>Gödel’s Lost Letter and P=NP</title>
      <updated>2019-05-08T23:56:57Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://kintali.wordpress.com/?p=1235</id>
    <link href="https://kintali.wordpress.com/2019/05/06/preventing-future-college-admissions-scandals-using-blockchain/" rel="alternate" type="text/html"/>
    <title>Preventing future college admissions scandals using Blockchain</title>
    <summary>The recent college admissions scandal resulted in the largest case of its kind to be prosecuted by the US Justice Department. A massive federal investigation code-named ‘Operation Varsity Blues’ uncovered this scandal and charged several high-profile people with bribery, racketeering, money laundering, conspiracy to commit mail and wire fraud. The internet commentary about this topic includes phrases […]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p class="graf graf--p graf-after--h3" id="5bf6">The recent <a class="markup--anchor markup--p-anchor" href="https://en.wikipedia.org/wiki/2019_college_admissions_bribery_scandal" rel="nofollow noopener noopener noopener nofollow noopener" target="_blank">college admissions scandal</a> resulted in the largest case of its kind to be prosecuted by the US Justice Department. A massive federal investigation code-named ‘Operation Varsity Blues’ uncovered this scandal and charged several high-profile people with bribery, racketeering, money laundering, conspiracy to commit mail and wire fraud. The internet commentary about this topic includes phrases like “broken admissions system”, “rich can buy their way into college”, etc etc.</p>
<p class="graf graf--p graf-after--p" id="4b6a">There must be several other cases of fraud that go unnoticed on a daily basis. It’s in human nature to shortcut the rules, collude and cheat to achieve one’s own short-term goals, hoping to get away with one’s fraudulent actions. Let’s discuss how to use Blockchain technology and create a rigorous system to prevent some aspects of such scandals in future.</p>
<p> </p>
<p class="graf graf--p graf-after--p" id="b66e"><strong class="markup--strong markup--p-strong">Problems</strong>: Fake athletic certificates and phony athletic profile. Taking photos of students on a stationary rowing machine. Photoshopping students’ face on another athlete’s photo.</p>
<p class="graf graf--p graf-after--p" id="ad90"><strong class="markup--strong markup--p-strong">Solution</strong>: A genuine high-school athlete achieves his/her athletic credentials during a four year period. Getting a genuine athletic certificate involves achieving several intermediate goals. For example, if you achieved a black belt in karate in your 11th grade, you must have progressed through beginner level (with white, yellow and orange belts), intermediate level (with green, blue, purple, brown and red belts) and then reached the advanced level (with a black belt). <a class="markup--anchor markup--p-anchor" href="https://truecerts.co/" rel="noopener nofollow" target="_blank">TrueCerts</a> technology allows sports coaching centers to create certificates for each of these intermediate athletic achievements, sign them using their private keys and post only the SHA-256 hash of the certificate on a public blockchain, thus immutably time-stamping each achievement at the specific day/time the athlete achieved it. The athletic photos can be time-stamped similarly.</p>
<p class="graf graf--p graf-after--p" id="2c0c">This process achieves the seemingly impossible combination of <strong class="markup--strong markup--p-strong">security, privacy and transparency </strong>!! Security is achieved by the asymmetric key encryption. Privacy is achieved by the one-way nature of the cryptographic hash function <a class="markup--anchor markup--p-anchor" href="https://en.wikipedia.org/wiki/SHA-2" rel="noopener nofollow" target="_blank">SHA 256</a>. Transparency is achieved by the fact that anybody with the access to the sports certificate (upon student’s consent) can compute the SHA 256 hash of the certificate and verify that it is stored on a public blockchain validly signed by the private key of the issuer (sports coaching center). This eliminates the fraudulent behavior of creating a bunch of fake credentials and photos, all at once, in a brief period of time. Using a fairly decentralized public blockchain is very important here.</p>
<p> </p>
<p class="graf graf--p graf-after--p" id="c253"><strong class="markup--strong markup--p-strong">Problem</strong>: Bribing coaches to accept certain students in their sports teams or issue fake credentials.</p>
<p class="graf graf--p graf-after--p" id="6290"><strong class="markup--strong markup--p-strong">Solution</strong>: This problem can be solved by having several people (perhaps five coaches, some administrative assistants, one principal, one vice-principal, etc) in the organization collectively responsible (using multi-signature wallets and m-of-n signatures) to issue credentials. Each of the involved person is accountable for every issued certificate.</p>
<p class="graf graf--p graf-after--p" id="eb99">Bribing one coach is easy. Bribing ten people is hard. People often hesitate bribing multiple people. Collusion becomes increasingly hard when you increase the size of the group involved. When there are more people involved, there is a higher chance that at least one of them is honest (and brave) to overcome the pressure of the others and blow the whistle.</p>
<p> </p>
<p class="graf graf--p graf-after--p" id="0d42"><strong class="markup--strong markup--p-strong">Problem</strong>: Fake college entrance exam (SAT, ACT) test scores</p>
<p class="graf graf--p graf-after--p" id="fe6e"><strong class="markup--strong markup--p-strong">Solution</strong>: Current paper-based test score issuance and verification system is too time-consuming and error-prone. These credentials can be easily faked or tampered with. An ideal solution involves creating a digital certificate, validly signed (or multi-signed) by the issuer and time-stamped with a <a class="markup--anchor markup--p-anchor" href="https://en.wikipedia.org/wiki/SHA-2" rel="nofollow noopener" target="_blank">SHA 256</a> hash on a public blockchain. See <a class="markup--anchor markup--p-anchor" href="https://medium.com/@truecerts/dr-kintalis-motivation-behind-developing-truecerts-platform-aba93f4d290a" rel="noopener" target="_blank">my previous post</a> about preventing fraud in academic transcripts and making the entire system efficient.</p>
<p> </p>
<p class="graf graf--p graf-after--p" id="b957"><strong class="markup--strong markup--p-strong">Problem</strong>: Other students taking entrance tests on your behalf.</p>
<p class="graf graf--p graf-after--p" id="0e07"><strong class="markup--strong markup--p-strong">Solution</strong>: This is a problem of verifying the identity of the student taking the test. The current system of using paper-based credentials is broken. It’s easy to create fake driver’s license, passports etc. At <a class="markup--anchor markup--p-anchor" href="https://truecerts.co/" rel="nofollow noopener" target="_blank">TrueCerts</a>, we have created an automated multi-step identity verification that combines your standard KYC identity procedures, utility bills and more importantly biometrics. We define identity as a several data points achieved over a period of time, not just one piece of paper. It’s very hard to cheat all of these steps. If you have a look-alike twin then consider yourself lucky <img alt="&#x1F642;" class="wp-smiley" src="https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f642.png" style="height: 1em;"/></p>
<p> </p>
<p class="graf graf--p graf-after--p" id="a16a"><strong class="markup--strong markup--p-strong">Partially solvable problems</strong>: Bribing officials to change student’s answers in paper-based exam can be solved to certain extent by using a completely computer-based exam. Bribing proctors to tell the answers to a student (during the test) can be solved with computer-vision-based cheating detection software. Some photoshopped images can be detected using image analysis techniques.</p>
<p> </p>
<p class="graf graf--p graf-after--p" id="4d0f"><strong class="markup--strong markup--p-strong">Hard to solve problems</strong>: (1) Getting a fake medical certificate that your kid requires an isolated room to take the test and then bribing the proctor to tell him/her all the answers during the test. (2) Laundering bribes using a non-profit entity. Phew…. These things actually happened during this college admissions scandal. As the famous saying goes “a person is capable of as much atrocity as he/she has imagination”.</p>
<p> </p>
<p class="graf graf--p graf-after--p" id="5ad0">In summary, combining the existing technologies we can solve several of the above mentioned problems and simultaneously achieve <strong class="markup--strong markup--p-strong">security, privacy and transparency</strong>. The main goal here is to make the bad people’s job as difficult as possible and simultaneously making the good people’s job very efficient.</p>
<p class="graf graf--p graf-after--p" id="a4f5">If you want to know more about how we (at <a class="markup--anchor markup--p-anchor" href="https://truecerts.co/" rel="nofollow noopener" target="_blank">TrueCerts</a>) are using Blockchain and other technologies to prevent fraud and corruption in broad range of areas, <a class="markup--anchor markup--p-anchor" href="https://truecerts.co/" rel="nofollow noopener" target="_blank">contact us</a>.</p>
<p class="graf graf--p graf-after--p" id="e889">Stay tuned for my next post about a huge list of real-world fraud and corruption stories that can be prevented rigorously by using cutting-edge technologies.</p>
<p><img alt="TrueCertsTrustSimplified" class="alignnone size-full wp-image-1236" src="https://kintali.files.wordpress.com/2019/05/truecertstrustsimplified.png?w=660"/></p></div>
    </content>
    <updated>2019-05-07T01:29:32Z</updated>
    <published>2019-05-07T01:29:32Z</published>
    <category term="Education"/>
    <category term="Uncategorized"/>
    <category term="bitcoin"/>
    <category term="blockchain"/>
    <category term="college admissions scandal"/>
    <author>
      <name>kintali</name>
    </author>
    <source>
      <id>https://kintali.wordpress.com</id>
      <logo>https://secure.gravatar.com/blavatar/e1376dd220aa259d0efd0638d7619231?s=96&amp;d=https%3A%2F%2Fs0.wp.com%2Fi%2Fbuttonw-com.png</logo>
      <link href="https://kintali.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="https://kintali.wordpress.com" rel="alternate" type="text/html"/>
      <link href="https://kintali.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="https://kintali.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Computational Complexity, Polyhedral Combinatorics, Algorithms and Graph Theory</subtitle>
      <title>My Brain is Open</title>
      <updated>2019-05-08T23:57:02Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-3722233.post-2431469456247088523</id>
    <link href="https://blog.computationalcomplexity.org/feeds/2431469456247088523/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="https://blog.computationalcomplexity.org/2019/05/thoughts-on-recent-jeopardy-streak.html#comment-form" rel="replies" type="text/html"/>
    <link href="https://www.blogger.com/feeds/3722233/posts/default/2431469456247088523" rel="edit" type="application/atom+xml"/>
    <link href="https://www.blogger.com/feeds/3722233/posts/default/2431469456247088523" rel="self" type="application/atom+xml"/>
    <link href="https://blog.computationalcomplexity.org/2019/05/thoughts-on-recent-jeopardy-streak.html" rel="alternate" type="text/html"/>
    <title>Thoughts on the recent Jeopardy streak (SPOILERS)</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">James Holzhauer  has won 22 consecutive games of Jeopardy and has made around 1.6 million dollars. Nice work if you can get it. Here are some thoughts no this<br/>
<br/>
1) Before James H the records for number of consecutive games was, and still is, Ken Jennings winning 74 in a row, and second place was 20. I was surprised that Ken was that much better than the competition.<br/>
<br/>
2) Before James H the record for amount of money in normal play (not extra from, say, tournament of champions or losing to a computer) was around 400,000. I was surprised that Ken was that much better than the competition.<br/>
<br/>
3) James is obliterating the records for most wins in a single game. He holds the top 12 records for this.  This is due to his betting A LOT on the daily doubles and the final jeop, as well as of course answering so many questions right.<br/>
<br/>
4) One reason players in Jeopardy don't have long streaks is fatigue. The actually play<br/>
5 games a day, two days of the week.  James H is getting a break since he has two weeks off now since they will soon have the Teachers Tournament. This could work either way--- he gets a break or he loses being in-the-zone.<br/>
<br/>
5) James strategy is:<br/>
<br/>
a) Begin with the harder (and more lucrative) questions.<br/>
<br/>
b) Bet A LOT on the daily doubles (which are more likely to be in the more lucrative questions) and almost always go into final jeop with more than twice your opponent (He failed to do this only once.)<br/>
<br/>
c) Bet A LOT on Final Jeop- though not enough so that if you lose you lose the game. I think he's gotten every Final Jeop question right.<br/>
<br/>
For more on his strategy see this article by Oliver Roeder in Nate Silvers Blog: <a href="https://fivethirtyeight.com/features/the-man-who-solved-jeopardy/">here</a><br/>
<br/>
6) I tend to think of this as being a high-risk, high-reward strategy and thus it is unlikely he will beat Ken Jennings, but every time he wins that thought seems sillier and sillier. While we are here, how likely is it that someone will beat Ken Jennings? In an article before all of this Ben Morrison in Nate Silvers Blog wrote that it was quite likely SOMEONE would break Ken J's record,  see <a href="https://fivethirtyeight.com/features/ken-jennings-has-nothing-on-joe-dimaggio/">here</a>.<br/>
<br/>
7) OKAY, how does James H compare to Ken J? According to Oliver Roeder in Nate Silvers Blog,<br/>
<a href="https://fivethirtyeight.com/features/the-battle-for-jeopardy-supremacy/">here</a>, they are similar in terms of percent of questions answered right, but James H bets so much more (bets better?) which is why he is getting so much money. I'll be curious to see a head-to-head contest at some point. But to the issue at hand, they don't give James H that good a chance to break Ken J's record.<br/>
<br/>
8) Jeop used to have a  5-game limit. Maybe that was a good idea- its not that interesting seeing the same person with the same strategy win 22 in a row. Also, the short-talk-with-Alex T-- James is running out of interesting things to say. I wonder what Alex did with Ken J after 50 games.<br/>
``So Ken, I hear you're good at Jeopardy''<br/>
<br/>
9) Misc: Ken J was the inspiration for IBM to do Watson.<br/>
<br/>
10) Will future players use James Strategy? Note that you have to be REALLY GOOD in the first place for it to help you. Maybe a modified version where you go for the lucrative questions and bet a lot on Daily Doubles (more than people have done in the past) when its an area you know really well (I'll take Ramsey Theory for $2000.)<br/>
<br/>
11) I used to DVR and watch Jeop but didn't mind if I was a few behind. Now I have to stay on top of it so articles like those pointed to above don't give me a spoiler.<br/>
<br/>
12) My prediction: He will beat Ken Jenning for money but not for number-of-games. I have no real confidence in these predictions.</div>
    </content>
    <updated>2019-05-07T00:41:00Z</updated>
    <published>2019-05-07T00:41:00Z</published>
    <author>
      <name>GASARCH</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/03615736448441925334</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-3722233</id>
      <category term="typecast"/>
      <category term="focs metacomments"/>
      <author>
        <name>Lance Fortnow</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/06752030912874378610</uri>
      </author>
      <link href="https://blog.computationalcomplexity.org/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="https://www.blogger.com/feeds/3722233/posts/default" rel="self" type="application/atom+xml"/>
      <link href="https://blog.computationalcomplexity.org/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <link href="https://www.blogger.com/feeds/3722233/posts/default?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml"/>
      <subtitle>Computational Complexity and other fun stuff in math and computer science from Lance Fortnow and Bill Gasarch</subtitle>
      <title>Computational Complexity</title>
      <updated>2019-05-08T16:36:29Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://gilkalai.wordpress.com/?p=17422</id>
    <link href="https://gilkalai.wordpress.com/2019/05/07/answer-to-tyi-37-arithmetic-progressions-in-3d-brownian-motion/" rel="alternate" type="text/html"/>
    <title>Answer to TYI 37: Arithmetic Progressions in 3D Brownian Motion</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Consider a Brownian motion in three dimensional space. We asked (TYI 37) What is the largest number of points on the path described by the motion which form an arithmetic progression? (Namely, , so that all are equal.) Here is … <a href="https://gilkalai.wordpress.com/2019/05/07/answer-to-tyi-37-arithmetic-progressions-in-3d-brownian-motion/">Continue reading <span class="meta-nav">→</span></a></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Consider a Brownian motion in three dimensional space. <a href="https://gilkalai.wordpress.com/2019/03/07/test-your-intuition-or-simply-guess-37-arithmetic-progressions-for-brownian-motion-in-space/">We asked (TYI 37)</a> What is the largest number of points on the path described by the motion which form an arithmetic progression? (Namely, <img alt="x_1,x_2, x_t" class="latex" src="https://s0.wp.com/latex.php?latex=x_1%2Cx_2%2C+x_t&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x_1,x_2, x_t"/>, so that all <img alt="x_{i+1}-x_i" class="latex" src="https://s0.wp.com/latex.php?latex=x_%7Bi%2B1%7D-x_i&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="x_{i+1}-x_i"/> are equal.)</p>
<p>Here is what you voted for</p>
<p><a href="https://gilkalai.files.wordpress.com/2019/05/poll-apb.png"><img alt="" class="alignnone size-full wp-image-17423" src="https://gilkalai.files.wordpress.com/2019/05/poll-apb.png?w=640"/></a></p>
<p><span style="color: #ff0000;"><strong>TYI37 poll: Final-results</strong></span></p>
<p>Analysis of the poll results:  Almost surely 2 is the winner with 30.14% of the 209 votes, and almost surely infinity (28.71%) comes close at second place. In the  third place is  almost surely 3 (14.83%),  and then comes positive probability for each integer (13.4%), almost surely 5 (5.26%),  almost surely 6 (2.87%), and  almost surely 4 (2.39%).</p>
<h2>Test your political intuition: which coalition is going to be formed?</h2>
<p>Almost surely 2 (briefly AS2) and almost surely infinity (ASI) can form a government  with no need for a larger coalition. But they represent two political extremes. Is AS3 politically closer to AS2 or to ASI? “k with probability p_k for every k&gt;2” (briefly, COM) represent a complicated political massage. Is it closer to AS2 or to ASI? (See the old posts on <a href="https://gilkalai.wordpress.com/2009/02/16/which-coalition/">which coalition</a> <a href="https://gilkalai.wordpress.com/2009/02/17/which-coalition-to-form-2/">will be formed</a>.)</p>
<p> </p>
<p><a href="https://gilkalai.files.wordpress.com/2019/05/poll-br.png"><img alt="" class="alignnone size-medium wp-image-17424" height="300" src="https://gilkalai.files.wordpress.com/2019/05/poll-br.png?w=131&amp;h=300" width="131"/></a> <a href="https://gilkalai.files.wordpress.com/2019/05/poll-brown.png"><img alt="" class="alignnone size-medium wp-image-17425" height="300" src="https://gilkalai.files.wordpress.com/2019/05/poll-brown.png?w=133&amp;h=300" width="133"/> </a><a href="https://gilkalai.files.wordpress.com/2019/05/poll189.png"><img alt="" class="alignnone size-medium wp-image-17427" height="300" src="https://gilkalai.files.wordpress.com/2019/05/poll189.png?w=127&amp;h=300" width="127"/></a></p>
<p><span style="color: #ff0000;"><strong>TYI37 poll: Partial results. It was exciting to see how the standing of the answers changed in the process of counting the votes.</strong></span></p>
<p>And the correct answer is: <span id="more-17422"/></p>
<h2><strong>5 (FIVE)</strong></h2>
<p>See the paper:</p>
<p class="title mathjax">Itai Benjamini and Gady Kozma: <a href="https://arxiv.org/abs/1810.10077">Arithmetic progressions in the trace of Brownian motion in space</a></p>
<p> </p></div>
    </content>
    <updated>2019-05-06T21:38:48Z</updated>
    <published>2019-05-06T21:38:48Z</published>
    <category term="Combinatorics"/>
    <category term="Open discussion"/>
    <category term="Probability"/>
    <category term="Brownian motion"/>
    <category term="Gady Kozma"/>
    <category term="Itai Benjamini"/>
    <author>
      <name>Gil Kalai</name>
    </author>
    <source>
      <id>https://gilkalai.wordpress.com</id>
      <logo>https://s0.wp.com/i/buttonw-com.png</logo>
      <link href="https://gilkalai.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="https://gilkalai.wordpress.com" rel="alternate" type="text/html"/>
      <link href="https://gilkalai.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="https://gilkalai.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Gil Kalai's blog</subtitle>
      <title>Combinatorics and more</title>
      <updated>2019-05-08T23:56:53Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://lucatrevisan.wordpress.com/?p=4240</id>
    <link href="https://lucatrevisan.wordpress.com/2019/05/06/online-optimization-post-3-follow-the-regularized-leader/" rel="alternate" type="text/html"/>
    <title>Online Optimization Post 3: Follow the Regularized Leader</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">The multiplicative weights algorithm is simple to define and analyze, and it has several applications, but both its definition and its analysis seem to come out of nowhere. We mentioned that all the quantities arising in the algorithm and its … <a href="https://lucatrevisan.wordpress.com/2019/05/06/online-optimization-post-3-follow-the-regularized-leader/">Continue reading <span class="meta-nav">→</span></a></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>
 The multiplicative weights algorithm is simple to define and analyze, and it has several applications, but both its definition and its analysis seem to come out of nowhere. We mentioned that all the quantities arising in the algorithm and its analysis have statistical physics interpretations, but even this observation brings up more questions than it answers. The Gibbs distribution, for example, does put more weight on lower-energy states, and so it makes sense in an optimization setting, but to get good approximations one wants to use lower temperatures, while the distributions used by the multiplicative weights algorithms have temperature <img alt="{1/\epsilon}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B1%2F%5Cepsilon%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{1/\epsilon}"/>, where <img alt="{2\epsilon}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B2%5Cepsilon%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{2\epsilon}"/> is the final “amortized” regret bound, so that one uses, quite counterintuitively, higher temperatures for better approximations. </p>
<p>
Furthermore, it is not clear how we would generalize the ideas of multiplicative weights to the case in which the set of feasible solutions <img alt="{K}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BK%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{K}"/> is anything other than the set of distributions.</p>
<p>
Today we discuss the <em>“Follow the Regularized Leader”</em> method, which provides a framework to design and analyze online algorithms in a versatile and well-motivated way. We will then see how we can “discover” the definition and analysis of multiplicative weights, and how to “discover” another online algorithm which can be seen as a generalization of projected gradient descent (that is, one can derive the projected gradient descent algorithm and its analysis from this other online algorithm).</p>
<p>
<span id="more-4240"/></p>
<p>
</p><p><b>1. Follow The Regularized Leader </b></p>
<p/><p>
We will first state some results in full generality, making no assumptions on the set <img alt="{K}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BK%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{K}"/> of feasible solutions or on the set of loss functions <img alt="{f_t : K \rightarrow {\mathbb R}}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bf_t+%3A+K+%5Crightarrow+%7B%5Cmathbb+R%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{f_t : K \rightarrow {\mathbb R}}"/> encountered by the algorithm at each step.</p>
<p>
Let us try to define an online optimization algorithm from scratch. The solution <img alt="{x_t}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx_t%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x_t}"/> proposed by the algorithm at time <img alt="{t}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bt%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{t}"/> can only depend on the previous cost functions <img alt="{f_1,\ldots,f_{t-1}}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bf_1%2C%5Cldots%2Cf_%7Bt-1%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{f_1,\ldots,f_{t-1}}"/>; how should it depend on it? If the offline optimal solution <img alt="{x}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x}"/> is consistently better than all others at each time step, then we would like <img alt="{x_t}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx_t%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x_t}"/> to be that solution, so we want <img alt="{x_t}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx_t%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x_t}"/> to be a solution that would have worked well in the previous steps. The most extreme way of implementing this idea is the <em>Follow the Leader</em> algorithm (abbreviated FTL), in which we set the solution at time <img alt="{t}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bt%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{t}"/></p>
<p/><p align="center"><img alt="\displaystyle  x_t := \arg\min_{x\in K} \sum_{k=1}^{t-1} f_k(x) " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++x_t+%3A%3D+%5Carg%5Cmin_%7Bx%5Cin+K%7D+%5Csum_%7Bk%3D1%7D%5E%7Bt-1%7D+f_k%28x%29+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  x_t := \arg\min_{x\in K} \sum_{k=1}^{t-1} f_k(x) "/></p>
<p> to be the best solution for the previous steps. (Note that the algorithm does not prescribe what solution to use at step <img alt="{t=1}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bt%3D1%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{t=1}"/>.)</p>
<p>
It is possible for FTL to perform very badly. Consider for example the “experts” setting in which we analyzed multiplicative weights: the set of feasible solutions <img alt="{K}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BK%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{K}"/> is the set <img alt="{\Delta}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5CDelta%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\Delta}"/> of probability distributions over <img alt="{\{1,\ldots,n\}}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5C%7B1%2C%5Cldots%2Cn%5C%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\{1,\ldots,n\}}"/>, and the cost functions are linear <img alt="{f_t(x) = \sum_i \ell_t(i) x(i)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bf_t%28x%29+%3D+%5Csum_i+%5Cell_t%28i%29+x%28i%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{f_t(x) = \sum_i \ell_t(i) x(i)}"/> with coefficients <img alt="{0\leq \ell_t(i) \leq 1}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B0%5Cleq+%5Cell_t%28i%29+%5Cleq+1%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{0\leq \ell_t(i) \leq 1}"/>. Suppose that <img alt="{n=2}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bn%3D2%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{n=2}"/> and that <img alt="{x_1 = (0.5,.0.5)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx_1+%3D+%280.5%2C.0.5%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x_1 = (0.5,.0.5)}"/>. Then a possible run of the algorithm could be: </p>
<ol>
<li> <img alt="{x_1 = (.5,.5)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx_1+%3D+%28.5%2C.5%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x_1 = (.5,.5)}"/>, <img alt="{\ell_1 = (0,.5)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cell_1+%3D+%280%2C.5%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\ell_1 = (0,.5)}"/>
</li><li> <img alt="{x_2 = (1,0)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx_2+%3D+%281%2C0%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x_2 = (1,0)}"/>, <img alt="{\ell_2 = (1,0)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cell_2+%3D+%281%2C0%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\ell_2 = (1,0)}"/>
</li><li> <img alt="{x_3 = (0,1)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx_3+%3D+%280%2C1%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x_3 = (0,1)}"/>, <img alt="{\ell_3 = (0,1)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cell_3+%3D+%280%2C1%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\ell_3 = (0,1)}"/>
</li><li> <img alt="{x_4 = (1,0)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx_4+%3D+%281%2C0%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x_4 = (1,0)}"/>, <img alt="{\ell_4 = (1,0)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cell_4+%3D+%281%2C0%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\ell_4 = (1,0)}"/>
</li><li> <img alt="{x_5 = (0,1)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx_5+%3D+%280%2C1%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x_5 = (0,1)}"/>, <img alt="{\ell_5 = (0,1)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cell_5+%3D+%280%2C1%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\ell_5 = (0,1)}"/>
</li></ol>
<p align="center"><img alt="\displaystyle \vdots" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle+%5Cvdots&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle \vdots"/></p>
<p>
In which, after <img alt="{T}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BT%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{T}"/> steps, the algorithm suffers a loss of <img alt="{T- O(1)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BT-+O%281%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{T- O(1)}"/> while the offline optimum is <img alt="{T/2 + O(1)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BT%2F2+%2B+O%281%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{T/2 + O(1)}"/>. Thus, the regret is about <img alt="{T/2}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BT%2F2%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{T/2}"/>, which compares very unfavorably to the <img alt="{O(\sqrt T)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BO%28%5Csqrt+T%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{O(\sqrt T)}"/> regret of the multiplicative weight algorithm. For general <img alt="{n}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bn%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{n}"/>, a similar example shows that the regret of FTL can be as high as about <img alt="{T\cdot \left( 1- \frac 1n \right)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BT%5Ccdot+%5Cleft%28+1-+%5Cfrac+1n+%5Cright%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{T\cdot \left( 1- \frac 1n \right)}"/>.</p>
<p>
In the above bad example, the algorithm keeps “overfitting” to the past history: if an expert is a bit better than the others, the algorithm puts all its probability mass on that expert, and the algorithm keeps changing its mind at every step. Interestingly, this is the only failure mode of the algorithm.</p>
<blockquote><p><b>Theorem 1 (Analysis of FTL)</b> <em> For any sequence of cost functions <img alt="{f_1,\ldots,f_t}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bf_1%2C%5Cldots%2Cf_t%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{f_1,\ldots,f_t}"/> and any number of time steps <img alt="{T}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BT%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{T}"/>, the FTL algorithm satisfies the regret bound </em></p><em>
<p align="center"><img alt="\displaystyle  {\rm Regret}_T \leq \sum_{t=1}^T f_t(x_t ) - f_t(x_{t+1} ) " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++%7B%5Crm+Regret%7D_T+%5Cleq+%5Csum_%7Bt%3D1%7D%5ET+f_t%28x_t+%29+-+f_t%28x_%7Bt%2B1%7D+%29+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  {\rm Regret}_T \leq \sum_{t=1}^T f_t(x_t ) - f_t(x_{t+1} ) "/></p>
</em><p><em> </em></p></blockquote>
<p> So that if the functions <img alt="{f_t(\cdot)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bf_t%28%5Ccdot%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{f_t(\cdot)}"/> are Lipschitz with respect to a distance function on <img alt="{K}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BK%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{K}"/>, then the only way for the regret to be large is for <img alt="{x_t}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx_t%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x_t}"/> to typically be far, in that distance, from <img alt="{x_{t+1}}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx_%7Bt%2B1%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x_{t+1}}"/>.</p>
<p>
<em>Proof:</em>  Recalling the definition of regret, </p>
<p align="center"><img alt="\displaystyle  {\rm Regret}_T := \sum_{t=1}^T f_t(x_t) - \min_{x\in K} \sum_{t=1}^T f_t(x) \ , " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++%7B%5Crm+Regret%7D_T+%3A%3D+%5Csum_%7Bt%3D1%7D%5ET+f_t%28x_t%29+-+%5Cmin_%7Bx%5Cin+K%7D+%5Csum_%7Bt%3D1%7D%5ET+f_t%28x%29+%5C+%2C+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  {\rm Regret}_T := \sum_{t=1}^T f_t(x_t) - \min_{x\in K} \sum_{t=1}^T f_t(x) \ , "/></p>
<p> the theorem is equivalent to <a name="ftl.analysis"/></p><a name="ftl.analysis">
<p align="center"><img alt="\displaystyle   \sum_{t=1}^T f_t (x_{t+1}) \leq \min_{x\in K} \sum_{t=1}^T f_t(x) \ \ \ \ \ (1)" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle+++%5Csum_%7Bt%3D1%7D%5ET+f_t+%28x_%7Bt%2B1%7D%29+%5Cleq+%5Cmin_%7Bx%5Cin+K%7D+%5Csum_%7Bt%3D1%7D%5ET+f_t%28x%29+%5C+%5C+%5C+%5C+%5C+%281%29&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle   \sum_{t=1}^T f_t (x_{t+1}) \leq \min_{x\in K} \sum_{t=1}^T f_t(x) \ \ \ \ \ (1)"/></p>
</a><p><a name="ftl.analysis"/> We will prove <a href="https://lucatrevisan.wordpress.com/feed/#ftl.analysis">(1)</a> by induction. The base case <img alt="{T=1}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BT%3D1%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{T=1}"/> is just the definition of <img alt="{x_2}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx_2%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x_2}"/>. Assuming that $latex {<a href="https://lucatrevisan.wordpress.com/feed/#ftl.analysis">(1)</a>}&amp;fg=000000$ is true up to <img alt="{T}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BT%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{T}"/> we have </p>
<p align="center"><img alt="\displaystyle  \sum_{t=1}^{T+1} f_t (x_{t+1}) = \left( \sum_{t=1}^{T} f_t (x_{t+1}) \right) + f_{T+1} (x_{T+2}) \leq \sum_{t=1}^{T+1} f_t (x_{T+2}) = \min_{x\in K} \sum_{t=1}^{T+1} f_t(x) " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++%5Csum_%7Bt%3D1%7D%5E%7BT%2B1%7D+f_t+%28x_%7Bt%2B1%7D%29+%3D+%5Cleft%28+%5Csum_%7Bt%3D1%7D%5E%7BT%7D+f_t+%28x_%7Bt%2B1%7D%29+%5Cright%29+%2B+f_%7BT%2B1%7D+%28x_%7BT%2B2%7D%29+%5Cleq+%5Csum_%7Bt%3D1%7D%5E%7BT%2B1%7D+f_t+%28x_%7BT%2B2%7D%29+%3D+%5Cmin_%7Bx%5Cin+K%7D+%5Csum_%7Bt%3D1%7D%5E%7BT%2B1%7D+f_t%28x%29+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  \sum_{t=1}^{T+1} f_t (x_{t+1}) = \left( \sum_{t=1}^{T} f_t (x_{t+1}) \right) + f_{T+1} (x_{T+2}) \leq \sum_{t=1}^{T+1} f_t (x_{T+2}) = \min_{x\in K} \sum_{t=1}^{T+1} f_t(x) "/></p>
<p> where the middle step follows from the use of the inductive assumption, which gives </p>
<p align="center"><img alt="\displaystyle  \sum_{t=1}^{T} f_t (x_{t+1}) \leq \min_{x\in K} \sum_{t=1}^T f_t (x) \leq \sum_{t=1}^T f_t (x_{T+2}) " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++%5Csum_%7Bt%3D1%7D%5E%7BT%7D+f_t+%28x_%7Bt%2B1%7D%29+%5Cleq+%5Cmin_%7Bx%5Cin+K%7D+%5Csum_%7Bt%3D1%7D%5ET+f_t+%28x%29+%5Cleq+%5Csum_%7Bt%3D1%7D%5ET+f_t+%28x_%7BT%2B2%7D%29+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  \sum_{t=1}^{T} f_t (x_{t+1}) \leq \min_{x\in K} \sum_{t=1}^T f_t (x) \leq \sum_{t=1}^T f_t (x_{T+2}) "/></p>
<p> <img alt="\Box" class="latex" src="https://s0.wp.com/latex.php?latex=%5CBox&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\Box"/></p>
<p>
The above example and analysis suggest that we should modify FTL in such a way that the choices of the algorithm don’t change too much from step to step, and that the solution <img alt="{x_t}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx_t%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x_t}"/> at time <img alt="{t}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bt%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{t}"/> should be a compromise between optimizing with respect to previous cost functions and not changing too much from step to step.</p>
<p>
In order to do this, we introduce a new function <img alt="{R(\cdot)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BR%28%5Ccdot%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{R(\cdot)}"/>, called a <em>regularizer</em> (more on it later), and, at each step, we compute the solution</p>
<p/><p align="center"><img alt="\displaystyle  x_t := \arg\min_{x\in K} \ R(x) + \sum_{k=1}^{t-1} f_k(x) " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++x_t+%3A%3D+%5Carg%5Cmin_%7Bx%5Cin+K%7D+%5C+R%28x%29+%2B+%5Csum_%7Bk%3D1%7D%5E%7Bt-1%7D+f_k%28x%29+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  x_t := \arg\min_{x\in K} \ R(x) + \sum_{k=1}^{t-1} f_k(x) "/></p>
<p> This algorithm is called <em>Follow the Regularized Leader</em> or FTRL. Typically, the function <img alt="{R(\cdot)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BR%28%5Ccdot%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{R(\cdot)}"/> is chosen to be strictly convex and to take values that are rather big in magnitude. Then <img alt="{x_1}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx_1%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x_1}"/> will be the unique minimum of <img alt="{R(\cdot)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BR%28%5Ccdot%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{R(\cdot)}"/> and, at each subsequent step, <img alt="{x_t}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx_t%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x_t}"/> will be selected in a way to balance the pull toward the minimum of <img alt="{R(\cdot)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BR%28%5Ccdot%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{R(\cdot)}"/> and the pull toward the FTL solution <img alt="{\arg\min_{x\in K} \sum_k f_k(x)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Carg%5Cmin_%7Bx%5Cin+K%7D+%5Csum_k+f_k%28x%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\arg\min_{x\in K} \sum_k f_k(x)}"/>. In particular, if <img alt="{R(\cdot)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BR%28%5Ccdot%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{R(\cdot)}"/> is large in magnitude compared to each <img alt="{f_t(\cdot)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bf_t%28%5Ccdot%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{f_t(\cdot)}"/>, the solution will not change too much from step to step.</p>
<p>
We have the following analysis that makes no assumptions on <img alt="{K}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BK%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{K}"/>, on the cost functions <img alt="{f_t(\cdot)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bf_t%28%5Ccdot%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{f_t(\cdot)}"/> and on the regularizer (not even that the regularizer is convex).</p>
<blockquote><p><b>Theorem 2 (Analysis of FTRL)</b> <em> For every sequence of cost functions and every regularizer function, the regret after <img alt="{T}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BT%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{T}"/> steps of the FTRL algorithm is bounded as follows: for every <img alt="{x}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x}"/>, </em></p><em>
<p align="center"><img alt="\displaystyle  {\rm Regret}_T(x) \leq \left( \sum_{t=1}^T f_t(x_{t}) - f_t (x_{t+1}) \right) + R(x) - R(x_1)" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++%7B%5Crm+Regret%7D_T%28x%29+%5Cleq+%5Cleft%28+%5Csum_%7Bt%3D1%7D%5ET+f_t%28x_%7Bt%7D%29+-+f_t+%28x_%7Bt%2B1%7D%29+%5Cright%29+%2B+R%28x%29+-+R%28x_1%29&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  {\rm Regret}_T(x) \leq \left( \sum_{t=1}^T f_t(x_{t}) - f_t (x_{t+1}) \right) + R(x) - R(x_1)"/></p>
<p> where </p>
<p align="center"><img alt="\displaystyle  {\rm Regret}_T (x) := \sum_{t=1}^T f_t (x_t) - f_t (x) " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++%7B%5Crm+Regret%7D_T+%28x%29+%3A%3D+%5Csum_%7Bt%3D1%7D%5ET+f_t+%28x_t%29+-+f_t+%28x%29+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  {\rm Regret}_T (x) := \sum_{t=1}^T f_t (x_t) - f_t (x) "/></p>
</em><p><em> </em></p></blockquote>
<p/><p>
<em>Proof:</em>  Let us run for <img alt="{T}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BT%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{T}"/> steps the FTRL algorithm with regularizer <img alt="{R(\cdot)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BR%28%5Ccdot%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{R(\cdot)}"/> and cost functions <img alt="{f_1,\ldots,f_T}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bf_1%2C%5Cldots%2Cf_T%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{f_1,\ldots,f_T}"/>, and call <img alt="{x_1,\ldots,x_T}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx_1%2C%5Cldots%2Cx_T%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x_1,\ldots,x_T}"/> the solutions computed by the FTL algorithm. </p>
<p>
Now consider the following mental experiment: we run the FTL algorithm for <img alt="{T+1}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BT%2B1%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{T+1}"/> steps, with the sequence of cost functions <img alt="{R,f_1,\ldots,f_t}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BR%2Cf_1%2C%5Cldots%2Cf_t%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{R,f_1,\ldots,f_t}"/>, and we use <img alt="{x_1}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx_1%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x_1}"/> as a first solution. Then we see that the solutions computed by the FTL algorithm will be precisely <img alt="{x_1,x_1,x_2,\ldots,x_T}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx_1%2Cx_1%2Cx_2%2C%5Cldots%2Cx_T%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x_1,x_1,x_2,\ldots,x_T}"/>. The regret bound for FTL implies that, for every <img alt="{x}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x}"/>,</p>
<p/><p align="center"><img alt="\displaystyle  R(x_1) - R(x) + \sum_{t=1}^T f_t(x_t) - f_t(x) \leq R(x_1) - R(x_1) + \sum_{t=1}^T f_t(x_t) - f_{t} (x_{t+1}) " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++R%28x_1%29+-+R%28x%29+%2B+%5Csum_%7Bt%3D1%7D%5ET+f_t%28x_t%29+-+f_t%28x%29+%5Cleq+R%28x_1%29+-+R%28x_1%29+%2B+%5Csum_%7Bt%3D1%7D%5ET+f_t%28x_t%29+-+f_%7Bt%7D+%28x_%7Bt%2B1%7D%29+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  R(x_1) - R(x) + \sum_{t=1}^T f_t(x_t) - f_t(x) \leq R(x_1) - R(x_1) + \sum_{t=1}^T f_t(x_t) - f_{t} (x_{t+1}) "/></p>
<p> <img alt="\Box" class="latex" src="https://s0.wp.com/latex.php?latex=%5CBox&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\Box"/></p>
<p>
Having established these results, the general recipe to solve an online optimization problem will be to find a regularizer function <img alt="{R}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BR%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{R}"/> such that the minimum of <img alt="{R}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BR%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{R}"/> “pulls away from” solutions that would make the FTL algorithm overfit, and such that there is a good balance between how big <img alt="{R}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BR%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{R}"/> gets over <img alt="{K}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BK%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{K}"/> (because we pay <img alt="{R(x^*) - R(x_1)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BR%28x%5E%2A%29+-+R%28x_1%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{R(x^*) - R(x_1)}"/> in the regret, where <img alt="{x^*}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx%5E%2A%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x^*}"/> is the offline optimum) and how stable is the minimum of <img alt="{R(x) + \sum_{k=1}^{t-1} f_k(x)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BR%28x%29+%2B+%5Csum_%7Bk%3D1%7D%5E%7Bt-1%7D+f_k%28x%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{R(x) + \sum_{k=1}^{t-1} f_k(x)}"/> as <img alt="{t}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bt%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{t}"/> varies.</p>
<p>
</p><p><b>2. Negative-Entropy Regularization </b></p>
<p/><p>
Let us consider again the “experts” setting, that is, the online optimization setup in which <img alt="{K}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BK%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{K}"/> is the set of probability distributions over <img alt="{\{ 1,\ldots, n\}}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5C%7B+1%2C%5Cldots%2C+n%5C%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\{ 1,\ldots, n\}}"/> and the cost functions are linear <img alt="{f_t (x) = \sum_i \ell_t (i) x(i)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bf_t+%28x%29+%3D+%5Csum_i+%5Cell_t+%28i%29+x%28i%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{f_t (x) = \sum_i \ell_t (i) x(i)}"/> with bounded coefficients.</p>
<p>
The example we showed above showed that FTL will tend to put all the probability mass on one expert. We would like to choose a regularizer that fights this tendency by penalizing “concentrated” distributions and favoring “spread-out” distributions. This observation might trigger the thought that the <em>entropy</em> of a distribution is a good measure of how concentrated or spread out it is, although the entropy is actually higher for spread-out distribution and smaller for concentrated ones. So we will use as a regularizer <em>minus the entropy</em>, multiplied by an appropriate scaling factor: </p>
<p align="center"><img alt="\displaystyle  R(x) := c \cdot \sum_{i=1}^n x_i \ln x_i " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++R%28x%29+%3A%3D+c+%5Ccdot+%5Csum_%7Bi%3D1%7D%5En+x_i+%5Cln+x_i+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  R(x) := c \cdot \sum_{i=1}^n x_i \ln x_i "/></p>
<p> (Entropy is usually defined using logarithms in base 2, but using natural logarithms will make it cleaner to take derivatives, and it only affects the constant factor <img alt="{c}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bc%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{c}"/>.) With this choice of regularizer, we have</p>
<p/><p align="center"><img alt="\displaystyle  x_t = \arg\min_{x\in \Delta} \ \ \left( \sum_{k=1}^{t-1} \langle \ell_k , x_k \rangle \right ) + c \cdot \sum_{i=1}^n x_i \ln x_i " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++x_t+%3D+%5Carg%5Cmin_%7Bx%5Cin+%5CDelta%7D+%5C+%5C+%5Cleft%28+%5Csum_%7Bk%3D1%7D%5E%7Bt-1%7D+%5Clangle+%5Cell_k+%2C+x_k+%5Crangle+%5Cright+%29+%2B+c+%5Ccdot+%5Csum_%7Bi%3D1%7D%5En+x_i+%5Cln+x_i+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  x_t = \arg\min_{x\in \Delta} \ \ \left( \sum_{k=1}^{t-1} \langle \ell_k , x_k \rangle \right ) + c \cdot \sum_{i=1}^n x_i \ln x_i "/></p>
<p> To compute the minimum of the above function we will use the method of Lagrange multipliers. Specialized to our setting, the method of Lagrange multiplier states that if we want to solve the constrained minimization problem </p>
<p align="center"><img alt="\displaystyle  \min_{x : \ a^Tx = b } \ \ f(x ) " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++%5Cmin_%7Bx+%3A+%5C+a%5ETx+%3D+b+%7D+%5C+%5C+f%28x+%29+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  \min_{x : \ a^Tx = b } \ \ f(x ) "/></p>
<p> we introduce a new parameter <img alt="{\lambda}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Clambda%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\lambda}"/> and define the function </p>
<p align="center"><img alt="\displaystyle  f_\lambda (x) := f(x) + \lambda \cdot (a^T x - b ) " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++f_%5Clambda+%28x%29+%3A%3D+f%28x%29+%2B+%5Clambda+%5Ccdot+%28a%5ET+x+-+b+%29+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  f_\lambda (x) := f(x) + \lambda \cdot (a^T x - b ) "/></p>
<p> Then it is possible to prove that if <img alt="{x^*}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx%5E%2A%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x^*}"/> is a feasible minimizer of <img alt="{f(\cdot)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bf%28%5Ccdot%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{f(\cdot)}"/>, then there is at least a value of <img alt="{\lambda}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Clambda%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\lambda}"/> such that <img alt="{\nabla f_\lambda (x^*) = 0}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cnabla+f_%5Clambda+%28x%5E%2A%29+%3D+0%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\nabla f_\lambda (x^*) = 0}"/>, that is, such that <img alt="{x^*}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx%5E%2A%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x^*}"/> is a stable point of <img alt="{f_\lambda}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bf_%5Clambda%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{f_\lambda}"/>. So one can proceed by finding all <img alt="{x,\lambda}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx%2C%5Clambda%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x,\lambda}"/> such that <img alt="{\nabla f_\lambda (x) = 0}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cnabla+f_%5Clambda+%28x%29+%3D+0%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\nabla f_\lambda (x) = 0}"/> and then filtering out the values of <img alt="{x}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x}"/> such that <img alt="{a^T x \neq b}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Ba%5ET+x+%5Cneq+b%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{a^T x \neq b}"/>, and finally looking at which of the remaining <img alt="{x}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x}"/> minimizes <img alt="{f(\cdot)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bf%28%5Ccdot%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{f(\cdot)}"/>.</p>
<p>
Ignoring for a moment the non-negativity constraints, the constraint <img alt="{x\in \Delta}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx%5Cin+%5CDelta%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x\in \Delta}"/> reduces to <img alt="{\sum_i x_i = 1}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Csum_i+x_i+%3D+1%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\sum_i x_i = 1}"/>, so we have to consider the function </p>
<p align="center"><img alt="\displaystyle  \left( \sum_{k=1}^{t-1} \langle \ell_k , x_k \rangle \right ) + c \cdot \left( \sum_{i=1}^n x_i \ln x_i \right) + \lambda \cdot \left( \langle x, {\bf 1} \rangle - 1\right) " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++%5Cleft%28+%5Csum_%7Bk%3D1%7D%5E%7Bt-1%7D+%5Clangle+%5Cell_k+%2C+x_k+%5Crangle+%5Cright+%29+%2B+c+%5Ccdot+%5Cleft%28+%5Csum_%7Bi%3D1%7D%5En+x_i+%5Cln+x_i+%5Cright%29+%2B+%5Clambda+%5Ccdot+%5Cleft%28+%5Clangle+x%2C+%7B%5Cbf+1%7D+%5Crangle+-+1%5Cright%29+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  \left( \sum_{k=1}^{t-1} \langle \ell_k , x_k \rangle \right ) + c \cdot \left( \sum_{i=1}^n x_i \ln x_i \right) + \lambda \cdot \left( \langle x, {\bf 1} \rangle - 1\right) "/></p>
<p> The partial derivative of the above expression with respect to <img alt="{x_i}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx_i%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x_i}"/> is </p>
<p align="center"><img alt="\displaystyle  \left( \sum_{k=1}^{t-1} \ell_k (i) \right ) + c \cdot \left( 1 + \ln x_i \right) + \lambda " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++%5Cleft%28+%5Csum_%7Bk%3D1%7D%5E%7Bt-1%7D+%5Cell_k+%28i%29+%5Cright+%29+%2B+c+%5Ccdot+%5Cleft%28+1+%2B+%5Cln+x_i+%5Cright%29+%2B+%5Clambda+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  \left( \sum_{k=1}^{t-1} \ell_k (i) \right ) + c \cdot \left( 1 + \ln x_i \right) + \lambda "/></p>
<p> If we want the gradient to be zero then we want all the above expressions to be zero, which translates to </p>
<p align="center"><img alt="\displaystyle  x_i = {\rm exp} \left( -1 - \frac \lambda c - \frac 1c \sum_{k=1}^{t-1} \ell_k(i) \right) " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++x_i+%3D+%7B%5Crm+exp%7D+%5Cleft%28+-1+-+%5Cfrac+%5Clambda+c+-+%5Cfrac+1c+%5Csum_%7Bk%3D1%7D%5E%7Bt-1%7D+%5Cell_k%28i%29+%5Cright%29+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  x_i = {\rm exp} \left( -1 - \frac \lambda c - \frac 1c \sum_{k=1}^{t-1} \ell_k(i) \right) "/></p>
<p> There is only one value of <img alt="{\lambda}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Clambda%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\lambda}"/> that makes the above solution a probability distribution, and the corresponding solution is </p>
<p align="center"><img alt="\displaystyle  x_i = \frac {{\rm exp} \left( - \frac 1c \sum_{k=1}^{t-1} \ell_k(i) \right) } {\sum_j {\rm exp} \left( - \frac 1c \sum_{k=1}^{t-1} \ell_k(j) \right) } " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++x_i+%3D+%5Cfrac+%7B%7B%5Crm+exp%7D+%5Cleft%28+-+%5Cfrac+1c+%5Csum_%7Bk%3D1%7D%5E%7Bt-1%7D+%5Cell_k%28i%29+%5Cright%29+%7D+%7B%5Csum_j+%7B%5Crm+exp%7D+%5Cleft%28+-+%5Cfrac+1c+%5Csum_%7Bk%3D1%7D%5E%7Bt-1%7D+%5Cell_k%28j%29+%5Cright%29+%7D+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  x_i = \frac {{\rm exp} \left( - \frac 1c \sum_{k=1}^{t-1} \ell_k(i) \right) } {\sum_j {\rm exp} \left( - \frac 1c \sum_{k=1}^{t-1} \ell_k(j) \right) } "/></p>
<p> Notice that this is exactly the solution computed by the multiplicative weights algorithm, if we choose <img alt="{c = 1/\epsilon}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bc+%3D+1%2F%5Cepsilon%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{c = 1/\epsilon}"/>. So we have “rediscovered” the multiplicative weights algorithm and we have also “explained” what it does: at every step it balances the goals of finding a solution that is good for the past and that has large entropy.</p>
<p>
Now it remains to bound, at each time step, </p>
<p/><p align="center"><img alt="\displaystyle  f_t (x_t) - f_t (x_{t+1}) = \langle \ell_t , x_t - x_{t+1} \rangle " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++f_t+%28x_t%29+-+f_t+%28x_%7Bt%2B1%7D%29+%3D+%5Clangle+%5Cell_t+%2C+x_t+-+x_%7Bt%2B1%7D+%5Crangle+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  f_t (x_t) - f_t (x_{t+1}) = \langle \ell_t , x_t - x_{t+1} \rangle "/></p>
<p> For this, it is convenient to return to the notation that we used in describing the multiplicative weights algorithm, that is, it is convenient to work with the weights defined as </p>
<p align="center"><img alt="\displaystyle  w_1(i) = 1" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++w_1%28i%29+%3D+1&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  w_1(i) = 1"/></p>
<p align="center"><img alt="\displaystyle  w_{t+1} (i) = w_t (i) \cdot e^{ \ell_t (i) / c}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++w_%7Bt%2B1%7D+%28i%29+%3D+w_t+%28i%29+%5Ccdot+e%5E%7B+%5Cell_t+%28i%29+%2F+c%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  w_{t+1} (i) = w_t (i) \cdot e^{ \ell_t (i) / c}"/></p>
<p> so that, at each time step </p>
<p align="center"><img alt="\displaystyle  x_t(i) = \frac {w_t(i)}{\sum_j w_t (j) } " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++x_t%28i%29+%3D+%5Cfrac+%7Bw_t%28i%29%7D%7B%5Csum_j+w_t+%28j%29+%7D+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  x_t(i) = \frac {w_t(i)}{\sum_j w_t (j) } "/></p>
<p> We are assuming <img alt="{0 \leq \ell_t (i) \leq 1}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B0+%5Cleq+%5Cell_t+%28i%29+%5Cleq+1%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{0 \leq \ell_t (i) \leq 1}"/>, so the weights are non-increasing with time. Then </p>
<p align="center"><img alt="\displaystyle  x_{t+1} (i) = \frac {w_{t+1} (i) }{\sum_j w_{t+1} (j) } = \frac {w_{t} (i) e^{-\ell_t (i) /c }}{\sum_j w_{t+1} (j) } \geq \frac {w_{t} (i) e^{-\ell_t (i) /c }}{\sum_j w_{t} (j) } \geq x_t(i) \cdot e^{-1/c} " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++x_%7Bt%2B1%7D+%28i%29+%3D+%5Cfrac+%7Bw_%7Bt%2B1%7D+%28i%29+%7D%7B%5Csum_j+w_%7Bt%2B1%7D+%28j%29+%7D+%3D+%5Cfrac+%7Bw_%7Bt%7D+%28i%29+e%5E%7B-%5Cell_t+%28i%29+%2Fc+%7D%7D%7B%5Csum_j+w_%7Bt%2B1%7D+%28j%29+%7D+%5Cgeq+%5Cfrac+%7Bw_%7Bt%7D+%28i%29+e%5E%7B-%5Cell_t+%28i%29+%2Fc+%7D%7D%7B%5Csum_j+w_%7Bt%7D+%28j%29+%7D+%5Cgeq+x_t%28i%29+%5Ccdot+e%5E%7B-1%2Fc%7D+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  x_{t+1} (i) = \frac {w_{t+1} (i) }{\sum_j w_{t+1} (j) } = \frac {w_{t} (i) e^{-\ell_t (i) /c }}{\sum_j w_{t+1} (j) } \geq \frac {w_{t} (i) e^{-\ell_t (i) /c }}{\sum_j w_{t} (j) } \geq x_t(i) \cdot e^{-1/c} "/></p>
<p> For every <img alt="{c \geq 1}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bc+%5Cgeq+1%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{c \geq 1}"/> we have <img alt="{e^{-1/c} \geq 1 - 1/c}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Be%5E%7B-1%2Fc%7D+%5Cgeq+1+-+1%2Fc%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{e^{-1/c} \geq 1 - 1/c}"/>, so </p>
<p align="center"><img alt="\displaystyle  x_{t}(i) - x_{t+1}(i) \leq \frac 1c x_t (i) " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++x_%7Bt%7D%28i%29+-+x_%7Bt%2B1%7D%28i%29+%5Cleq+%5Cfrac+1c+x_t+%28i%29+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  x_{t}(i) - x_{t+1}(i) \leq \frac 1c x_t (i) "/></p>
<p> and </p>
<p align="center"><img alt="\displaystyle  \langle \ell_t , x_t - x_{t+1} \rangle \leq \sum_i \ell_t(i) \cdot \frac 1c x_t(i) \leq \frac 1c " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++%5Clangle+%5Cell_t+%2C+x_t+-+x_%7Bt%2B1%7D+%5Crangle+%5Cleq+%5Csum_i+%5Cell_t%28i%29+%5Ccdot+%5Cfrac+1c+x_t%28i%29+%5Cleq+%5Cfrac+1c+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  \langle \ell_t , x_t - x_{t+1} \rangle \leq \sum_i \ell_t(i) \cdot \frac 1c x_t(i) \leq \frac 1c "/></p>
<p> Putting it all together, we have </p>
<p align="center"><img alt="\displaystyle  {\rm Regret}_T \leq \frac Tc + c \ln n " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++%7B%5Crm+Regret%7D_T+%5Cleq+%5Cfrac+Tc+%2B+c+%5Cln+n+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  {\rm Regret}_T \leq \frac Tc + c \ln n "/></p>
<p> Choosing <img alt="{c = \sqrt{\frac T {\ln n}}}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bc+%3D+%5Csqrt%7B%5Cfrac+T+%7B%5Cln+n%7D%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{c = \sqrt{\frac T {\ln n}}}"/>, we have </p>
<p align="center"><img alt="\displaystyle  {\rm Regret}_T \leq 2 \sqrt{T \ln n} " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++%7B%5Crm+Regret%7D_T+%5Cleq+2+%5Csqrt%7BT+%5Cln+n%7D+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  {\rm Regret}_T \leq 2 \sqrt{T \ln n} "/></p>
<p> Thus, we have reconstructed the analysis of the multiplicative weights algorithm.</p>
<p>
Interestingly, the analysis that we derived today is not exactly identical to the one from the post on multiplicative weights. There, we derived the bound</p>
<p/><p align="center"><img alt="\displaystyle  {\rm Regret}_T \leq \epsilon \sum_{t=1}^T \sum_{i=1}^n \ell_t^2 (i) x_t (i) \ + \frac {\ln n}{\epsilon } " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++%7B%5Crm+Regret%7D_T+%5Cleq+%5Cepsilon+%5Csum_%7Bt%3D1%7D%5ET+%5Csum_%7Bi%3D1%7D%5En+%5Cell_t%5E2+%28i%29+x_t+%28i%29+%5C+%2B+%5Cfrac+%7B%5Cln+n%7D%7B%5Cepsilon+%7D+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  {\rm Regret}_T \leq \epsilon \sum_{t=1}^T \sum_{i=1}^n \ell_t^2 (i) x_t (i) \ + \frac {\ln n}{\epsilon } "/></p>
<p> while here, setting <img alt="{\epsilon = 1/c}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cepsilon+%3D+1%2Fc%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\epsilon = 1/c}"/>, we derived </p>
<p align="center"><img alt="\displaystyle  {\rm Regret}_T \leq \epsilon \sum_{t=1}^T \sum_{i=1}^n \ell_t (i) x_t(i) + \frac {\ln n}{\epsilon } - \frac 1 \epsilon H(x^*) " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++%7B%5Crm+Regret%7D_T+%5Cleq+%5Cepsilon+%5Csum_%7Bt%3D1%7D%5ET+%5Csum_%7Bi%3D1%7D%5En+%5Cell_t+%28i%29+x_t%28i%29+%2B+%5Cfrac+%7B%5Cln+n%7D%7B%5Cepsilon+%7D+-+%5Cfrac+1+%5Cepsilon+H%28x%5E%2A%29+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  {\rm Regret}_T \leq \epsilon \sum_{t=1}^T \sum_{i=1}^n \ell_t (i) x_t(i) + \frac {\ln n}{\epsilon } - \frac 1 \epsilon H(x^*) "/></p>
<p> where <img alt="{x^*}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx%5E%2A%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x^*}"/> is the offline optimum and <img alt="{H(x) = \sum_i x_i \ln \frac 1 {x_i}}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BH%28x%29+%3D+%5Csum_i+x_i+%5Cln+%5Cfrac+1+%7Bx_i%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{H(x) = \sum_i x_i \ln \frac 1 {x_i}}"/> is the entropy function (computed using natural logarithms). </p>
<p>
</p><p><b>3. L2 Regularization </b></p>
<p/><p>
Now that we have a general method, let us apply it to a new context: suppose that, as before, our cost functions are linear, but let <img alt="{K = {\mathbb R}^n}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BK+%3D+%7B%5Cmathbb+R%7D%5En%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{K = {\mathbb R}^n}"/>. With linear cost functions and no bound on the size of solutions, it will not be possible to talk about regret with respect to the offline optimum, because the offline optimum will always be <img alt="{-\infty}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B-%5Cinfty%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{-\infty}"/>, but it will be possible to talk about regret with respect to a particular offline solution <img alt="{x}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x}"/>, which will already lead to interesting consequences.</p>
<p>
What regularizer should we use? In reasoning about regularizers, it can be helpful to think about what would go wrong if we use FTL, and then considering what regularizer would successfully “pull away” from the bad solutions found by FTL. In this context of linear loss functions and unbounded solutions, FTL will pick an infinitely big solution at each step, or, to be more precise, the “max” in the definition of FTL is undefined. To fight this tendency of FTL to go off to infinity, it makes sense for the regularizer to be a measure of how big a solution is. Since we are going to have to compute derivatives, it is good to use a measure of “bigness” with a nice gradient, and <img alt="{||x ||^2}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%7C%7Cx+%7C%7C%5E2%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{||x ||^2}"/> is a natural choice. So, for a scale parameter <img alt="{c}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bc%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{c}"/> to be optimized later, our regularizer will be </p>
<p align="center"><img alt="\displaystyle  R(x) := c || x||^2 " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++R%28x%29+%3A%3D+c+%7C%7C+x%7C%7C%5E2+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  R(x) := c || x||^2 "/></p>
<p> This tells us that </p>
<p align="center"><img alt="\displaystyle  x_ 1 = {\bf 0} " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++x_+1+%3D+%7B%5Cbf+0%7D+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  x_ 1 = {\bf 0} "/></p>
<p> and </p>
<p align="center"><img alt="\displaystyle  x_{t+1} = \arg\min_{x \in {\mathbb R}^n} \ \ c ||x||^2 + \sum_{k=1}^t \langle \ell_k , x \rangle " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++x_%7Bt%2B1%7D+%3D+%5Carg%5Cmin_%7Bx+%5Cin+%7B%5Cmathbb+R%7D%5En%7D+%5C+%5C+c+%7C%7Cx%7C%7C%5E2+%2B+%5Csum_%7Bk%3D1%7D%5Et+%5Clangle+%5Cell_k+%2C+x+%5Crangle+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  x_{t+1} = \arg\min_{x \in {\mathbb R}^n} \ \ c ||x||^2 + \sum_{k=1}^t \langle \ell_k , x \rangle "/></p>
<p> The function that we are minimizing in the above expression is convex, so we just have to compute the gradient and set it to zero </p>
<p align="center"><img alt="\displaystyle  2c x + \sum_{k=1}^t \ell_k = 0 " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++2c+x+%2B+%5Csum_%7Bk%3D1%7D%5Et+%5Cell_k+%3D+0+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  2c x + \sum_{k=1}^t \ell_k = 0 "/></p>
<p align="center"><img alt="\displaystyle  x = - \frac 1 {2c} \sum_{k=1}^t \ell_k " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++x+%3D+-+%5Cfrac+1+%7B2c%7D+%5Csum_%7Bk%3D1%7D%5Et+%5Cell_k+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  x = - \frac 1 {2c} \sum_{k=1}^t \ell_k "/></p>
<p> Which can be also expressed as </p>
<p align="center"><img alt="\displaystyle  x_1 = {\bf 0}; \ \ \ x_{t+1} = x_t - \frac 1 {2c} \ell_t " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++x_1+%3D+%7B%5Cbf+0%7D%3B+%5C+%5C+%5C+x_%7Bt%2B1%7D+%3D+x_t+-+%5Cfrac+1+%7B2c%7D+%5Cell_t+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  x_1 = {\bf 0}; \ \ \ x_{t+1} = x_t - \frac 1 {2c} \ell_t "/></p>
<p> This makes perfect sense because, in the “experts” interpretation, we want to penalize the experts that performed badly in the past. Here we have no constraints on our allocations, so we simply decrease (additively this time, not multiplicatively) the allocation to the experts that caused a higher loss.</p>
<p>
To compute the regret bound, we have </p>
<p align="center"><img alt="\displaystyle  f_t(x_t) - f_{t} (x_{t+1}) = \langle \ell_t, x_t - x_{t+1} \rangle = \left\langle \ell_t , \frac 1 {2c} \ell_t \right\rangle = \frac 1 {2c} || \ell_t||^2 || " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++f_t%28x_t%29+-+f_%7Bt%7D+%28x_%7Bt%2B1%7D%29+%3D+%5Clangle+%5Cell_t%2C+x_t+-+x_%7Bt%2B1%7D+%5Crangle+%3D+%5Cleft%5Clangle+%5Cell_t+%2C+%5Cfrac+1+%7B2c%7D+%5Cell_t+%5Cright%5Crangle+%3D+%5Cfrac+1+%7B2c%7D+%7C%7C+%5Cell_t%7C%7C%5E2+%7C%7C+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  f_t(x_t) - f_{t} (x_{t+1}) = \langle \ell_t, x_t - x_{t+1} \rangle = \left\langle \ell_t , \frac 1 {2c} \ell_t \right\rangle = \frac 1 {2c} || \ell_t||^2 || "/></p>
<p> and so the regret with respect to a solution <img alt="{x}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x}"/> is </p>
<p align="center"><img alt="\displaystyle  {\rm Regret}_T(x) \leq R(x) - R(x_1) + \sum_{t=1}^T f_t(x_t) - f_{t} (x_{t+1} ) " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++%7B%5Crm+Regret%7D_T%28x%29+%5Cleq+R%28x%29+-+R%28x_1%29+%2B+%5Csum_%7Bt%3D1%7D%5ET+f_t%28x_t%29+-+f_%7Bt%7D+%28x_%7Bt%2B1%7D+%29+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  {\rm Regret}_T(x) \leq R(x) - R(x_1) + \sum_{t=1}^T f_t(x_t) - f_{t} (x_{t+1} ) "/></p>
<p align="center"><img alt="\displaystyle  = c || x||^2 + \frac 1 {2c} \sum_{t=1}^T || \ell_t||^2 " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++%3D+c+%7C%7C+x%7C%7C%5E2+%2B+%5Cfrac+1+%7B2c%7D+%5Csum_%7Bt%3D1%7D%5ET+%7C%7C+%5Cell_t%7C%7C%5E2+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  = c || x||^2 + \frac 1 {2c} \sum_{t=1}^T || \ell_t||^2 "/></p>
<p> If we know a bound </p>
<p align="center"><img alt="\displaystyle  \forall t: \ \ || \ell_t || \leq L " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++%5Cforall+t%3A+%5C+%5C+%7C%7C+%5Cell_t+%7C%7C+%5Cleq+L+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  \forall t: \ \ || \ell_t || \leq L "/></p>
<p align="center"><img alt="\displaystyle  || x|| \leq D " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++%7C%7C+x%7C%7C+%5Cleq+D+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  || x|| \leq D "/></p>
<p> then we can optimize <img alt="{c = \sqrt{\frac T {2D^2 L^2}}}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bc+%3D+%5Csqrt%7B%5Cfrac+T+%7B2D%5E2+L%5E2%7D%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{c = \sqrt{\frac T {2D^2 L^2}}}"/> and we have </p>
<p align="center"><img alt="\displaystyle  {\rm Regret}_T(x) \leq D L \sqrt{ 2 T} " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++%7B%5Crm+Regret%7D_T%28x%29+%5Cleq+D+L+%5Csqrt%7B+2+T%7D+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  {\rm Regret}_T(x) \leq D L \sqrt{ 2 T} "/></p>
<p>
</p><p><b>  3.1. Dealing with Constraints </b></p>
<p/><p>
Consider now the case in which the loss functions are linear and <img alt="{K}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BK%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{K}"/> is an arbitrary convex set. Using the same regularizer <img alt="{R(x) = c || x||^2}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BR%28x%29+%3D+c+%7C%7C+x%7C%7C%5E2%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{R(x) = c || x||^2}"/> we have the algorithm </p>
<p align="center"><img alt="\displaystyle  x_1 = \arg\min_{x\in K} c ||x ||^2 " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++x_1+%3D+%5Carg%5Cmin_%7Bx%5Cin+K%7D+c+%7C%7Cx+%7C%7C%5E2+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  x_1 = \arg\min_{x\in K} c ||x ||^2 "/></p>
<p align="center"><img alt="\displaystyle  x_{t+1} = \arg\min_{x\in K} \ \ c ||x ||^2 + \sum_{k=1}^{t} \langle \ell_t , x \rangle " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++x_%7Bt%2B1%7D+%3D+%5Carg%5Cmin_%7Bx%5Cin+K%7D+%5C+%5C+c+%7C%7Cx+%7C%7C%5E2+%2B+%5Csum_%7Bk%3D1%7D%5E%7Bt%7D+%5Clangle+%5Cell_t+%2C+x+%5Crangle+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  x_{t+1} = \arg\min_{x\in K} \ \ c ||x ||^2 + \sum_{k=1}^{t} \langle \ell_t , x \rangle "/></p>
<p> How can we solve the above constrained optimization problem? A very helpful observation is that we can first solve the unconstrained optimization and then project on <img alt="{K}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BK%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{K}"/>, that is we can proceed as follows: </p>
<p align="center"><img alt="\displaystyle  y_{t+1} = \arg\min_{y\in {\mathbb R}^n} \ \ c ||y ||^2 + \sum_{k=1}^{t} \langle \ell_t , y \rangle " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++y_%7Bt%2B1%7D+%3D+%5Carg%5Cmin_%7By%5Cin+%7B%5Cmathbb+R%7D%5En%7D+%5C+%5C+c+%7C%7Cy+%7C%7C%5E2+%2B+%5Csum_%7Bk%3D1%7D%5E%7Bt%7D+%5Clangle+%5Cell_t+%2C+y+%5Crangle+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  y_{t+1} = \arg\min_{y\in {\mathbb R}^n} \ \ c ||y ||^2 + \sum_{k=1}^{t} \langle \ell_t , y \rangle "/></p>
<p align="center"><img alt="\displaystyle  x'_{t+1} = \Pi_K (y_{t+1} ) = \arg\min_{x\in K} || x - y_{t+1} || " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++x%27_%7Bt%2B1%7D+%3D+%5CPi_K+%28y_%7Bt%2B1%7D+%29+%3D+%5Carg%5Cmin_%7Bx%5Cin+K%7D+%7C%7C+x+-+y_%7Bt%2B1%7D+%7C%7C+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  x'_{t+1} = \Pi_K (y_{t+1} ) = \arg\min_{x\in K} || x - y_{t+1} || "/></p>
<p> and we claim that we always have <img alt="{x'_{t+1} = x_{t+1}}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx%27_%7Bt%2B1%7D+%3D+x_%7Bt%2B1%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x'_{t+1} = x_{t+1}}"/>. The fact that we can reduce a regularized constrained optimization problem to an unconstrained problem and a projection is part of a broader theory that we will describe in a later post. For now, we will limit to prove the equivalence in this specific setting. First of all, we already have an expression for <img alt="{y_{t+1}}" class="latex" src="https://s0.wp.com/latex.php?latex=%7By_%7Bt%2B1%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{y_{t+1}}"/>, namely </p>
<p align="center"><img alt="\displaystyle  y_{t+1} = - \frac 1{2c} \sum_{k=1}^t \ell_t " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++y_%7Bt%2B1%7D+%3D+-+%5Cfrac+1%7B2c%7D+%5Csum_%7Bk%3D1%7D%5Et+%5Cell_t+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  y_{t+1} = - \frac 1{2c} \sum_{k=1}^t \ell_t "/></p>
<p> Now the definition of <img alt="{x'_{t+1}}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx%27_%7Bt%2B1%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x'_{t+1}}"/> is </p>
<p align="center"><img alt="\displaystyle  x'_{t+1} = \arg\min_{x\in K} || x - y_{t+1} || " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++x%27_%7Bt%2B1%7D+%3D+%5Carg%5Cmin_%7Bx%5Cin+K%7D+%7C%7C+x+-+y_%7Bt%2B1%7D+%7C%7C+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  x'_{t+1} = \arg\min_{x\in K} || x - y_{t+1} || "/></p>
<p align="center"><img alt="\displaystyle  = \arg\min_{x\in K} || x - y_{t+1} ||^2 " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++%3D+%5Carg%5Cmin_%7Bx%5Cin+K%7D+%7C%7C+x+-+y_%7Bt%2B1%7D+%7C%7C%5E2+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  = \arg\min_{x\in K} || x - y_{t+1} ||^2 "/></p>
<p align="center"><img alt="\displaystyle  = \arg\min_{x\in K} ||x||^2 - 2 \left \langle x , y_{t+1} \right\rangle + || y_{t+1} ||^2 " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++%3D+%5Carg%5Cmin_%7Bx%5Cin+K%7D+%7C%7Cx%7C%7C%5E2+-+2+%5Cleft+%5Clangle+x+%2C+y_%7Bt%2B1%7D+%5Cright%5Crangle+%2B+%7C%7C+y_%7Bt%2B1%7D+%7C%7C%5E2+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  = \arg\min_{x\in K} ||x||^2 - 2 \left \langle x , y_{t+1} \right\rangle + || y_{t+1} ||^2 "/></p>
<p align="center"><img alt="\displaystyle  = \arg\min_{x\in K} ||x||^2 - 2 \left \langle x , y_{t+1} \right\rangle " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++%3D+%5Carg%5Cmin_%7Bx%5Cin+K%7D+%7C%7Cx%7C%7C%5E2+-+2+%5Cleft+%5Clangle+x+%2C+y_%7Bt%2B1%7D+%5Cright%5Crangle+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  = \arg\min_{x\in K} ||x||^2 - 2 \left \langle x , y_{t+1} \right\rangle "/></p>
<p align="center"><img alt="\displaystyle  = \arg\min_{x\in K} ||x||^2 - 2 \left\langle x , \frac 1{2c} \sum_{k=1}^t \ell_t \right\rangle " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++%3D+%5Carg%5Cmin_%7Bx%5Cin+K%7D+%7C%7Cx%7C%7C%5E2+-+2+%5Cleft%5Clangle+x+%2C+%5Cfrac+1%7B2c%7D+%5Csum_%7Bk%3D1%7D%5Et+%5Cell_t+%5Cright%5Crangle+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  = \arg\min_{x\in K} ||x||^2 - 2 \left\langle x , \frac 1{2c} \sum_{k=1}^t \ell_t \right\rangle "/></p>
<p align="center"><img alt="\displaystyle  = \arg\min_{x\in K} c ||x||^2 - \sum_{k=1}^t \left\langle x , \ell_t \right\rangle = x_{t+1} " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++%3D+%5Carg%5Cmin_%7Bx%5Cin+K%7D+c+%7C%7Cx%7C%7C%5E2+-+%5Csum_%7Bk%3D1%7D%5Et+%5Cleft%5Clangle+x+%2C+%5Cell_t+%5Cright%5Crangle+%3D+x_%7Bt%2B1%7D+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  = \arg\min_{x\in K} c ||x||^2 - \sum_{k=1}^t \left\langle x , \ell_t \right\rangle = x_{t+1} "/></p>
<p>
In order to bound the regret, we have to compute </p>
<p align="center"><img alt="\displaystyle  f_t(x_t) - f_t(x_{t+1} ) = \langle \ell_t , x_t - x_{t+1} \rangle \leq || \ell_t || \cdot ||x_t - x_{t+1} || " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++f_t%28x_t%29+-+f_t%28x_%7Bt%2B1%7D+%29+%3D+%5Clangle+%5Cell_t+%2C+x_t+-+x_%7Bt%2B1%7D+%5Crangle+%5Cleq+%7C%7C+%5Cell_t+%7C%7C+%5Ccdot+%7C%7Cx_t+-+x_%7Bt%2B1%7D+%7C%7C+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  f_t(x_t) - f_t(x_{t+1} ) = \langle \ell_t , x_t - x_{t+1} \rangle \leq || \ell_t || \cdot ||x_t - x_{t+1} || "/></p>
<p> and since L2 projections cannot increase L2 distances, we have </p>
<p align="center"><img alt="\displaystyle  || x_t - x_{t+1} || \leq || y_t - y_{t+1} || = \frac 1 {2c} || \ell_t || " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++%7C%7C+x_t+-+x_%7Bt%2B1%7D+%7C%7C+%5Cleq+%7C%7C+y_t+-+y_%7Bt%2B1%7D+%7C%7C+%3D+%5Cfrac+1+%7B2c%7D+%7C%7C+%5Cell_t+%7C%7C+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  || x_t - x_{t+1} || \leq || y_t - y_{t+1} || = \frac 1 {2c} || \ell_t || "/></p>
<p>
So the regret bound is </p>
<p align="center"><img alt="\displaystyle  {\rm Regret}_T \leq c ||x^*||^2 - c|| x_1||^2 + \frac 1 {2c} \sum_{t=1}^T || \ell_t ||^2 " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++%7B%5Crm+Regret%7D_T+%5Cleq+c+%7C%7Cx%5E%2A%7C%7C%5E2+-+c%7C%7C+x_1%7C%7C%5E2+%2B+%5Cfrac+1+%7B2c%7D+%5Csum_%7Bt%3D1%7D%5ET+%7C%7C+%5Cell_t+%7C%7C%5E2+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  {\rm Regret}_T \leq c ||x^*||^2 - c|| x_1||^2 + \frac 1 {2c} \sum_{t=1}^T || \ell_t ||^2 "/></p>
<p> If <img alt="{D}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BD%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{D}"/> is an upper bound to <img alt="{\max_{x\in K} || x||}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cmax_%7Bx%5Cin+K%7D+%7C%7C+x%7C%7C%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\max_{x\in K} || x||}"/>, and <img alt="{L}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BL%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{L}"/> is an upper bound to the norm <img alt="{|| \ell_t ||}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%7C%7C+%5Cell_t+%7C%7C%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{|| \ell_t ||}"/> of all the loss vectors, then</p>
<p/><p align="center"><img alt="\displaystyle  {\rm Regret}_T \leq c D^2 + \frac 1 {2c} T L^2 " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++%7B%5Crm+Regret%7D_T+%5Cleq+c+D%5E2+%2B+%5Cfrac+1+%7B2c%7D+T+L%5E2+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  {\rm Regret}_T \leq c D^2 + \frac 1 {2c} T L^2 "/></p>
<p> which can be optimized to </p>
<p align="center"><img alt="\displaystyle  {\rm Regret}_T \leq DL \sqrt {2T} " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++%7B%5Crm+Regret%7D_T+%5Cleq+DL+%5Csqrt+%7B2T%7D+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  {\rm Regret}_T \leq DL \sqrt {2T} "/></p>
<p>
</p><p><b>  3.2. Deriving the Analysis of Gradient Descent </b></p>
<p/><p>
Suppose that <img alt="{g: K \rightarrow {\mathbb R}}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bg%3A+K+%5Crightarrow+%7B%5Cmathbb+R%7D%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{g: K \rightarrow {\mathbb R}}"/> is a convex function whose gradient <img alt="{\nabla g}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cnabla+g%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\nabla g}"/> is well defined at all points in <img alt="{K}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BK%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{K}"/>, and that we are interested in minimizing <img alt="{g}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bg%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{g}"/>. Then a way to reduce this problem to online optimization would be to use the function <img alt="{g}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bg%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{g}"/> as loss function at each step. Then the offline optimum would be the minimizer of <img alt="{g}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bg%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{g}"/>, and achieving small regret means that <img alt="{\frac 1T \sum_t g(x_t)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cfrac+1T+%5Csum_t+g%28x_t%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\frac 1T \sum_t g(x_t)}"/> is close to the minimum of <img alt="{g}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bg%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{g}"/>, and so the best <img alt="{x_t}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx_t%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x_t}"/> is an approximate minimizer.</p>
<p>
Unfortunately, this is not a very helpful idea, because if we ran an FTRL algorithm against an adversary that keeps proposing <img alt="{g}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bg%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{g}"/> as a cost function at each step then we would have </p>
<p align="center"><img alt="\displaystyle  x_{t+1} = \arg\min_{x\in K} R(x) + t \cdot g(x) " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++x_%7Bt%2B1%7D+%3D+%5Carg%5Cmin_%7Bx%5Cin+K%7D+R%28x%29+%2B+t+%5Ccdot+g%28x%29+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  x_{t+1} = \arg\min_{x\in K} R(x) + t \cdot g(x) "/></p>
<p> which, for large <img alt="{t}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bt%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{t}"/>, is essentially the same problem as minimizing <img alt="{g}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bg%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{g}"/>, so we have basically reduced the problem of minimizing <img alt="{g}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bg%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{g}"/> to itself.</p>
<p>
Indeed, the power of the FTRL algorithm is that the algorithm does well even though it does not know the cost function, and if we keep using the same cost function at each step we are not making a good use of its power. Now, suppose that we use cost functions <img alt="{f_t}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bf_t%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{f_t}"/> such that </p>
<ul>
<li> <img alt="{f_t(x_t) = g(x_t)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bf_t%28x_t%29+%3D+g%28x_t%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{f_t(x_t) = g(x_t)}"/>
</li><li> <img alt="{\forall x\in K \ \ f_t(x) \leq g(x)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cforall+x%5Cin+K+%5C+%5C+f_t%28x%29+%5Cleq+g%28x%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\forall x\in K \ \ f_t(x) \leq g(x)}"/>
</li></ul>
<p> Then, after <img alt="{T}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BT%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{T}"/> steps, we have </p>
<p align="center"><img alt="\displaystyle  \sum_{t=1}^T g(x_t) = \sum_{t=1}^T f_t(x_t) = {\rm Regret}_T + \min{x\in K} \sum_{t=1}^T f_t(x) \leq {\rm Regret}_T + \min_{x\in K} \sum_{t=1}^T g (x) " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++%5Csum_%7Bt%3D1%7D%5ET+g%28x_t%29+%3D+%5Csum_%7Bt%3D1%7D%5ET+f_t%28x_t%29+%3D+%7B%5Crm+Regret%7D_T+%2B+%5Cmin%7Bx%5Cin+K%7D+%5Csum_%7Bt%3D1%7D%5ET+f_t%28x%29+%5Cleq+%7B%5Crm+Regret%7D_T+%2B+%5Cmin_%7Bx%5Cin+K%7D+%5Csum_%7Bt%3D1%7D%5ET+g+%28x%29+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  \sum_{t=1}^T g(x_t) = \sum_{t=1}^T f_t(x_t) = {\rm Regret}_T + \min{x\in K} \sum_{t=1}^T f_t(x) \leq {\rm Regret}_T + \min_{x\in K} \sum_{t=1}^T g (x) "/></p>
<p> meaning </p>
<p align="center"><img alt="\displaystyle  \frac 1T \sum_{t=1}^T g(x_t) \leq \frac {{\rm Regret}_T}T + \min_{x\in K} g(x) " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++%5Cfrac+1T+%5Csum_%7Bt%3D1%7D%5ET+g%28x_t%29+%5Cleq+%5Cfrac+%7B%7B%5Crm+Regret%7D_T%7DT+%2B+%5Cmin_%7Bx%5Cin+K%7D+g%28x%29+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  \frac 1T \sum_{t=1}^T g(x_t) \leq \frac {{\rm Regret}_T}T + \min_{x\in K} g(x) "/></p>
<p> and so one of the <img alt="{x_t}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx_t%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x_t}"/> is an approximate minimizer. Indeed, using convexity, we also have </p>
<p align="center"><img alt="\displaystyle  g \left( \frac 1T \sum_{t=1}^T x_t \right) \leq \frac 1T \sum_{t=1}^T g(x_t) \leq \frac {{\rm Regret}_T}T + \min_{x\in K} g(x) " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++g+%5Cleft%28+%5Cfrac+1T+%5Csum_%7Bt%3D1%7D%5ET+x_t+%5Cright%29+%5Cleq+%5Cfrac+1T+%5Csum_%7Bt%3D1%7D%5ET+g%28x_t%29+%5Cleq+%5Cfrac+%7B%7B%5Crm+Regret%7D_T%7DT+%2B+%5Cmin_%7Bx%5Cin+K%7D+g%28x%29+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  g \left( \frac 1T \sum_{t=1}^T x_t \right) \leq \frac 1T \sum_{t=1}^T g(x_t) \leq \frac {{\rm Regret}_T}T + \min_{x\in K} g(x) "/></p>
<p> and so the average of the <img alt="{x_t}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx_t%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x_t}"/> is also an approximate minimizer. From the point of view of exploiting FTRL do to minimize <img alt="{g}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bg%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{g}"/>, cost functions <img alt="{f_t}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bf_t%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{f_t}"/> as above work just as well as presenting <img alt="{g}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bg%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{g}"/> as a cost functions at each step.</p>
<p>
How do we find cost functions that satisfy the above two properties and for which the FTRL algorithm is easy to implement? The idea is to let <img alt="{f_t}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bf_t%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{f_t}"/> be the linear approximation of <img alt="{g}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bg%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{g}"/> at <img alt="{x_t}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx_t%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x_t}"/>: </p>
<p align="center"><img alt="\displaystyle  f_t (x) := g(x_t) + \langle \nabla g (x_t), x - x_t \rangle " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++f_t+%28x%29+%3A%3D+g%28x_t%29+%2B+%5Clangle+%5Cnabla+g+%28x_t%29%2C+x+-+x_t+%5Crangle+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  f_t (x) := g(x_t) + \langle \nabla g (x_t), x - x_t \rangle "/></p>
<p> The <img alt="{f_t(x_t) = g(x_t)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bf_t%28x_t%29+%3D+g%28x_t%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{f_t(x_t) = g(x_t)}"/> condition is immediate, and </p>
<p align="center"><img alt="\displaystyle  g(x) \geq f_t (x) " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++g%28x%29+%5Cgeq+f_t+%28x%29+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  g(x) \geq f_t (x) "/></p>
<p> is a consequence of the convexity of <img alt="{g}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bg%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{g}"/>.</p>
<p>
The cost functions that we have defined are affine functions, that is, each of them equals a constant plus a linear function </p>
<p align="center"><img alt="\displaystyle  f_t(x) = \left( g(x_t) - \langle \nabla g(x_t) , x_t\rangle \right) + \langle \nabla g(x_t) , x \rangle " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++f_t%28x%29+%3D+%5Cleft%28+g%28x_t%29+-+%5Clangle+%5Cnabla+g%28x_t%29+%2C+x_t%5Crangle+%5Cright%29+%2B+%5Clangle+%5Cnabla+g%28x_t%29+%2C+x+%5Crangle+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  f_t(x) = \left( g(x_t) - \langle \nabla g(x_t) , x_t\rangle \right) + \langle \nabla g(x_t) , x \rangle "/></p>
<p>
Adding a constant term to a cost function does not change the iteration of FTRL, and does not change the regret (because the same term is added both to the solution found by the algorithm and to the offline optimum), so the algorithm is just initialized with</p>
<p/><p align="center"><img alt="\displaystyle  y_1 = {\bf 0} " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++y_1+%3D+%7B%5Cbf+0%7D+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  y_1 = {\bf 0} "/></p>
<p align="center"><img alt="\displaystyle  x_1 = \Pi_K({\bf 0}) = \arg\min_{x\in K} || x|| " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++x_1+%3D+%5CPi_K%28%7B%5Cbf+0%7D%29+%3D+%5Carg%5Cmin_%7Bx%5Cin+K%7D+%7C%7C+x%7C%7C+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  x_1 = \Pi_K({\bf 0}) = \arg\min_{x\in K} || x|| "/></p>
<p> and then continues with the update rules </p>
<p align="center"><img alt="\displaystyle  y_{t+1} =y_t -\frac 1 {2c} \nabla g (x_t) \mbox{ for } t \geq 1" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++y_%7Bt%2B1%7D+%3Dy_t+-%5Cfrac+1+%7B2c%7D+%5Cnabla+g+%28x_t%29+%5Cmbox%7B+for+%7D+t+%5Cgeq+1&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  y_{t+1} =y_t -\frac 1 {2c} \nabla g (x_t) \mbox{ for } t \geq 1"/></p>
<p align="center"><img alt="\displaystyle  x_{t+1} = \Pi_K(y_{t+1}) = \arg\min_{x\in K} || x - y_{t+1} || \mbox{ for } t \geq 1 " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++x_%7Bt%2B1%7D+%3D+%5CPi_K%28y_%7Bt%2B1%7D%29+%3D+%5Carg%5Cmin_%7Bx%5Cin+K%7D+%7C%7C+x+-+y_%7Bt%2B1%7D+%7C%7C+%5Cmbox%7B+for+%7D+t+%5Cgeq+1+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  x_{t+1} = \Pi_K(y_{t+1}) = \arg\min_{x\in K} || x - y_{t+1} || \mbox{ for } t \geq 1 "/></p>
<p> which is just projected gradient descent.</p>
<p>
If we have known upper bounds </p>
<p align="center"><img alt="\displaystyle  \forall x \in K \ \ || \nabla g(x) || \leq L " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++%5Cforall+x+%5Cin+K+%5C+%5C+%7C%7C+%5Cnabla+g%28x%29+%7C%7C+%5Cleq+L+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  \forall x \in K \ \ || \nabla g(x) || \leq L "/></p>
<p> and </p>
<p align="center"><img alt="\displaystyle  \forall x \in K \ \ || x || \leq D " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++%5Cforall+x+%5Cin+K+%5C+%5C+%7C%7C+x+%7C%7C+%5Cleq+D+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  \forall x \in K \ \ || x || \leq D "/></p>
<p> then we have </p>
<p align="center"><img alt="\displaystyle  g \left( \frac 1 T \sum_{t=1}^T x_t \right ) \leq DL \cdot \sqrt{\frac 2 T} + \min_{x\in K} \sum_{t=1}^T g (x) " class="latex" src="https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++g+%5Cleft%28+%5Cfrac+1+T+%5Csum_%7Bt%3D1%7D%5ET+x_t+%5Cright+%29+%5Cleq+DL+%5Ccdot+%5Csqrt%7B%5Cfrac+2+T%7D+%2B+%5Cmin_%7Bx%5Cin+K%7D+%5Csum_%7Bt%3D1%7D%5ET+g+%28x%29+&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="\displaystyle  g \left( \frac 1 T \sum_{t=1}^T x_t \right ) \leq DL \cdot \sqrt{\frac 2 T} + \min_{x\in K} \sum_{t=1}^T g (x) "/></p>
<p> which means that to achieve additive error <img alt="{\epsilon}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cepsilon%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\epsilon}"/> it is enough to proceed for <img alt="{2D^2L^2 / \epsilon^2}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B2D%5E2L%5E2+%2F+%5Cepsilon%5E2%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{2D^2L^2 / \epsilon^2}"/> steps. </p></div>
    </content>
    <updated>2019-05-06T14:05:54Z</updated>
    <published>2019-05-06T14:05:54Z</published>
    <category term="theory"/>
    <category term="follow the leader"/>
    <category term="follow the regularized leader"/>
    <category term="gradient descent"/>
    <category term="online optimization"/>
    <author>
      <name>luca</name>
    </author>
    <source>
      <id>https://lucatrevisan.wordpress.com</id>
      <logo>https://s0.wp.com/i/buttonw-com.png</logo>
      <link href="https://lucatrevisan.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="https://lucatrevisan.wordpress.com" rel="alternate" type="text/html"/>
      <link href="https://lucatrevisan.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="https://lucatrevisan.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>"Marge, I agree with you - in theory. In theory, communism works. In theory." -- Homer Simpson</subtitle>
      <title>in   theory</title>
      <updated>2019-05-08T23:20:08Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://emanueleviola.wordpress.com/?p=628</id>
    <link href="https://emanueleviola.wordpress.com/2019/05/05/e-ink-on-the-move/" rel="alternate" type="text/html"/>
    <title>E-ink on the move</title>
    <summary>Today I was overjoyed to notice that the MBTA is installing e-ink signs. I didn’t know about this when I wrote in the previous post that the market for e-ink monitors will be huge. I was actually about to report more on my experience, and by another standard coincidence today a reader asks: Some time […]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p style="text-align: justify;">Today I was overjoyed to notice that the <a href="https://www.mbta.com/projects/solar-powered-e-ink-signs">MBTA is installing e-ink signs</a>. I didn’t know about this when <a href="https://emanueleviola.wordpress.com/2019/03/07/a-dream-come-true-sort-of-e-ink-monitors/">I wrote in the previous post</a> that the market for e-ink monitors will be huge.</p>
<p style="text-align: justify;">I was actually about to report more on my experience, and by another standard coincidence today a reader asks:</p>
<blockquote><p>Some time have passed, is your evaluation the same? Did you come across any unexpected difficulties?</p></blockquote>
<p style="text-align: justify;">Well, I wrote a <a href="http://www.ccs.neu.edu/home/viola/papers/tm.pdf">paper</a> entirely in e-ink. But I regret to admit that towards the end of the semester I got really busy with the usual end-of-Spring matters at the university, and I switched back to my back-lit 30-inch Dell monitor.  I had to interact with a number of computer systems where I could not easily change font size (the story of my life), and where color tended to matter, and I felt that the new monitor was slowing me down.  I haven’t switched back to the e-ink monitor yet, partly because I am still recovering from the burst.</p>
<p style="text-align: justify;">However I look forward to using the e-ink monitor more during this summer, especially outdoors.  Here the fact that it’s usb powered will be essential.  In the MBTA project they use solar power which I think is really cool and makes me think of bringing my monitor to the secluded off-the-grid cabin in Maine I don’t have.</p></div>
    </content>
    <updated>2019-05-06T00:40:40Z</updated>
    <published>2019-05-06T00:40:40Z</published>
    <category term="Uncategorized"/>
    <category term="health"/>
    <category term="tech"/>
    <author>
      <name>Emanuele</name>
    </author>
    <source>
      <id>https://emanueleviola.wordpress.com</id>
      <logo>https://s0.wp.com/i/buttonw-com.png</logo>
      <link href="https://emanueleviola.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="https://emanueleviola.wordpress.com" rel="alternate" type="text/html"/>
      <link href="https://emanueleviola.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="https://emanueleviola.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>By Emanuele Viola</subtitle>
      <title>Thoughts</title>
      <updated>2019-05-08T23:57:43Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://gradientscience.org/adv/</id>
    <link href="http://gradientscience.org/adv/" rel="alternate" type="text/html"/>
    <title>Adversarial Examples Are Not Bugs, They Are Features</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><a class="bbutton" href="https://arxiv.org/abs/1905.02175" style="float: left;">
<i class="fas fa-file-pdf"/>
    Read the paper
</a>
<a class="bbutton" href="http://git.io/adv-datasets" style="float: right;">
<i class="fab fa-github"/>
   Download the datasets
</a></p>

<p>Over the past few years, adversarial examples – or inputs that have been slightly perturbed by an adversary to cause unintended behavior in machine learning systems – have received significant attention in the machine learning community (for more background, read our introduction to adversarial examples <a href="https://gradientscience.org/intro_adversarial">here</a>). There has been much work on training models that are not vulnerable to adversarial examples (in previous posts, we discussed methods for training robust models: <a href="https://gradientscience.org/robust_opt_pt1/">part 1</a>, <a href="https://gradientscience.org/robust_opt_pt2/">part 2</a>, but all this research does not really confront the fundamental question: <i>why</i> do these adversarial examples arise in the first place?</p>

<p>So far, the prevailing view has been that adversarial examples stem from “quirks” of the models that will eventually disappear once we make enough progress towards better training algorithms and larger scale data collection. Common views include adversarial examples being either a consequence of the input space being high-dimensional (e.g. <a href="https://arxiv.org/abs/1801.02774">here</a>) or attributed to finite-sample phenomena (e.g. <a href="https://arxiv.org/abs/1608.07690">here</a> or <a href="https://arxiv.org/abs/1804.11285">here</a>).</p>

<p>Today we will discuss our <a href="https://gradientscience.org/adv.pdf">recent work</a> that provides a new perspective on the reasons for adversarial examples arise. However, before we dive into the details, let us first tell you a short story:</p>

<h2 id="a-planet-called-erm">A Planet called <i>Erm</i></h2>

<p>Our tale begins on <i><span class="sc">Erm</span></i>, a distant planet inhabited by members of an ancient alien race known as <i>Nets</i>. The Nets are a strange species; each individual’s place in the social hierarchy is determined by their ability to classify bizarre 32-by-32 pixel images (which are meaningless to the Nets) into ten completely arbitrary categories. These images are drawn from a top-secret dataset, <span class="sc">See-Far</span>—outside of looking at those curious pixelated images, the Nets live their lives totally blind.</p>

<p>As Nets grow older and wiser they begin to discover more and more tell-tale <i>patterns</i> in <span class="sc">See-Far</span>. Each new pattern that an alien discovers helps them classify the dataset even more accurately. Due to the immense societal value of increased classification accuracy, the aliens have names for the most predictive image patterns:</p>

<p><img alt="A Toogit, highly indicative of a '1' image." src="https://gradientscience.org/images/featsnotbugs/toogit.png" style="width: 30%;"/></p>
<div class="footnote">
        A TOOGIT, highly indicative of a "1" image.
        Nets are extremely sensitive to TOOGITs.
</div>

<p>The most powerful aliens were remarkably adept at spotting patterns, and thus were extremely sensitive to their presence in <span class="sc">See-Far</span> images.</p>

<p>Somehow (perhaps looking for <span class="sc">See-Far</span> classification tips), some of the aliens obtain access to a <i>human-written</i> machine learning paper. One figure in
particular caught the aliens’ eye:</p>

<p>
<img alt="An quote-unquote adversarial example?" src="https://gradientscience.org/images/featsnotbugs/bagaboop.png"/>
</p><div class="footnote">
An "adversarial example"?
</div>
<p/>

<p>The figure was relatively simple, they thought: on the left was a “2”, in the middle there was a GAB pattern, which was known to indicate “4”—unsurprisingly, adding a GAB to the image on the left resulted in a new image, <i>which looked (to the Nets) exactly like an image corresponding to the “4” category</i>.</p>

<p>The Nets could not understand why, according to the paper, the original and final images, being completely different, should be identically classified. Confused, the Nets flipped on through the manuscript, wondering what other useful patterns humans were oblivious to$\ldots$</p>

<h2 id="what-we-can-learn-from-erm">What we can learn from <i>Erm</i></h2>

<p>As the names may suggest, this story is not merely one of aliens and their curious social constructs: the way Nets develop is reminiscent of how we train machine learning models. In particular, we maximize accuracy without incorporating much prior context about classified classes, the physical world, or other human-related concepts. The result in the story is that the aliens are able to realize that what humans think of as meaningless adversarial perturbation are actually patterns crucial to <span class="sc">See-Far</span> classification. The tale of the Nets should thus make us wonder:</p>

<p><i>Are adversarial perturbations really unnatural and meaningless?</i></p>

<h3 id="a-simple-experiment">A simple experiment</h3>
<p>To investigate this issue, let us first perform a simple experiment:</p>

<ul>
  <li>We start with an image from the training set of a standard dataset (e.g. CIFAR10):</li>
</ul>

<p><img alt="An image from the training set" src="https://gradientscience.org/images/featsnotbugs/train.png" style="width: 50%;"/></p>

<ul>
  <li>We synthesize a targeted adversarial example (on a standard pre-trained model) from each (x, y) towards the “next” class y+1 (or 0, if y is the last class):</li>
</ul>

<p><img alt="An adversarial perturabtion to the next class" src="https://gradientscience.org/images/featsnotbugs/adv.png"/></p>

<ul>
  <li>We then construct a new training set, by labeling these adversarial examples with their corresponding target class:</li>
</ul>

<p><img alt="A new training set based on the perturbation" src="https://gradientscience.org/images/featsnotbugs/newtrain.png" style="width: 35%;"/></p>

<p>Now, the resulting training set is imperceptibly perturbed from the original, but the labels have been changed—as such, it looks <i>completely</i> mislabeled to a human. In fact, the mislabelings are even consistent with a “permuted” hypothesis (i.e. every dog is labeled as a cat, every cat as a bird, etc.).</p>

<p>We train a new classifier (not necessarily with the same architecture as the first) on the “mislabeled dataset.” How will this classifier perform on the  <em>original (unaltered) test set</em> (i.e. the standard CIFAR-10 test set)?</p>

<p>Remarkably, we find that the resulting classifier actually has moderate accuracy (e.g. 44% for CIFAR)! This is despite the fact that training inputs are associated with their “true” labels <em>solely through imperceptible perturbations</em>, and are associated with a different (now incorrect) label matching through <i>all</i> visible features.</p>

<p>What’s going on here?</p>

<h2 id="our-conceptual-model-for-adversarial-examples">Our Conceptual Model for Adversarial Examples</h2>

<p>The experiment we just described establishes adversarial perturbations of standard models as patterns predictive of the target class in a <i>well-generalizing</i> sense. That is, adversarial perturbations in the training set alone allowed moderately accurate predictions on the test set. In this light, one might wonder: perhaps these patterns are <i>not</i> fundamentally different from what humans use to classify images (e.g. ears, whiskers, snouts)! This is precisely our hypothesis—there exist a variety of features of the input that are predictive of the label, and only some of these are perceptible to humans.</p>

<p>More precisely, we posit that predictive features of the data can be split into “robust” and “non-robust” features. Robust features correspond to patterns that are predictive of the true label <em>even when adversarially perturbed</em> (e.g. the presence of “fur” in an image) under some pre-defined (and crucially human-defined) perturbation set, e.g. the $\ell_2$ ball. Conversely, non-robust features correspond to patterns that while predictive, can be “flipped” by an adversary within a pre-defined perturbation set to be indicate a wrong class (see <a href="https://gradientscience.org/adv.pdf">our paper</a> for a formal definition).</p>

<p>Since we always only consider perturbation sets that do not affect human classification performance,  we expect humans to rely solely on robust features. However, when the goal is maximizing (standard) test-set accuracy, non-robust features can be just as useful as robust ones–in fact, the two types of features are completely interchangeable. This is illustrated in the following figure:</p>

<p><img alt="" src="https://gradientscience.org/images/featsnotbugs/model.png"/></p>

<p>From this perspective, our experiment describes something quite simple. In the original training set, both the robust and non-robust features of the input are predictive of the label. When we make a small adversarial perturbation, we cannot significantly affect the robust features (essentially by definition), but  we can still flip <i>non-robust features</i>. For instance, every dog image now retains the robust features of a dog (and thus appears to us to be a dog), but has non-robust features of a cat. After the training set is relabelled, we make it so that the robust features actually point in the <i>wrong direction</i> (i.e. the pictures with robust “dog” features are labeled as cats) and hence only the non-robust features actually provide correct guidance for generalization.</p>

<p>In summary, both robust and non-robust features are predictive on the training set, but <i>only non-robust features will yield generalization to the original test set</i>:</p>

<p><img alt="" src="https://gradientscience.org/images/featsnotbugs/diagram.png"/></p>

<p>Thus, the fact that models trained on this dataset actually generalize to the standard test set indicates that (a) non-robust features exist and are sufficient for good generalization, and (b) deep neural networks indeed rely on these non-robust features, even in the presence of predictive robust features.</p>

<h2 id="do-robust-models-learn-robust-features">Do Robust Models Learn Robust Features?</h2>

<p>Our experiments establish that adversarial perturbations are not meaningless artifacts but actually correspond directly to perturbing features that are crucial to generalization. At the same time, our blog posts about adversarial examples (<a href="https://gradientscience.org/robust1">here</a> and <a href="https://gradientscience.org/robust2">here</a>) showed that by using robust optimization, we can get models that are more robust to adversarial examples.</p>

<p>So a natural question to ask is: can we verify that robust models actually rely on <i>robust</i> features? To test this, we establish a methodology for restricting (in a best-effort sense) inputs to only the features a model is sensitive to (for deep neural networks, features correspond to the penultimate layer activations). Using this method, we create a new training set that is restricted to only contain the features that an already-trained robust model utilizes:</p>

<p><img alt="" src="https://gradientscience.org/images/featsnotbugs/frog.png"/></p>

<p>We then train a model on the resulting dataset  <em>without</em> adversarial training and find that the resulting model has non-trivial accuracy <em>and</em> robustness! This is in stark contrast to training on the standard training set which leads to models that are accurate yet completely brittle.</p>

<p><img alt="" src="https://gradientscience.org/images/featsnotbugs/CIFAR_res.png"/></p>
<div class="footnote">
Standard and robust accuracy, tested on CIFAR-10 test set ($\mathcal{D}$). Training: <br/>
<strong>Left</strong>: training normally on CIFAR-10 ($\mathcal{D}$) <br/>
<strong>Middle</strong>: training adversarially on CIFAR-10 ($\mathcal{D}$) <br/>
<strong>Right</strong>: training normally on constructed dataset ($\widehat{\mathcal{D}}_R$)
</div>

<p>Our results thus indicate that robustness (and in turn non-robustness) can in fact arise as a property of the dataset itself. In particular, when we remove non-robust features from the original training set, we can get robust models just via standard (non-adversarial) training. This is further evidence that adversarial examples arise as a result of non-robust features and are not necessarily tied to the standard training framework.</p>

<h2 id="transferability">Transferability</h2>

<p>An immediate consequence of this change in perspective is that the <i>transferability</i> of adversarial examples (the thus-far mysterious phenomenon that perturbations for one model are often adversarial for others) no longer requires a separate explanation. Specifically, now that we view adversarial vulnerability as a direct product of the <i>features derived from the dataset</i> (as opposed to quirks in the training of individual models), we would expect similarly expressive models to be able to find and use these features to improve their classification accuracy too.</p>

<p>To further explore this idea, we study how the tendency of different architectures to learning similar non-robust features relates to the transferability of adversarial examples between them:</p>

<p><img alt="" src="https://gradientscience.org/images/featsnotbugs/transfer.png"/>
In the above, we generate the dataset that we described in our very first experiment (a training set of adversarial examples labeled with the target class), using a ResNet-50 to construct the adversarial examples. We can think of the resulting dataset as having all of the ResNet-50’s non-robust features “flipped” to the target class. We then train the five architectures shown above on this dataset, and record their generalization performance on the true test set: this corresponds to how well the architecture is able to generalize using only the non-robust features from a ResNet-50.</p>

<p>When we analyze the results we see that, as our new view of adversarial examples suggests, models’ ability to pick up the non-robust features introduced by the ResNet-50 correlates extremely well with the adversarial transferability from ResNet-50 to standard models of each architecture.</p>

<h2 id="implications">Implications</h2>

<p>Our discussion and experiments establish adversarial examples as a purely human-centric phenomenon. From the perspective of classification performance there is no reason for a model to prefer robust over non-robust features. After all, the notion of robustness is human-specified. Hence, if we want our models to rely mostly on robust features we need to explicitly account for that by incorporating priors into architecture or training process. From that perspective, adversarial training (and more broadly robust optimization) can be thought of as a tool to incorporate desired invariances into the learned model. For example, robust training can be viewed as attempting to undermine the predictiveness of non-robust features by constantly “flipping” them, and thus steering the trained model away from relying on them.</p>

<p>At the same time, the reliance of standard models on non-robust (and hence incomprehensible to humans) features needs to be accounted for when designing interpretability methods. In particular, any “explanation” of a standardly trained model’s prediction should either highlight such non-robust features (and hence not be fully human-meaningful) or hide them (and hence not be fully faithful to the model’s decision process). Therefore, if we want interpretability methods that are both human-meaningful and faithful, resorting only to post-training processing is fundamentally insufficient: one needs to intervene <i>at</i> training time.</p>

<h2 id="more-in-the-paper">More in the Paper</h2>

<p>In <a href="https://gradientscience.org/adv.pdf">our paper</a>, we also describe a precise framework for discussing robust and non-robust features, further experiments corroborating our hypothesis, and a theoretical model under which we can study the dynamics of robust training in the presence of non-robust features.</p></div>
    </summary>
    <updated>2019-05-06T00:00:00Z</updated>
    <published>2019-05-06T00:00:00Z</published>
    <source>
      <id>http://gradientscience.org/</id>
      <author>
        <name>Gradient Science</name>
      </author>
      <link href="http://gradientscience.org/" rel="alternate" type="text/html"/>
      <link href="http://gradientscience.org/feed.xml" rel="self" type="application/atom+xml"/>
      <subtitle>Research highlights and perspectives on machine learning and optimization from MadryLab.</subtitle>
      <title>gradient science</title>
      <updated>2019-05-08T23:57:18Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>http://ptreview.sublinear.info/?p=1116</id>
    <link href="https://ptreview.sublinear.info/?p=1116" rel="alternate" type="text/html"/>
    <title>News for April 2019</title>
    <summary>After a quite slow month of March, things sped up quite significantly in April: six different papers, ranging from graph testing to function testing to quantum distribution testing! Update (05/04): We missed one. Seven! Junta correlation is testable, by Anindya De, Elchanan Mossel, and Joe Neeman (arXiv). Junta testing really has seen a lot of […]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>After a quite slow month of March, things sped up quite significantly in April: six different papers, ranging from graph testing to function testing to quantum distribution testing!</p>



<p><strong>Update (05/04): </strong>We missed one. Seven!</p>



<p><strong>Junta correlation is testable</strong>, by Anindya De, Elchanan Mossel, and Joe Neeman (<a href="https://arxiv.org/abs/1904.04216">arXiv</a>).  Junta testing really has seen <a href="https://ptreview.sublinear.info/?s=junta">a lot of attention and progress</a> over the pass couple years! In this new work, the focus is on the <em>tolerant</em> version of (Boolean) junta testing, where the goal is to decide whether a given function \(f\colon \{-1,1\}^n\to \{-1,1\}\) is close to some \(k\)-junta, or far from any such simple function. The current paper improves on previous work of Blais, Canonne, Eden, Levi, and Ron, which showed how to distinguish between \(\varepsilon\)-close to \(k\)-junta and \(16\varepsilon\)-far from \(k\)-junta in \(O_{k,\varepsilon}(1)\) queries, in two ways: (i) the gap-factor of 16 can now be made arbitrarily small, yielding the first <em>fully</em> tolerant non-trivial junta tester; and (ii) the new algorithm also identifies the underlying “core junta” (up to permutation of the coordinates). Besides the other results contained in the paper (such as results for a relaxation of the tolerant question akin to that of Blais et al.), a key aspect of this paper is to go beyond the use of (set) influence as a proxy for distance to junta-ness which underlied all previous work, thus potentially opening a new avenue towards get fully tolerant, \(\mathrm{poly}(k,1/\varepsilon)\)-query junta testing algorithms.</p>



<p><strong>Testing Tensor Products</strong>, by Irit Dinur and Konstantin Golubev (<a href="https://arxiv.org/abs/1904.12747">arXiv</a>). In this paper, the authors consider the following testing question: given query access to a Boolean function \(f\colon [n]^d \to \mathbb{F}_2\), test whether \(f\) is of the form \(f(x) = f_1(x_1)+\dots f_d(x_d)\) (equivalently, this is the task of testing whether a \(d\)-dimensional tensor with \(\pm 1\)  is of rank \(1\)). They provide two different proximity-oblivious testers (POT) for this task: a \(4\)-query one, reminiscent and building upon the BLR linearity test; as well as a \((d+1)\)-query POT <em>(which they dub “Shapka Test,” one can assume for their love of warm and comfortable hats)</em>, whose analysis is significantly simpler.</p>



<p>Changing direction, the next paper we saw is concerned with quantum testing of (regular, good ol’ classical) probability distributions:</p>



<p><strong>Quantum Algorithms for Classical Probability Distributions</strong>, by Aleksandrs Belovs (<a href="https://arxiv.org/abs/1904.02192">arXiv</a>). This work on quantum distribution testing considers 4 of the existing models of access to samples from an unknown probability distribution, analyzes their relationship, and argues their merits. Further, the autho establishes that for the simple hypothesis testing question of distinguishing between two (known, fixed) probability distributions \(p,q\), in all four models the optimal sample complexity is proportional to the inverse of the Hellinger distance between  \(p\) and \(q\)—in contrast to the classical setting, where it is known to be proportional to the <em>squared</em> inverse of this distance.</p>



<p>Turning to graphs, the next work considers clustering of bounded-degree graphs, a topic we <a href="https://ptreview.sublinear.info/?p=1075">recently discussed as well</a>:</p>



<p><strong>Robust Clustering Oracle and Local Reconstructor of Cluster Structure of Graphs</strong>, by Pan Peng (<a href="https://arxiv.org/abs/1904.09710">arXiv</a>). Consider the following noisy model: an unknown bounded-degree graph (of maximum degree \(d\)) \(G\) which is \((k, \phi_{\rm in},\phi_{\rm out})\)-clusterable (i.e., clusterable in at most \(k\) clusters of inner and outer conductances bounded by \(\phi_{\rm in},\phi_{\rm out}\)) is adversarially modified in at most \($\varepsilon d n\) edges between clusters. This noise model, introduced in this work, leads to the natural questions of “recovering the underlying graph \(G\)”: this is what the author tackles, by designing sublinear-time <em>local clustering oracles</em> and <em>local reconstruction algorithms</em>  (local filters) in this setting. Further, in view of the noise model reminiscent of property testing in the bounded-degree graph setting, connections to testing clusterability are discussed; the implications of the results for testing clusterability are discussed in Section 1.4.</p>



<p><strong>A Faster Local Algorithm for Detecting Bounded-Size Cuts with Applications to Higher-Connectivity Problems</strong>, by Sebastian Forster and Liu Yang (<a href="https://arxiv.org/abs/1904.08382">arXiv</a>). The authors focus on the problem of finding an edge (or vertex) cut in a given graph from a <em>local</em> viewpoint, i.e., in the setting of local computation algorithms, and provide a slew of results in detecting bounded-size cuts. This in turn has direct implications for testing \(k\)-edge and \(k\)-vertex connectivity, directed and undirected, in both the bounded-degree and general (unbounded degree) models, improving on or subsuming the current state-of-the-art across the board  <em>(see Section 1.2.4 of the paper, and the very helpful Tables 3 and 4, for a summary of the improvements)</em>.</p>



<p><strong>Random walks and forbidden minors II: A \(\mathrm{poly}(d\varepsilon^−1)\)-query tester for minor-closed properties of bounded degree graphs</strong>, by Akash Kumar, C. Seshadhri, and Andrew Stolman (<a href="https://eccc.weizmann.ac.il/report/2019/046/">ECCC</a>). Following their <a href="https://ptreview.sublinear.info/?p=999">breakthrough from last May</a>, the authors are at it again! Leveraging a random-walk approach, they resolve the following open question in testing bounded-degree graph: <em>is there a \(\mathrm{poly}(1/\varepsilon)\)-query tester for planarity (and, more generality, for minor-closed graph properties)? </em>The previous state-of-the-art, due to Levi and Ron, had a quasipolynomial dependence on \(1/\varepsilon\).<br/>Without spoiling too much: the answer to the open question is <em>yes—</em> and further the authors settle it by showing an even more general result on testing \(H\)-freeness (for any constant-size graph \(H\)).</p>



<p><strong>Update (05/04): </strong></p>



<p><strong>Testing Unateness Nearly Optimally</strong>, by Xi Chen and Erik Waingarten (<a href="https://arxiv.org/abs/1904.05309">arXiv</a>). Recall that a function \(f\colon \{0,1\}^n\to \{0,1\}\) is said to be unate if there exists some \(s\in\{0,1\}^n\) such that \(f(\cdot \oplus s)\) is monotone; i.e., if \(f\) is either non-increasing or non-decreasing in each coordinate. Testing unateness has seen a surge of interest over the past year or so; this work essentially settles the question, up to polylogarithmic factors in \(n\) (and the exact dependence on \(\varepsilon\)). Namely, the authors present and analyze an \(\tilde{O}(n^{2/3}/\varepsilon^2)\)-query adaptive tester for unateness, which nearly matches the \(\tilde{\Omega}(n^{2/3})\)-query lower bound for adaptive testers previously established by Chen, Waingarten, and Xie.  </p></div>
    </content>
    <updated>2019-05-04T06:22:27Z</updated>
    <published>2019-05-04T06:22:27Z</published>
    <category term="Monthly digest"/>
    <author>
      <name>Clement Canonne</name>
    </author>
    <source>
      <id>https://ptreview.sublinear.info</id>
      <link href="https://ptreview.sublinear.info/?feed=rss2" rel="self" type="application/atom+xml"/>
      <link href="https://ptreview.sublinear.info" rel="alternate" type="text/html"/>
      <subtitle>The latest in property testing and sublinear time algorithms</subtitle>
      <title>Property Testing Review</title>
      <updated>2019-05-08T23:58:31Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://rjlipton.wordpress.com/?p=15827</id>
    <link href="https://rjlipton.wordpress.com/2019/05/02/sedgewick-wins-an-award/" rel="alternate" type="text/html"/>
    <title>Sedgewick Wins An Award</title>
    <summary>An award for educational writing [ ACM ] Robert Sedgewick is the 2018 recipient of the ACM Outstanding Educator Award. Today we congratulate Bob on this wonderful honor. The award is named after Karl Karlstrom. Years ago, he was an editor at the publishing house Prentice-Hall. To convey why the award was named for him, […]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>
<font color="#0044cc"><br/>
<em>An award for educational writing</em><br/>
<font color="#000000"/></font></p><font color="#0044cc"><font color="#000000">
<table class="image alignright">
<tbody>
<tr>
<td>
<a href="https://rjlipton.wordpress.com/2019/05/02/sedgewick-wins-an-award/sedgewick_1183631/" rel="attachment wp-att-15828"><img alt="" class="alignright  wp-image-15828" src="https://rjlipton.files.wordpress.com/2019/05/sedgewick_1183631.jpeg?w=200" width="200"/></a>
</td>
</tr>
<tr>
<td class="caption alignright"><font size="-2">[ ACM ]</font></td>
</tr>
</tbody>
</table>
<p>
Robert Sedgewick is the 2018 recipient of the ACM Outstanding Educator Award. </p>
<p>
Today we congratulate Bob on this wonderful honor.<br/>
<span id="more-15827"/></p>
<p>
The award is named after Karl Karlstrom. Years ago, he was an editor at the publishing house Prentice-Hall. To convey why the award was named for him, it may suffice to quote one nugget. This is “Fortune <a href="http://motd.ambians.com/quotes.php/name/linux_computers/toc_id/1-1-4/s/340">341</a>” from the old <tt>motd</tt> (message of the day) program which gave some humor or wisdom when you logged into UNIX/Linux:</p>
<blockquote><p><b> </b> <em> “I have travelled the length and breadth of this country, and have talked with the best people in business administration. I can assure you on the highest authority that data processing is a fad and won’t last out the year.”</em></p><em>
</em><p><em>
— Editor in charge of business books at Prentice-Hall publishers, responding to Karl V. Karlstrom (a junior editor who had recommended a manuscript on the new science of data processing), c. 1957 </em>
</p></blockquote>
<p>Karl K. had a knack for being right, you see.</p>
<p>
</p><p/><h2> Karl Stories </h2><p/>
<p/><p>
I recall Karl fondly. We mostly interacted when we were both attending some theory conference. I often found myself talking to him over a drink while we sat in a hotel bar. This was back, ages ago, when I did drink a beer or two. Karl was one we could count on to amuse and also—most importantly—pick up the bar tab. He had an expense account. The IEEE “Computer Pioneers” <a href="https://history.computer.org/pioneers/karlstrom.html">site</a> says this about him:</p>
<blockquote><p><b> </b> <em> Early computer science textbook editor who put Prentice-Hall in the forefront, but who lost heart when he learned that the best textbook criteria are short words, big type, wide margins, and colored illustrations. ACM named its education award after him. </em>
</p></blockquote>
<p>
</p><p/><h2> Bob Stories </h2><p/>
<p/><p>
The ACM award may be named for Karlstrom, but I suspect that many of the awardees, including Bob, never had the pleasure of meeting Karlstrom. Too bad. </p>
<p>
I believe we all know why Bob was selected to get this award. He has done some wonderful work in many aspects of education. He is best known for his series of Algorithms textbooks. I thought it might be fun to recall a couple of Sedgewick stories that have nothing to do with his main work.</p>
<p>
<img alt="{\bullet }" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cbullet+%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\bullet }"/> <i>A big result</i>. One day Bob grabbed me and told me that he had a wonderful result. This is when I was still at Princeton. I asked what was the breakthrough? He explained:</p>
<blockquote><p><b> </b> <em> I now can do arrows really well. Really. </em>
</p></blockquote>
<p/><p>
What? He explained that TeX and LaTeX did not do arrows well. This refers, of course, to arrows as in directed graphs or flow diagrams. Bob uses lots of diagrams, with lots of arrows, in his textbooks. He had worked hard to get a postscript hack that made arrows look great. Thus he could typeset an arrow so it looked perfect even when it touched another object. I listened and was unsure what to make of his claim. Was he losing it? He then showed me a print-out of some of his arrows. I have to say they really did look quite good.</p>
<p>
<img alt="{\bullet }" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cbullet+%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\bullet }"/> <i>A secret result</i>. Bob and I worked for a while on a front-end to TeX we called <i>notech</i>. The concept was to have the absolute minimum of commands, and have the notech system figure out what you mean. For example, in an earlier system for typesetting from Bell Labs, called <a href="https://en.wikipedia.org/wiki/Troff">Troff</a>, a new paragraph was marked by the command <img alt="{.PP}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B.PP%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{.PP}"/>. Thus</p>
<p>
This is part of a paragraph. .PP And this is the start of the next paragraph. </p>
<p>
This is ugly and TeX’s idea is much better. As you probably know the start of a new paragraph is marked by a blank line. No ugly command like <img alt="{.PP}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B.PP%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{.PP}"/>.</p>
<p>
What Bob and I did was to try and take this idea as far as possible. The system notech tried to guess line breaks, math displays, tables, verbatim for C code, text displays, and much more. It did this with out using commands for as much as possible. I used the system for years for all my papers and memos and notes. Eventually, I gave it up and switched to LaTeX like every one else.</p>
<p>
<img alt="{\bullet }" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cbullet+%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\bullet }"/> <i>A public result</i>. Bob also worked with me and my team in the 1980’s on systems for designing VLSI chips. One such paper was joint with Jacobo Valdes, Gopalakrishnan Vijayan, and Stephen North: <a href="https://dl.acm.org/citation.cfm?id=809246">VLSI Layout as Programming</a>. The trouble with this and related work is that it never took off; it never had as much impact as we thought it would. Oh well.</p>
<p>
</p><p/><h2> Open Problems </h2><p/>
<p/><p>
We wish Bob the best. May he be awarded many other prizes.</p>
<p/></font></font></div>
    </content>
    <updated>2019-05-03T04:32:02Z</updated>
    <published>2019-05-03T04:32:02Z</published>
    <category term="History"/>
    <category term="News"/>
    <category term="People"/>
    <category term="ACM"/>
    <category term="arrows"/>
    <category term="award"/>
    <category term="Sedgewick"/>
    <category term="TeX"/>
    <author>
      <name>rjlipton</name>
    </author>
    <source>
      <id>https://rjlipton.wordpress.com</id>
      <logo>https://s0.wp.com/i/buttonw-com.png</logo>
      <link href="https://rjlipton.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="https://rjlipton.wordpress.com" rel="alternate" type="text/html"/>
      <link href="https://rjlipton.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="https://rjlipton.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>a personal view of the theory of computation</subtitle>
      <title>Gödel’s Lost Letter and P=NP</title>
      <updated>2019-05-08T23:56:57Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>https://eccc.weizmann.ac.il/report/2019/066</id>
    <link href="https://eccc.weizmann.ac.il/report/2019/066" rel="alternate" type="text/html"/>
    <title>TR19-066 |  A Lower Bound for Sampling Disjoint Sets | 

	Thomas Watson</title>
    <summary>Suppose Alice and Bob each start with private randomness and no other input, and they wish to engage in a protocol in which Alice ends up with a set $x\subseteq[n]$ and Bob ends up with a set $y\subseteq[n]$, such that $(x,y)$ is uniformly distributed over all pairs of disjoint sets. We prove that for some constant $\varepsilon&gt;0$, this requires $\Omega(n)$ communication even to get within statistical distance $\varepsilon$ of the target distribution. Previously, Ambainis, Schulman, Ta-Shma, Vazirani, and Wigderson (FOCS 1998) proved that $\Omega(\sqrt{n})$ communication is required to get within $\varepsilon$ of the uniform distribution over all pairs of disjoint sets of size $\sqrt{n}$.</summary>
    <updated>2019-05-03T00:14:32Z</updated>
    <published>2019-05-03T00:14:32Z</published>
    <source>
      <id>https://eccc.weizmann.ac.il/</id>
      <author>
        <name>ECCC papers</name>
      </author>
      <link href="https://eccc.weizmann.ac.il/" rel="alternate" type="text/html"/>
      <link href="https://example.com/feeds/reports/" rel="self" type="application/atom+xml"/>
      <subtitle>Latest Reports published at https://eccc.weizmann.ac.il</subtitle>
      <title>ECCC - Reports</title>
      <updated>2019-05-08T23:56:43Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://11011110.github.io/blog/2019/05/02/playing-model-trains</id>
    <link href="https://11011110.github.io/blog/2019/05/02/playing-model-trains.html" rel="alternate" type="text/html"/>
    <title>Playing with model trains and calling it graph theory</title>
    <summary>You’ve probably played with model trains, for instance with something like the Brio set shown below.1 And if you’ve built a layout with a model train set, you may well have wondered: is it possible for my train to use all the parts of my track? Searching on tineye finds that this image was on Amazon in 2008. Presumably it was supplied to them by Brio? ↩</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>You’ve probably played with model trains, for instance with something like the <a href="https://en.wikipedia.org/wiki/Brio_(company)">Brio</a> set shown below.<sup id="fnref:fn"><a class="footnote" href="https://11011110.github.io/blog/2019/05/02/playing-model-trains.html#fn:fn">1</a></sup> And if you’ve built a layout with a model train set, you may well have wondered: is it possible for my train to use all the parts of my track?</p>

<p style="text-align: center;"><img alt="Brio train set" src="https://11011110.github.io/blog/assets/2019/brio-33133.jpg"/></p>

<p>For instance, in the layout shown in this image, if your train starts on the far right, moving downward, it will be stuck in a loop that it can never escape. There are no choice points where the train can switch to another track until it returns to the Y at the right, moving in the same direction. On the other hand, if you allow yourself to reverse the train, it can reverse back through the other entrance to the Y and reach the rest of the track. It’s also possible for a long-enough train to block itself, preventing it from escaping certain parts of the track that a short train could negotiate more easily.</p>

<p>My newest preprint, “Reconfiguring Undirected Paths” (with Demaine, Hesterberg, Jain, Lubiw, Uehara, and Uno, <a href="https://arxiv.org/abs/1905.00518">arXiv:1905.00518</a>), considers an abstract model for such problems, in which the train track is modeled as an undirected graph and the train is a simple path in the graph. You can slide the train by adding an edge to one end of the path and removing an edge from the other end; we don’t distinguish which end of the train is which, so it can slide in both directions. The vertices of the graph model points where you can choose which of several directions to slide the train. Because it’s an undirected graph, these are like the three-way and four-way junctions in the middle of the image (allowing the train to enter and exit along any pair of track segments) rather than the Y junctions at the far right (where a train that enters at one of the two top edges of the Y has to exit the bottom).</p>

<p>For instance, in a  grid graph, the different positions of a length- path and the ways that one position can shift into another can be visualized as the state space shown below.</p>

<p style="text-align: center;"><img alt="PSPACE-hardness reduction for path reconfiguration" src="https://11011110.github.io/blog/assets/2019/path-reconfig-states.svg"/></p>

<p>Testing whether a long train can slide from one position to another turns out to be PSPACE-complete, even on graphs of bounded bandwidth, by a reduction from <a href="https://en.wikipedia.org/wiki/Nondeterministic_constraint_logic">nondeterministic constraint logic</a>. Here’s an example of an NCL problem transformed by our reduction into a path-sliding problem:</p>

<p style="text-align: center;"><img alt="PSPACE-hardness reduction for path reconfiguration" src="https://11011110.github.io/blog/assets/2019/path-reconfig-redux.svg" width="80%"/></p>

<p>Our main results are a <a href="https://11011110.github.io/blog/2019/05/02/Parameterized complexity">fixed-parameter tractable algorithm</a> parameterized by train length (so it’s fast for short trains) and a linear time algorithm when the graph is a tree. Both cases are based on the same intuition, that the problem becomes easier if we can maneuver the train onto a long enough path. For the parameterized version, if the graph has a path twice as long as the train that can be reached from the starting position of the train, and another long path that can reach the ending position, then we can maneuver the train onto the first long path, send it on an express route directly from the first long path to the second one, and then maneuver it from there into its final position. On the other hand, until we find these long paths, we can restrict our attention to a subgraph with no long paths; this implies that it has bounded <a href="https://11011110.github.io/blog/2019/05/02/Tree-depth">tree-depth</a> and makes searching within the subgraph easy. The linear time tree algorithm similarly involves a lot of back-and-forth maneuvering of the train to free up longer and longer segments of it until the whole train is freed to move from the start to the goal.</p>

<p>A shorter version of our paper will appear at <a href="http://wads.org/">WADS</a> this summer.
While it was in submission to WADS, a related preprint appeared on arXiv: “The Parameterized Complexity of Motion Planning for Snake-Like Robots”, by Gupta, Sa’ar, and Zehavi (<a href="https://arxiv.org/abs/1903.02445">arXiv:1903.02445</a>). They show that for a graph-theoretic model of the <a href="https://en.wikipedia.org/wiki/Snake_(video_game_genre)">Snake video game</a>, getting the snake from one position to another is fixed-parameter tractable in the length of the snake. For this problem, snakes are again paths in graphs, but they can move only in one direction, and the techniques they use to prove fixed-parameter tractability involve sparsifying the state space instead of maneuvering into long paths. <a href="https://11011110.github.io/blog/2018/08/06/congratulations-dr-gupta.html">Sid Gupta was my student</a> at UCI before taking his current postdoc in Israel, but I haven’t talked to him about this, so I think their work must be independent and its appearance at about the same time a coincidence.</p>

<div class="footnotes">
  <ol>
    <li id="fn:fn">
      <p>Searching on tineye finds that this image was on Amazon in 2008. Presumably it was supplied to them by Brio? <a class="reversefootnote" href="https://11011110.github.io/blog/2019/05/02/playing-model-trains.html#fnref:fn">↩</a></p>
    </li>
  </ol>
</div>

<p>(<a href="https://mathstodon.xyz/@11011110/102029697142872437">Discuss on Mastodon</a>)</p></div>
    </content>
    <updated>2019-05-02T19:03:00Z</updated>
    <published>2019-05-02T19:03:00Z</published>
    <author>
      <name>David Eppstein</name>
    </author>
    <source>
      <id>https://11011110.github.io/blog/feed.xml</id>
      <author>
        <name>David Eppstein</name>
      </author>
      <link href="https://11011110.github.io/blog/feed.xml" rel="self" type="application/atom+xml"/>
      <link href="https://11011110.github.io/blog/" rel="alternate" type="text/html"/>
      <subtitle>Geometry, graphs, algorithms, and more</subtitle>
      <title>11011110</title>
      <updated>2019-05-04T16:39:59Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-3722233.post-3204953698007493895</id>
    <link href="https://blog.computationalcomplexity.org/feeds/3204953698007493895/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="https://blog.computationalcomplexity.org/2019/05/the-next-chapter.html#comment-form" rel="replies" type="text/html"/>
    <link href="https://www.blogger.com/feeds/3722233/posts/default/3204953698007493895" rel="edit" type="application/atom+xml"/>
    <link href="https://www.blogger.com/feeds/3722233/posts/default/3204953698007493895" rel="self" type="application/atom+xml"/>
    <link href="https://blog.computationalcomplexity.org/2019/05/the-next-chapter.html" rel="alternate" type="text/html"/>
    <title>The Next Chapter</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div class="separator" style="clear: both; text-align: center;">
<a href="https://4.bp.blogspot.com/-R3cQu_-p5K8/XMhzxr-ZDrI/AAAAAAABnYQ/4tXefV5yICMHnD_U4g8QmFFftzHzeOWTQCLcBGAs/s1600/COS_stacked_blk_red.jpg" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="95" src="https://4.bp.blogspot.com/-R3cQu_-p5K8/XMhzxr-ZDrI/AAAAAAABnYQ/4tXefV5yICMHnD_U4g8QmFFftzHzeOWTQCLcBGAs/s320/COS_stacked_blk_red.jpg" width="320"/></a></div>
<div>
<br/></div>
I've <a href="https://news.iit.edu/stories/2019/05/lance-fortnow-designated-new-college-science-dean">accepted a position</a> as Dean of the <a href="https://science.iit.edu/">College of Science</a> at the Illinois Institute of Technology in Chicago starting in August. It's an exciting opportunity to really build up the sciences and computing in the city that I have spent the bulk of my academic career and grew to love.<br/>
<div>
<br/></div>
<div>
I had a fantastic time at Georgia Tech over the last seven years working with an incredible faculty, staff and students in the School of Computer Science. This is a special place and I enjoyed watching the school, the institute and the City of Atlanta grow and evolve.<br/>
<br/>
After I <a href="https://twitter.com/fortnow/status/1123644799825907712">tweeted</a> the news yesterday, Bill Cook reminded me that<br/>
<blockquote class="tr_bq">
Illinois Tech was the long-time home of Karl Menger, the first person to pose the problem of determining the complexity of the TSP. Now you can settle it!</blockquote>
I wouldn't bet on my settling the complexity of traveling salesman even if I didn't have a college to run. But it goes to remind us that wherever you go in life, P and NP will be right there waiting for you. </div></div>
    </content>
    <updated>2019-05-02T12:20:00Z</updated>
    <published>2019-05-02T12:20:00Z</published>
    <author>
      <name>Lance Fortnow</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/06752030912874378610</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-3722233</id>
      <category term="typecast"/>
      <category term="focs metacomments"/>
      <author>
        <name>Lance Fortnow</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/06752030912874378610</uri>
      </author>
      <link href="https://blog.computationalcomplexity.org/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="https://www.blogger.com/feeds/3722233/posts/default" rel="self" type="application/atom+xml"/>
      <link href="https://blog.computationalcomplexity.org/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <link href="https://www.blogger.com/feeds/3722233/posts/default?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml"/>
      <subtitle>Computational Complexity and other fun stuff in math and computer science from Lance Fortnow and Bill Gasarch</subtitle>
      <title>Computational Complexity</title>
      <updated>2019-05-08T16:36:29Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://gilkalai.wordpress.com/?p=12881</id>
    <link href="https://gilkalai.wordpress.com/2019/05/01/the-last-paper-of-catherine-renyi-and-alfred-renyi-counting-k-trees/" rel="alternate" type="text/html"/>
    <title>The last paper of Catherine Rényi and Alfréd Rényi: Counting k-Trees</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">A k-tree is a graph obtained as follows: A clique with k vertices is a k-tree. A k-tree with n+1 vertices is obtained from a k-tree with n-vertices by adding a new vertex and connecting it to all vertices of a … <a href="https://gilkalai.wordpress.com/2019/05/01/the-last-paper-of-catherine-renyi-and-alfred-renyi-counting-k-trees/">Continue reading <span class="meta-nav">→</span></a></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>A <em>k</em>-tree is a graph obtained as follows: A clique with <em>k</em> vertices is a <em>k</em>-tree. A <em>k</em>-tree with <em>n+1</em> vertices is obtained from a <em>k</em>-tree with n-vertices by adding a new vertex and connecting it to all vertices of a <em> k</em>-clique. There is a <a href="https://www.sciencedirect.com/science/article/pii/S0021980069801201">beautiful formula</a> by Beineke and Pippert (1969) for the number of <em>k</em>-trees with <em>n</em> labelled vertices. Their number is</p>
<p style="text-align: center;"><img alt="{{n} \choose {k}}(k(n-k)+1)^{n-k-2}." class="latex" src="https://s0.wp.com/latex.php?latex=%7B%7Bn%7D+%5Cchoose+%7Bk%7D%7D%28k%28n-k%29%2B1%29%5E%7Bn-k-2%7D.&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="{{n} \choose {k}}(k(n-k)+1)^{n-k-2}."/></p>
<p>If we count <strong>rooted</strong> <em>k</em>-trees where the root is a <em>k</em>-clique the formula becomes somewhat simpler.</p>
<p style="text-align: center;"><img alt="(k(n-k)+1)^{n-k-1}." class="latex" src="https://s0.wp.com/latex.php?latex=%28k%28n-k%29%2B1%29%5E%7Bn-k-1%7D.&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="(k(n-k)+1)^{n-k-1}."/></p>
<p>In 1972, when I was a teenage undergraduate student I was very interested in various extensions of Cayley’s formula for counting labeled trees. I thought about the question of finding a <a href="https://en.wikipedia.org/wiki/Pr%C3%BCfer_sequence">Prüfer code</a> for<em> k</em>-trees and  how to extend the results by Beineke and  Pippert when  for every clique of size <img alt="k-1" class="latex" src="https://s0.wp.com/latex.php?latex=k-1&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="k-1"/> in the <em>k</em>-tree we specify its “degree”, namely, the number of <em>k</em>-cliques containing it. (I will come back to the mathematics at the end of the post.) I thank Miki Simonovits for the photos and description and very helpful comments.</p>
<p><a href="https://gilkalai.files.wordpress.com/2019/03/lakeloui.jpg"><img alt="" class="alignnone size-full wp-image-17134" height="434" src="https://gilkalai.files.wordpress.com/2019/03/lakeloui.jpg?w=640&amp;h=434" width="640"/></a></p>
<p><strong><span style="color: #ff0000;">Above, Kató Renyi, Paul Turan, Vera Sós, and Paul Erdős ; below Kató, Vera, and Lea Schönheim. Pictures: Jochanan (Janos) Schönheim.</span></strong></p>
<p><a href="https://gilkalai.files.wordpress.com/2019/03/lakelouise69.jpg"><img alt="" class="alignnone size-full wp-image-17137" height="447" src="https://gilkalai.files.wordpress.com/2019/03/lakelouise69.jpg?w=640&amp;h=447" width="640"/></a></p>
<p> </p>
<p> </p>
<p><a href="https://gilkalai.files.wordpress.com/2015/04/renyi-turan-erdos.jpg"><img alt="renyi-turan-erdos" class="alignnone size-full wp-image-12883" src="https://gilkalai.files.wordpress.com/2015/04/renyi-turan-erdos.jpg?w=640"/></a></p>
<p><strong><span style="color: #ff0000;">From right, Rényi, Tur<b>á</b>n and Erdős and Grätzer. </span></strong></p>
<p> </p>
<p>While I was working on enumeration of <img alt="k" class="latex" src="https://s0.wp.com/latex.php?latex=k&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="k"/>-trees I came across  a paper by Catherine Rényi and Alfréd Rényi that did everything I intended to do and quite a bit more.</p>
<p><a href="https://gilkalai.files.wordpress.com/2019/04/rr5.png"><img alt="" class="alignnone size-large wp-image-17340" height="260" src="https://gilkalai.files.wordpress.com/2019/04/rr5.png?w=640&amp;h=260" width="640"/></a></p>
<p>What caught my eye was a heartbreaking footnote: when the paper was completed Catherine Rényi was no longer alive.</p>
<p><a href="https://gilkalai.files.wordpress.com/2019/04/rr2r.png"><img alt="" class="alignnone size-large wp-image-17341" height="172" src="https://gilkalai.files.wordpress.com/2019/04/rr2r.png?w=640&amp;h=172" width="640"/></a></p>
<p>The proceedings where the paper appeared were of a conference in combinatorics in Hungary in 1969. This was the first international conference in combinatorics that took place in Hungary.  The list of speakers consists of the best combinatorialists in the world and many young people including Laci Lovasz, Laci Babai, Endre Szemeredi, and many more who since then have become world-class  scientists.</p>
<p>Years later Vera Sós told me the story of Alfréd Rényi’s lecture at this conference, the first international conference in combinatorics that took place in Hungary:  “Kató died on August 23, on the day of arrival of the conference on “Combinatorial Theory and its Applications” (Balatonfured, August 24-29). Alfréd Renyi gave his talk (with the same title as the paper) on August 27 and his talk was longer than initially scheduled.  They proved the results in the paper just the week before the conference. The paper appeared in the proceedings  of the conference.”</p>
<p>Alfréd Renyi was one of the organizers of the conference and also served as one of the editors of the proceedings of the conference, which appeared in 1970. A few months after the conference, on February 1, 1970 Alfréd Rényi  died of a violent illness. The proceedings are dedicated to the memory of Catherine Rényi and Alfréd Rényi.</p>
<p> </p>
<p><a href="https://gilkalai.files.wordpress.com/2019/03/scan-19.jpg"><img alt="" class="alignnone size-full wp-image-17135" height="444" src="https://gilkalai.files.wordpress.com/2019/03/scan-19.jpg?w=640&amp;h=444" width="640"/></a></p>
<p><a href="https://gilkalai.files.wordpress.com/2019/03/scan-4.jpg"><img alt="" class="alignnone size-full wp-image-17136" height="445" src="https://gilkalai.files.wordpress.com/2019/03/scan-4.jpg?w=640&amp;h=445" width="640"/></a></p>
<p><a href="https://gilkalai.files.wordpress.com/2019/03/erdos-renyi.png"><img alt="" class="alignnone size-full wp-image-17138" height="426" src="https://gilkalai.files.wordpress.com/2019/03/erdos-renyi.png?w=640&amp;h=426" width="640"/></a></p>
<p>Two pictures showing Alfréd and Catherine Rényi and a picture of Alfred Rényi and Paul Erdős.</p>
<p> </p>
<p><a href="https://gilkalai.files.wordpress.com/2019/04/srrhe.png"><img alt="" class="alignnone size-full wp-image-17315" height="498" src="https://gilkalai.files.wordpress.com/2019/04/srrhe.png?w=640&amp;h=498" width="640"/></a></p>
<p>Repeating a picture from last-week <a href="https://gilkalai.wordpress.com/2019/04/21/the-random-matrix-and-more/">post</a>. From left: Sándor Szalai,  Catherine Rényi, Alfréd Rényi, András Hajnal and Paul Erdős (Matrahaza)</p>
<p>Going back to my story. I was 17 at the time and naturally I wondered if counting trees and similar things is what I want to do in my life. Shortly afterwards I went to the army. Without belittling the excitement of the army I quickly reached the conclusion that I prefer to count trees and to do similar things. My first result as a PhD student was another high dimensional extension of Cayley’s formula (mentioned in <a href="https://gilkalai.wordpress.com/2008/06/10/hellys-theorem-hypertrees-and-strange-enumeration-i/">this post</a> and a few subsequent posts).  The question of how to generalize both formulas for <img alt="k" class="latex" src="https://s0.wp.com/latex.php?latex=k&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="k"/>-trees and for my hypertrees is still an open problem. We know the objects we want to count,  we know what the outcome should be, and we know that we can cheat and use weighted counting, but still I don’t know how to make it work.</p>
<p>Some more comments on k-trees:</p>
<ol>
<li>Regarding the degree sequences for k-trees. You cannot specify the actual (k-2)-faces because those (in fact just the graph) determines the k-tree completely. So you need to count rooted k-trees and to specify the (k-2)-faces in terms of how they “grew” from the root.</li>
<li>The case that all degrees are 1 and 2 that correspond to paths for ordinary trees and to triangulating polygons with diagonals for 2-trees are precisely the stacked (k-1)-dimensional polytopes. This is a special case of the Renyi &amp; Renyi formula that was also <a href="https://link.springer.com/article/10.1007%2FBF02330563?LI=true"> found, with a different proof,</a> by Beineke and Pippert.</li>
<li>It is  unlikely that there would be a matrix-tree formula for k-trees since telling  if a graph contains a 2-tree  is known to be NP complete. See <a href="https://mathoverflow.net/questions/281848/spanning-k-trees">this MO question</a>. Maybe some matrix-tree formulas are available when we start with special classes of graphs.</li>
<li>Regarding the general objects – those are simplicial complexes that are Cohen-Macaulay and their dual (blocker) is also Cohen-Macaulay.</li>
</ol>
<p>This post is just about a single paper of Catherine Rényi and Alfréd Rényi mainly through my eyes from 45 years ago. Catherine Rényi’s  main interest originally was  Number theory, she was a student of Turàn, and soon she became  interested in the theory of Complex Analytic Functions. Alfréd Rényi was a student of Frigyes Riesz and he is known for many contributions in number theory, graph theory and combinatorics and primarily in probability theory.  Alfréd Rényi wrote several papers about enumeration of trees, and this joint paper was Catherine Rényi ‘s first paper on this topic.</p></div>
    </content>
    <updated>2019-05-01T14:19:17Z</updated>
    <published>2019-05-01T14:19:17Z</published>
    <category term="Combinatorics"/>
    <category term="People"/>
    <category term="Alfr&#xE9;d R&#xE9;nyi"/>
    <category term="Catherine R&#xE9;nyi"/>
    <category term="k-trees"/>
    <author>
      <name>Gil Kalai</name>
    </author>
    <source>
      <id>https://gilkalai.wordpress.com</id>
      <logo>https://s0.wp.com/i/buttonw-com.png</logo>
      <link href="https://gilkalai.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="https://gilkalai.wordpress.com" rel="alternate" type="text/html"/>
      <link href="https://gilkalai.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="https://gilkalai.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Gil Kalai's blog</subtitle>
      <title>Combinatorics and more</title>
      <updated>2019-05-08T23:56:53Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>https://eccc.weizmann.ac.il/report/2019/065</id>
    <link href="https://eccc.weizmann.ac.il/report/2019/065" rel="alternate" type="text/html"/>
    <title>TR19-065 |  Derandomization from Algebraic Hardness: Treading the Borders | 

	Mrinal Kumar, 

	Ramprasad Saptharishi, 

	Noam Solomon</title>
    <summary>A hitting-set generator (HSG) is a polynomial map $Gen:\mathbb{F}^k \to \mathbb{F}^n$ such that for all $n$-variate polynomials $Q$ of small enough circuit size and degree, if $Q$ is non-zero, then $Q\circ Gen$ is non-zero. In this paper, we give a new construction of  such a HSG assuming that we have an explicit polynomial of sufficient hardness in the sense of approximative or border complexity.  Formally, we prove the following result over any characteristic zero field $\mathbb{F}$:

Suppose $P(z_1,\ldots, z_k)$ is an explicit $k$-variate degree $d$ polynomial that is not in the border of circuits of size $s$. Then, there is an explicit hitting-set generator $Gen_P:\mathbb{F}^{2k} \rightarrow \mathbb{F}^n$ such that  every non-zero $n$-variate degree $D$ polynomial $Q(x_1, x_2, \ldots, x_n)$ in the border of size $s'$ circuits satisfies $Q \neq 0 \Rightarrow Q \circ Gen_P \neq 0$, provided $n^{10k}d D s' \leq s$. 

This is the first HSG in the algebraic setting that yields a complete derandomization of polynomial identity testing (PIT) for general circuits from a suitable algebraic hardness assumption.

As a direct consequence, we show that even a slightly non-trivial explicit construction of hitting sets for polynomials in the border of constant-variate circuits implies a deterministic polynomial time algorithm for PIT. More precisely, we prove the following theorem:

Let $\delta &gt; 0$ be any constant and $k$ be a large enough constant. Suppose, for every $s \geq k$, there is an explicit hitting set of size $s^{k-\delta}$ for all degree $s$ polynomials in the border of $k$-variate size $s$ algebraic circuits. Then, there is an explicit hitting set of size $poly(s)$ for the border $s$-variate algebraic circuits of size $s$ and degree $s$. 

Unlike the prior constructions of such maps [NW94, KI04, AGS18, KST19], our construction is purely algebraic and does not rely on the notion of combinatorial designs.</summary>
    <updated>2019-05-01T05:54:23Z</updated>
    <published>2019-05-01T05:54:23Z</published>
    <source>
      <id>https://eccc.weizmann.ac.il/</id>
      <author>
        <name>ECCC papers</name>
      </author>
      <link href="https://eccc.weizmann.ac.il/" rel="alternate" type="text/html"/>
      <link href="https://example.com/feeds/reports/" rel="self" type="application/atom+xml"/>
      <subtitle>Latest Reports published at https://eccc.weizmann.ac.il</subtitle>
      <title>ECCC - Reports</title>
      <updated>2019-05-08T23:56:43Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://11011110.github.io/blog/2019/04/30/linkage</id>
    <link href="https://11011110.github.io/blog/2019/04/30/linkage.html" rel="alternate" type="text/html"/>
    <title>Linkage</title>
    <summary>Good article, terrible headline (). Bill Gasarch rants about several recent instances of clickbaity, inaccurate, and overhyped media coverage of theoretical computer science topics. I suspect the answer to his question “is it just our field?” is no.</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><ul>
  <li>
    <p><a href="https://blog.computationalcomplexity.org/2019/04/good-article-terrible-headline.html">Good article, terrible headline</a> (<a href="https://mathstodon.xyz/@11011110/101938798669973189"/>). Bill Gasarch rants about several recent instances of clickbaity, inaccurate, and overhyped media coverage of theoretical computer science topics. I suspect the answer to his question “is it just our field?” is no.</p>
  </li>
  <li>
    <p><a href="https://www.vox.com/science-and-health/2019/4/16/18311194/black-hole-katie-bouman-trolls">Vox on the sexist backlash against astronomer Katie Bouman</a> (<a href="https://mathstodon.xyz/@11011110/101942756338391262"/>, <a href="https://www.cnn.com/2019/04/12/us/andrew-chael-katie-bouman-black-hole-image-trnd/index.html">see also</a>), of black hole image fame, after she was cast by the media in the “lone genius” role typically reserved for men and untypical of how science actually happens.</p>
  </li>
  <li>
    <p><a href="https://aperiodical.com/2019/04/mathematical-sign-language-interview-with-dr-jess-boland/">Mathematical sign language</a> (<a href="https://mathstodon.xyz/@11011110/101950143529837988"/>). Hearing-impaired eletrical engineering researcher Jess Boland discovered that weren’t enough technical terms in British Sign Language to cover the mathematics she uses in her work, so she’s been creating new ones as well as promoting the ones BSL already had. Katie Steckles interviews her for <em>The Aperiodical</em>.</p>
  </li>
  <li>
    <p><a href="https://arxiv.org/abs/1804.05452">Regular polygon surfaces</a> (<a href="https://mathstodon.xyz/@11011110/101955536664219652"/>). Ian Alevy answers <a href="http://cs.smith.edu/~jorourke/TOPP/P72.html#Problem.72">Problem 72 of The Open Problems Project</a>: every topological sphere made of regular pentagons can be constructed by gluing regular dodecahedra together. You can also <a href="https://momath.org/mathmonday/the-paragons-system/">glue dodecahedra to get higher-genus surfaces</a>, but Alevy’s theorem doesn’t apply, so we don’t know whether all higher-genus regular-pentagon surfaces are formed that way.</p>
  </li>
  <li>
    <p><a href="https://www.insidehighered.com/news/2019/04/12/czech-president-blocks-professorships-academic-critics">Czech president Miloš Zeman “has repeatedly used presidential powers to block the professorships of political opponents”</a> (<a href="https://mathstodon.xyz/@11011110/101965701030220573"/>). Charles University is now suing to allow their promotions to go through.</p>
  </li>
  <li>
    <p><a href="https://arxiv.org/abs/1904.08845">Planar point sets determine many pairwise crossing segments</a> (<a href="https://mathstodon.xyz/@11011110/101968467896290245"/>). János Pach, Natan Rubin, and Gábor Tardos make significant progress on  whether every<br/>
 points in the plane have a large matching where all edges cross each other. A 1994 paper by Paul Erdős and half a dozen others only managed to prove this for “large” meaning . The new paper proves a much stronger bound,  (Ryan Williams’ favorite function).</p>
  </li>
  <li>
    <p><a href="https://randomascii.wordpress.com/2019/04/21/on2-in-createprocess/">Why asymptotics matters</a> (<a href="https://mathstodon.xyz/@11011110/101970781407484011"/>, <a href="https://news.ycombinator.com/item?id=19716673">via</a>): because if you don’t pay attention to it you get problems like this slow quadratic-time process creation bug in Windows 10.</p>
  </li>
  <li>
    <p><a href="https://mathstodon.xyz/@jsiehler/101982200745112808">Snap cube puzzle</a>. The cubes have one peg and five holes; how many ways can you snap them into a connected  block with no pegs showing? See link in discussion thread for spoilers.</p>
  </li>
  <li>
    <p>There’s lots of reasons to be unenthusiastic about newly-official-presidential-candidate Biden involving multiple instances of poor treatment of African-Americans and women, but here’s another more techy reason: <a href="https://www.pastemagazine.com/articles/2019/04/biden-to-attend-fundraiser-hosted-by-comcast-blue.html">his first major fundraiser as a candidate closely involves anti-net-neutrality lobbyists from Comcast</a> (<a href="https://mathstodon.xyz/@11011110/101987719804605064"/>).</p>
  </li>
  <li>
    <p><a href="https://adsabs.github.io/blog/transition-reminder">SAO/NASA Astrophysics Data System updates its user interface</a> (<a href="https://mathstodon.xyz/@11011110/101996739440443058"/>). <a href="http://adsabs.harvard.edu/">The ADS</a> is a useful database of papers in astronomy and related fields. From comments on their post, the new UI is very slow. It is <a href="http://adsabs.github.io/help/faq/">unusable without JavaScript</a>. And it <a href="https://en.wikipedia.org/wiki/Special:Diff/892128592">“sends the users’ personal identifying information to at least 5 third-party companies”</a>. This is progress?</p>
  </li>
  <li>
    <p><a href="https://mathoverflow.net/q/329910/440">I ask for a reference for an easy fact about divisibility representations of partial orders</a> (<a href="https://mathstodon.xyz/@11011110/102002516978139958"/>). The MathOverflow community isn’t very helpful, preferring instead to simultaneously complain that it’s too trivial and explain why it’s true to me as if I didn’t already say in my question that I thought it was trivial.`</p>
  </li>
  <li>
    <p><a href="https://mathstodon.xyz/@henryseg/101975738950740643">Cannon-Thurston maps for veering triangulations</a>, whatever those are. Henry Segerman posts some pretty pictures from his joint work with David Bachman and Saul Schleimer.</p>
  </li>
  <li>
    <p><a href="https://www.mathunion.org/fileadmin/CWM/Initiatives/CWMNewsletter1.pdf">Newsletter of the IMU Committee for Women</a> (<a href="https://aperiodical.com/2019/04/imu-committee-for-women-in-mathematics-now-has-a-newsletter/">via</a>). Includes an interview with Marie-Francoise Roy and the announcement of the book <em>World Women in Mathematics 2018</em>.</p>
  </li>
  <li>
    <p><a href="https://rjlipton.wordpress.com/2019/04/30/network-coding-yields-lower-bounds/">Network coding yields lower bounds</a> (<a href="https://mathstodon.xyz/@11011110/102018096543192991"/>). Lipton and Regan report on <a href="https://arxiv.org/abs/1902.10935">a new paper by Afshani, Freksen, Kamma, and Larsen</a> on lower bounds for multiplication. If algorithmically opening and recombining network messages never improves fractional flow, then  circuit size for multiplication is optimal. But the same lower bound holds for simpler bit-shifting operations, so it’s not clear how it could extend from circuits to bignum algorithms.</p>
  </li>
</ul></div>
    </content>
    <updated>2019-04-30T23:15:00Z</updated>
    <published>2019-04-30T23:15:00Z</published>
    <author>
      <name>David Eppstein</name>
    </author>
    <source>
      <id>https://11011110.github.io/blog/feed.xml</id>
      <author>
        <name>David Eppstein</name>
      </author>
      <link href="https://11011110.github.io/blog/feed.xml" rel="self" type="application/atom+xml"/>
      <link href="https://11011110.github.io/blog/" rel="alternate" type="text/html"/>
      <subtitle>Geometry, graphs, algorithms, and more</subtitle>
      <title>11011110</title>
      <updated>2019-05-04T16:39:59Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>https://eccc.weizmann.ac.il/report/2019/064</id>
    <link href="https://eccc.weizmann.ac.il/report/2019/064" rel="alternate" type="text/html"/>
    <title>TR19-064 |  Randomness and Intractability in Kolmogorov Complexity | 

	Igor Carboni Oliveira</title>
    <summary>We introduce randomized time-bounded Kolmogorov complexity (rKt), a natural extension of Levin's notion of Kolmogorov complexity from 1984. A string w of low rKt complexity can be decompressed from a short representation via a time-bounded algorithm that outputs w with high probability. 

This complexity measure gives rise to a decision problem over strings: MrKtP (The Minimum rKt Problem). We explore ideas from pseudorandomness to prove that MrKtP and its variants cannot be solved in randomized quasi-polynomial time. This exhibits a natural string compression problem that is provably intractable, even for randomized computations. Our techniques also imply that there is no n^{1-eps}-approximate algorithm for MrKtP running in randomized quasi-polynomial time. 

Complementing this lower bound, we observe connections between rKt, the power of randomness in computing, and circuit complexity. In particular, we present the first hardness magnification theorem for a natural problem that is unconditionally hard against a strong model of computation.</summary>
    <updated>2019-04-30T18:41:08Z</updated>
    <published>2019-04-30T18:41:08Z</published>
    <source>
      <id>https://eccc.weizmann.ac.il/</id>
      <author>
        <name>ECCC papers</name>
      </author>
      <link href="https://eccc.weizmann.ac.il/" rel="alternate" type="text/html"/>
      <link href="https://example.com/feeds/reports/" rel="self" type="application/atom+xml"/>
      <subtitle>Latest Reports published at https://eccc.weizmann.ac.il</subtitle>
      <title>ECCC - Reports</title>
      <updated>2019-05-08T23:56:43Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://rjlipton.wordpress.com/?p=15814</id>
    <link href="https://rjlipton.wordpress.com/2019/04/30/network-coding-yields-lower-bounds/" rel="alternate" type="text/html"/>
    <title>Network Coding Yields Lower Bounds</title>
    <summary>Practice leads theory Peyman Afshani, Casper Freksen, Lior Kamma, and Kasper Larsen have a beautiful new paper titled “Lower Bounds for Multiplication via Network Coding”. Today we will talk about how practical computing played a role in this theory research. The authors (AFKL) state this: In this work, we prove that if a central conjecture […]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>
<font color="#0044cc"><br/>
<em>Practice leads theory</em><br/>
<font color="#000000"/></font></p><font color="#0044cc"><font color="#000000">
<a href="https://rjlipton.files.wordpress.com/2019/04/akkl.jpg"><img alt="" class="alignright wp-image-15816" height="162" src="https://rjlipton.files.wordpress.com/2019/04/akkl.jpg?w=123&amp;h=162" width="123"/></a><p/><p>
Peyman Afshani, Casper Freksen, Lior Kamma, and Kasper Larsen have a beautiful new <a href="https://arxiv.org/abs/1902.10935">paper</a> titled “Lower Bounds for Multiplication via Network Coding”. </p><p>
Today we will talk about how practical computing played a role in this theory research.</p><p>
The authors (AFKL) state this:</p><blockquote><p><b> </b> <em> In this work, we prove that if a central conjecture in the area of network coding is true, then any constant degree boolean circuit for multiplication must have size <img alt="{\Omega(n \log n)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5COmega%28n+%5Clog+n%29%7D&amp;bg=e8e8e8&amp;fg=000000&amp;s=0" title="{\Omega(n \log n)}"/>, thus <s>almost</s> completely settling the complexity of multiplication circuits. </em>
</p></blockquote><p><span id="more-15814"/></p><p/><p>
We added the strikeout because of the <img alt="{O(n \log n)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BO%28n+%5Clog+n%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{O(n \log n)}"/> upper bound that we discussed recently <a href="https://rjlipton.wordpress.com/2019/03/29/integer-multiplication-in-nlogn-time/">here</a>.</p><p>
AFKL have conditionally solved a long standing open problem: “How hard is it to multiply two <img alt="{n}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bn%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{n}"/>-bit numbers?” Their proof shows that a conjecture from practice implies a circuit lower bound. This is rare: using a conjecture from practice, to solve a complexity open problem. We have used conjectures from many parts of mathematics, and from some parts of physics, to make progress, but drawing on experience with practical networking is strikingly fresh. </p><p>
</p><p/><h2> Integer Multiplication </h2><p/><p/><p>
The authors AFKL explain the history of the multiplication problem. We knew some of the story, but not all the delicious details.</p><blockquote><p><b> </b> <em> In 1960, Andrey Kolmogorov conjectured that the thousands of years old <img alt="{O(n^{2})}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BO%28n%5E%7B2%7D%29%7D&amp;bg=e8e8e8&amp;fg=000000&amp;s=0" title="{O(n^{2})}"/>-time algorithm is optimal and he arranged a seminar at Moscow State University with the goal of proving this conjecture. However only a week into the seminar, the student Anatoly Karatsuba came up with an <img alt="{O(n^{\log_{2}3}) \approx O(n^{1.585})}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BO%28n%5E%7B%5Clog_%7B2%7D3%7D%29+%5Capprox+O%28n%5E%7B1.585%7D%29%7D&amp;bg=e8e8e8&amp;fg=000000&amp;s=0" title="{O(n^{\log_{2}3}) \approx O(n^{1.585})}"/> time algorithm. The algorithm was presented at the next seminar meeting and the seminar was terminated. </em>
</p></blockquote><p/><p>
Ken and I wish we could have Kolmogorov’s luck, in one of our seminars. Partly because it would advance knowledge; partly because it would let us out of teaching. Sweet.</p><p>
The main result of AFKL is:</p><blockquote><p><b>Theorem 1</b> <em><a name="NC2mult"/> Assuming the Network Conjecture, every general boolean circuit that computes the product of two <img alt="{n}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bn%7D&amp;bg=e8e8e8&amp;fg=000000&amp;s=0" title="{n}"/>-bit integers has size order at least <img alt="{n\log n}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bn%5Clog+n%7D&amp;bg=e8e8e8&amp;fg=000000&amp;s=0" title="{n\log n}"/>. </em>
</p></blockquote><p/><p>
This says that the boolean complexity of multiplication is super-linear. No restriction of a bounded depth, no restriction on the operations allowed, no restrictions at all. Given our non-existent lower bounds this is remarkable. If it was unconditional, it would be a terrific result. But it still is a strong one. </p><p>
We will next explain what the Network Coding Conjecture (NCC) is. </p><p>
</p><p/><h2> Network Coding </h2><p/><p/><p>
One of the basic papers was authored by Rudolf Ahlswede, Ning Cai, Shuo-Yen Li, and Raymond Yeung <a href="http://www.inf.fu-berlin.de/lehre/WS11/Wireless/papers/CodAhlswede00.pdf">here</a>. The paper has close to ten thousand citations, which would be amazing for a theory paper.</p><p>
In basic networks each node can receive and send messages to and from other nodes. They can only move messages around—they are not allowed to peer into a message. The concept of <i>network coding</i> is to allow nodes also to decode and encode messages. Nodes can peer into messages and create new ones. The goal, of course, is to decrease the time required to transmit information through the network.</p><p>
The following example combines figures from a 2004 <a href="http://www.eecg.utoronto.ca/~bli/papers/allerton04.pdf">paper</a> by Zongpeng Li and Baochun Li which formulated the NCC. At left is a situation where two senders, <img alt="{S_1}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BS_1%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{S_1}"/> with an <img alt="{n}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bn%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{n}"/>-bit message <img alt="{a}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Ba%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{a}"/> and <img alt="{S_2}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BS_2%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{S_2}"/> with an <img alt="{n}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bn%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{n}"/>-bit message <img alt="{b}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bb%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{b}"/>, wish to transmit to respective receivers <img alt="{T_1}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BT_1%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{T_1}"/> and <img alt="{T_2}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BT_2%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{T_2}"/>. The network’s links are one-way as shown, with two intermediate nodes <img alt="{A}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BA%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{A}"/> and <img alt="{B}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BB%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{B}"/>, and each link can carry <img alt="{n}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bn%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{n}"/> bits at any one time.</p><p/><p><br/>
<a href="https://rjlipton.files.wordpress.com/2019/04/flowfigures.png"><img alt="" class="aligncenter wp-image-15815" height="115" src="https://rjlipton.files.wordpress.com/2019/04/flowfigures.png?w=500&amp;h=115" width="500"/></a></p><p/><p><br/>
If <img alt="{a}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Ba%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{a}"/> and <img alt="{b}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bb%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{b}"/> are black-boxes that must be kept entire, there is no way to solve this in three time steps. But if the nodes can read messages and do lightweight computations, then the middle diagram gives a viable solution. Node <img alt="{A}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BA%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{A}"/> reads <img alt="{a}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Ba%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{a}"/> and <img alt="{b}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bb%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{b}"/> and on-the-fly transmits their bitwise exclusive-or to node <img alt="{B}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BB%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{B}"/>. Node <img alt="{B}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BB%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{B}"/> relays this to each receiver, who has also received the other party’s message directly. The receivers can each do a final exclusive-or to recover the messages intended for them. </p><p>
The ability to look inside messages seems powerful, and there are networks where it helps even more dramatically. Incidentally, as <a href="https://en.wikipedia.org/wiki/Linear_network_coding">noted</a> by Wikipedia, the exclusive-or trick was anticipated in a 1978 <a href="https://ieeexplore.ieee.org/document/1455117">paper</a> showing how the two senders can exchange their messages <img alt="{a}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Ba%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{a}"/> and <img alt="{b}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bb%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{b}"/> by relaying them to a satellite which transmits <img alt="{a \oplus b}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Ba+%5Coplus+b%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{a \oplus b}"/> back to each.</p><p>
</p><p/><h2> The Conjecture </h2><p/><p/><p>
However, there is another solution if the links are bi-directional and messages can be broken in half. Sender <img alt="{S_1}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BS_1%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{S_1}"/> simply routes half of <img alt="{a}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Ba%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{a}"/> one way around the network and the other half the other way. Sender <img alt="{S_2}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BS_2%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{S_2}"/> does similarly. This is shown at far right. Each link never has more than <img alt="{n}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bn%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{n}"/> bits of total load and the three-step elapsed time is the same. Moreover, the link from <img alt="{A}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BA%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{A}"/> to <img alt="{B}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BB%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{B}"/> is not needed. This is just an undirected network commodity flow with fractional units.</p><p>
In fact, <i>no</i> example is known in an undirected network where encoding beats fractional routing. That is, the known network encoding rate is just the flow rate of the network. The network coding (NCC) conjecture is informally:</p><blockquote><p><b> </b> <em> <i>The coding rate is never better than the flow rate in undirected graphs</i>. </em>
</p></blockquote><p/><p>
The paper by Li and Li gave formal details and several equivalent statements. Quoting them:</p><blockquote><p><b> </b> <em> For undirected networks with integral routing, there still exist configurations that are feasible with network coding but infeasible with routing only. For undirected networks with fractional routing, we show that the potential of network coding to help increase throughput in a capacitied network is equivalent to the potential of network coding to increase bandwidth efficiency in an uncapacitied network. We conjecture that these benefits are non-existent. </em>
</p></blockquote><p>
</p><p/><h2> Good and Bad News </h2><p/><p/><p>
What has become of the NCC in the fifteen years since? Here’s how Ken and I see it:</p><p>
<img alt="{\bullet }" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cbullet+%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\bullet }"/> <i>The Good News</i>: The NCC helps solve long-standing open problems. Since this conjecture is widely believed this is impressive. Besides integer multiplication, NCC has been used to prove other lower bounds. For example, Larsen working with Alireza Farhadi, Mohammad Hajiaghayi, and Elaine Shi used it to <a href="https://arxiv.org/abs/1811.01313">prove</a> lower bounds on sorting with external memory. </p><p>
<img alt="{\bullet }" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cbullet+%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\bullet }"/> <i>The Bad News</i>: The NCC helps solve long-standing open problems. This suggests that this conjecture could be deep and hard to resolve. The boolean complexity of integer multiplication is a long standing open question. Since the NCC leads to a non-linear lower bound, perhaps proving this conjecture could be hopeless.</p><p>
I have mixed feelings about these lower bound results. They are impressive and shed light on hard open problems. But I wonder if the NCC could be wrong. There is a long <a href="https://rjlipton.wordpress.com/2010/06/19/guessing-the-truth/">history</a> in complexity theory where guesses of the form: </p><blockquote><p><b> </b> <em> <i>The obvious algorithm is optimal</i> </em>
</p></blockquote><p>have failed. The situation strikes us as resembling that of the (Strong) Exponential Time Hypothesis, in ways we <a href="https://rjlipton.wordpress.com/2015/06/01/puzzling-evidence/">discussed</a> four years ago. </p><p>
</p><p/><h2> How the New Paper Works </h2><p/><p/><p>
The authors AFKL did not know that an <img alt="{O(n\log n)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BO%28n%5Clog+n%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{O(n\log n)}"/> upper bound had been proved for integer multiplication when they posted their paper. They did, however, prove a stronger version of Theorem (<a href="https://rjlipton.wordpress.com/feed/#NC2mult">1</a>) for a problem with a known <img alt="{n\log n}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bn%5Clog+n%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{n\log n}"/> upper bound. This is to create circuits with <img alt="{n + \log_2 n}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bn+%2B+%5Clog_2+n%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{n + \log_2 n}"/> input gates and <img alt="{2n}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B2n%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{2n}"/> output gates that given <img alt="{x}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x}"/> and a binary number <img alt="{\ell \leq n = |x|}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cell+%5Cleq+n+%3D+%7Cx%7C%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\ell \leq n = |x|}"/> output the string <img alt="{y}" class="latex" src="https://s0.wp.com/latex.php?latex=%7By%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{y}"/> whose bits <img alt="{n-\ell}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bn-%5Cell%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{n-\ell}"/> through <img alt="{2n-\ell-1}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B2n-%5Cell-1%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{2n-\ell-1}"/> equal <img alt="{x}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x}"/>, with other bits <img alt="{0}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B0%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{0}"/>. A conditional lower bound on this <i>shift</i> task implies the same for multiplication, since the shift is the same as multiplication by <img alt="{2^\ell}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B2%5E%5Cell%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{2^\ell}"/>. </p><blockquote><p><b>Theorem 2</b> <em><a name="NC2shift"/> Assuming the NCC, circuits for the shift task need size order <img alt="{n\log n}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bn%5Clog+n%7D&amp;bg=e8e8e8&amp;fg=000000&amp;s=0" title="{n\log n}"/>. </em>
</p></blockquote><p/><p>
The proof is disarmingly elementary: The input <img alt="{x}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x}"/> gives <img alt="{n}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bn%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{n}"/> “senders” and each value of <img alt="{\ell}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cell%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\ell}"/> creates a different set of <img alt="{n}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bn%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{n}"/> “receivers.” With a circuit <img alt="{C}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BC%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{C}"/> fixed, they show one can fix a shift <img alt="{\ell_0}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cell_0%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\ell_0}"/> so that the average distance from sender to receiver in an undirected multi-commodity flow is <img alt="{\Omega(\log n)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5COmega%28%5Clog+n%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\Omega(\log n)}"/>, giving <img alt="{\Omega(n\log n)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5COmega%28n%5Clog+n%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\Omega(n\log n)}"/> total flow. If <img alt="{C}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BC%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{C}"/> achieves smaller size, then it represents a counterexample to the NCC. </p><p>
Pretty neat—this is half a page in the paper. The paper proves more intricate results relating to conjectures by Les Valiant about Boolean circuits of bounded fan-in and <img alt="{O(\log n)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BO%28%5Clog+n%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{O(\log n)}"/> depth that compute permutations and their reduction to depth-3 circuits of unbounded fan-in. This also may extend to the sorting/shifting problem Ken wrote about long ago in a guest <a href="https://blog.computationalcomplexity.org/2007/07/concrete-open-problem.html">post</a> for Lance Fortnow and Bill Gasarch’s blog.</p><p>
</p><p/><h2> Open Problems </h2><p/><p/><p>
Is the NCC true? Can it be proved for some interesting classes of graphs? I believe it is known for tiny size graphs of at most six nodes. What about, for example, planar graphs?</p><p>
[inserted “conditionally” before “solved” in intro]<br/>
[Fixed AFKL typos]</p><table class="image alignright">











































</table></font></font></div>
    </content>
    <updated>2019-04-30T13:27:11Z</updated>
    <published>2019-04-30T13:27:11Z</published>
    <category term="algorithms"/>
    <category term="All Posts"/>
    <category term="History"/>
    <category term="Ideas"/>
    <category term="News"/>
    <category term="Open Problems"/>
    <category term="Proofs"/>
    <category term="Results"/>
    <category term="trick"/>
    <category term="Casper Freksen"/>
    <category term="circuits"/>
    <category term="communication complexity"/>
    <category term="conjecture"/>
    <category term="integer multiplication"/>
    <category term="Kasper Larsen"/>
    <category term="Lior Kamma"/>
    <category term="lower bounds"/>
    <category term="network coding"/>
    <category term="Peyman Afshani"/>
    <category term="reduction"/>
    <author>
      <name>RJLipton+KWRegan</name>
    </author>
    <source>
      <id>https://rjlipton.wordpress.com</id>
      <logo>https://s0.wp.com/i/buttonw-com.png</logo>
      <link href="https://rjlipton.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="https://rjlipton.wordpress.com" rel="alternate" type="text/html"/>
      <link href="https://rjlipton.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="https://rjlipton.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>a personal view of the theory of computation</subtitle>
      <title>Gödel’s Lost Letter and P=NP</title>
      <updated>2019-05-08T23:56:56Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://gradientscience.org/policy_gradients_pt3</id>
    <link href="http://gradientscience.org/policy_gradients_pt3" rel="alternate" type="text/html"/>
    <title>A Closer Look at Deep Policy Gradients (Part 3&amp;#58; Landscapes and Trust Regions)</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This post is the last of a three part series about our recent paper: “<a href="https://arxiv.org/abs/1811.02553">Are Deep
Policy Gradient Algorithms Truly Policy Gradient
Algorithms?</a>” Today, we will analyze agents’
reward landscapes as well as try to understand to what extent, and by what mechanisms,
our agents enforce so-called <i>trust regions</i>.</p>

<p>First, a quick recap (it’s been a while!):</p>
<ul>
  <li>
    <p>In our <a href="https://gradientscience.org/policy_gradients_pt1">first post</a>, we outlined the
RL framework and introduced policy gradient algorithms. We saw that
auxiliary optimizations hidden in the implementation details of RL algorithms
drastically impact performance. These findings highlighted the need for a more
fine-grained analysis of how algorithms really operate.</p>
  </li>
  <li>
    <p>In our <a href="https://gradientscience.org/policy_gradients_pt2">second post</a>, we zoomed in on
three algorithms: trust region policy optimization (TRPO), proximal policy
optimization (PPO), and an algorithm we called “PPO-M.” PPO-M is the core PPO
algorithm exactly as described in the <a href="https://arxiv.org/abs/1707.06347">original
paper</a>, without any of the auxiliary
optimizations. Using these methods as a test-bed, we studied two core
primitives of the policy gradient framework: gradient estimation and value
prediction.</p>
  </li>
</ul>

<p>Our discussion today begins where we left off in our second post. Recall that
last time we studied the variance of the gradient estimates our algorithms use
to maximize rewards. We found (among other things) that, despite high variance, algorithm steps were
still (very slightly) correlated with the actual, “true” gradient of the reward.
However, how good was this true gradient to begin with? After all, a fundamental
assumption of the whole policy gradient framework is that our gradient steps actually point in a direction (in policy
parameter space) that increases the reward. Is this indeed so in practice?</p>

<h2 id="optimization-landscapes">Optimization Landscapes</h2>
<p>Recall from our <a href="https://gradientscience.org/policy_gradients_pt1">first post</a> that
policy gradient methods treat reward maximization as a zeroth-order optimization
problem. That is, they maximize the objective by applying first order methods
with finite sample gradient estimates of the form:</p>



<p>Here,  represents the cumulative reward of a trajectory , where
 is sampled from the distribution of trajectories induced by the current
policy . We let  represent an easily computable
function of  that is an unbiased estimator of the gradient of the reward
(seen on the left hand side)—for more details see <a href="https://gradientscience.org/policy_gradients_pt1/#rl-with-policy-gradients">our previous post</a>.
Finally, we denote by  the number of trajectories used to estimate the
gradient.</p>

<p>An important point is, however, that instead of following the gradients of the cumulative reward (as
suggested by the above equation), the algorithms we analyze actually use a
<i>surrogate reward</i> at each step. The surrogate reward is a function of the
collected trajectories that is meant to locally approximate the true reward,
while providing other benefits such as easier computation and a smoother
optimization landscape. Consequently, at each step these algorithms maximize the
surrogate rewards  instead of following the gradient of the
true reward .</p>

<p>A natural question to ask is: <i>do steps maximizing the surrogate reward
consistently increase policy returns?</i> To answer this, we will use
<i>landscape plots</i> as a tool for visualizing the landscape of returns
around a given policy :</p>

<p><img alt="Labeled diagram of optimization landscape plot" src="https://gradientscience.org/images/rl/labeled_landscape.jpg"/></p>

<p>Here, for each point  in the plot,  and  specify a policy
 parameterized by</p>



<p>where  is the step computed by the studied algorithm. (Note that
we include the random Gaussian  direction to visualize how
“important” the step direction is compared to a random baseline). The  axis
corresponds to the return attained by the policy , which we
denote by .</p>

<p>Now, when we make this plot for a random  (corresponding to a randomly
initialized policy network), everything looks as expected:</p>

<p><img alt="Landscape for randomly initialized network" src="https://gradientscience.org/images/rl/step_0_landscape.jpg"/></p>

<p>That is, the return increases significantly more quickly along the step direction than in
the random direction. However, repeating these landscape experiments at later
iterations, we find a more surprising picture: going in the step direction
actually <i>decreases</i> the average cumulative reward obtained by the resulting
agent!</p>

<p><img alt="Landscape for trained networks" src="https://gradientscience.org/images/rl/landscape_step_150_300_450.jpg"/></p>

<p>So what exactly is going on here? The steps computed by these algorithms are
estimates of the gradient of the reward, so it is unexpected that the reward
plateaus (or in some cases decreases!) along this direction.</p>

<p>We find that the
answer lies in a <i>misalignment</i> of the true reward and the surrogate. Specifically, while
the steps taken do correspond to an improvement in the surrogate problem, they
do <i>not</i> always correspond to a similar improvement in the true return.
Here are the same graphs as above shown again, this time with the corresponding
optimization landscapes of the <i>surrogate loss</i>
<sup><a href="https://gradientscience.org/feed.xml#footnote1">1</a></sup>:</p>
<div class="footnote">
<sup><a id="footnote1">1</a></sup>All of the landscapes we plot in this post are for PPO; we have (similar)
results for TRPO in <a href="https://arxiv.org/abs/1811.02553">our paper</a>.
</div>

<p><img alt="Surrogate vs real landscape" src="https://gradientscience.org/images/rl/surrogate_vs_real_landscape.jpg"/></p>

<!-- The surrogate reward landscape misalignment is further complicated by the fact -->
<!-- that all of the rewards plotted in the landscapes we’ve seen so far are computed with -->
<!-- many, many more samples than an algorithm would ever collect at a single step in -->
<!-- practice.  -->

<p>To make matters worse, we find that in the low sample regime that policy
gradient methods actually operate in, it is hard to even <i>discern</i> directions of
improvement in the true reward landscape. (In all the plots above,
we use orders of magnitude more samples than an agent would ever see in practice
at a single step.) In the plot below, we visualize reward landscapes while
varying the number of samples used to estimate the expected return of a policy
:</p>

<p><img alt="Surrogate vs real landscape" src="https://gradientscience.org/images/rl/landscape_conc.jpg"/></p>

<p>In contrast to the smooth landscape we see on the right and in the plots above,
the reward landscape actually accessible to the model is jagged and poorly behaved.
This landscape makes it thus near-impossible for an agent to distinguish between good
and bad points in its relevant sample regime, even when the true underlying
landscape is fairly well-behaved!</p>

<p>Overall, our investigation into the optimization landscape of policy gradient algorithms
reveals that (a) the surrogate reward function is often misaligned with the
underlying true return of the policy, and (b) in the relevant sample regime, it
is hard to distinguish between “good” steps and “bad” steps, even when looking at the true reward
landscape. As always, however, <i>none of this stops the agents from training
and continually improving reward in the average sense</i>. This raises some
key questions about the landscape of policy optimization:</p>

<ul>
  <li>Given that the function we actually optimize is so often misaligned with the
underlying rewards, how is it that agents continually improve?</li>
  <li>Can we explain or link the local behaviour we observe in the landscape with a
more global view of policy optimization?</li>
  <li>How do we ensure that the reward landscape is navigable? And, more generally,
what is the best way to navigate it?</li>
</ul>

<h2 id="trust-regions">Trust Regions</h2>
<p>Let us now turn our attention to another important notion in the popular policy gradient algorithms: that of the <i>trust region</i>. 
Recall that a convenient way to think about our training process is to view it as a series of policy parameter iterates:</p>



<p>An important aspect of this process is ensuring that the steps we take don’t
lead us outside of the region (of parameter space) where the samples we
collected are informative. Intuitively, if we collect samples at a given set of
policy parameters , there is no reason to expect that these samples
should tell us about the performance of a new set of parameters that is far away
from .</p>

<p>Thus, in order to ensure that gradient steps are predictive, classical
algorithms like the 
<a href="http://www.cs.cmu.edu/~./jcl/papers/aoarl/Final.pdf">conservative policy update</a> 
employ update schemes that constrain the probability distributions induced by 
successive policy parameters.  The <a href="https://arxiv.org/abs/1502.05477">TRPO paper</a> 
in particular showed 
that one can 
guarantee monotonic policy improvement with each step by solving a surrogate problem of the following form:</p>



<p>The second, “penalty” term in the above objective, referred to as the <i>trust region</i> penalty, is a
critical component of modern policy gradient algorithms. TRPO, one of the
algorithms we study, proposes a relaxation of \eqref{eq:klpen} that
instead imposes a hard constraint on the
<i>mean</i> KL divergence<sup><a href="https://gradientscience.org/feed.xml#footnote2">2</a></sup>
 (estimated using the empirical samples we obtain):</p>



<div class="footnote">
<sup><a id="footnote2">2</a></sup>It's worth noting that 
<a href="https://arxiv.org/abs/1705.10528">a
recent paper</a> showed that under some conditions, mean KL is actually
sufficient.
</div>

<p>In other words, we try to ensure that the <i>average</i> distance between 
conditional probability distributions is small. 
Finally, PPO approximates the mean KL bound of TRPO by attempting to
constrain a <i>ratio</i> between successive conditional probability
distributions, instead of the KL divergence. The exact mechanism for
enforcing this is shown in the 
box below. Intuitively, however, what PPO does is just throw away
(i.e. get no gradient signal from) the
rewards incurred from any state-action pair such that:</p>



<p>where  is a user-chosen hyperparameter.</p>

<section class="container">
<div>
<div class="checkboxdiv">
<input id="ac-1" name="accordion-1" type="checkbox"/>
<label for="ac-1"><span class="fas fa-chevron-right" id="titlespan"/> <strong>The PPO update step</strong> (Click to expand)</label>
<article class="small">
<i>Note that the following is only for interested readers and is unessential 
for reading the rest of the blog post.</i> <br/> <br/>

The exact update used by PPO is as follows, where $\widehat{A}_\pi$ is
the <a href="https://arxiv.org/abs/1506.02438">generalized advantage 
estimate</a>:
$$
\begin{array}{c}{\max _{\theta} \mathbb{E}_{\left(s_{t}, a_{t}\right) \sim \pi}\left[\min \left(\operatorname{clip}\left(\rho_{t}, 1-\varepsilon, 1+\varepsilon\right) \widehat{A}_{\pi}\left(s_{t}, a_{t}\right), \rho_{t} \widehat{A}_{\pi}\left(s_{t}, a_{t}\right)\right)\right]} \\ {\text{where }\ \ \rho_{t}=\frac{\pi_{\theta}\left(a_{t} | s_{t}\right)}{\pi\left(a_{t} | s_{t}\right)}}\end{array}
$$
As described in the main text, this intuitively corresponds to throwing
away (i.e. getting no gradient signal) from state-action pairs where the
ratio of conditional probabilities between successive policies is too high.
</article>
</div>
</div>
</section>
<p><br/></p>

<p>To recap, there is a theoretically motivated algorithm \eqref{eq:klpen} which
constrains maximum KL. This motivates TRPO’s bound on
mean KL in \eqref{eq:trpotrust}, which in turn motivates the 
ratio-based bound of PPO (shown in the box). This chain of approximations might 
lead us to ask: <i>how well do these algorithms actually maintain trust regions</i>?</p>

<p>We first plot the mean KL divergence between successive policies for each
algorithm:
<img src="https://gradientscience.org/images/rl/meankl_trust.jpg" style="width: 50%;"/>
<br/></p>

<p>TRPO seems to constrain this very well
<a href="https://gradientscience.org/feed.xml#footnote3"><sup>3</sup></a>
! On the other hand, our two
varieties of the PPO algorithm paint a drastically different picture. Recall that we decided to
separately study two versions of PPO: PPO (based on a state-of-the-art implementation), 
and PPO-M, which we defined to be the core PPO algorithm without auxiliary optimizations. 
PPO <i>with</i> optimizations does quite well at maintaining a KL trust region, 
but PPO-M does not. This is unexpected: PPO’s main mechanism for maintaining the
trust region (the ratio clipping) is present in both methods—the
differences are only in auxiliary optimizations such as Adam learning rate annealing or
orthogonal initialization. As such, it is unclear exactly which mechanisms 
in PPO are responsible for maintaining the mean KL constraint.</p>

<div class="footnote">
<a id="footnote3"><sup>3</sup></a>
Note that this is somewhat unsurprising, since TRPO constrains this
directly in its optimization.
</div>

<p>In fact, we find that PPO’s inability to maintain a KL-based trust region 
is not entirely due to the looseness of its relaxation; it turns out that 
PPO does not even successfully enforce its <i>own</i> ratio-based trust region.
Below, we plot the maximum ratio \eqref{eq:ratio} between successive
policies for the three algorithms in question:</p>

<p><img src="https://gradientscience.org/images/rl/maxratio_trust.jpg" style="width: 50%;"/>
<br/></p>

<p>In the above, the dotted line represents , corresponding to the 
bound in \eqref{eq:ratio}—it looks like the max ratio is not kept at all! And once again, 
simply adding the auxiliary, code-level optimizations to PPO-M
yields <i>better</i> trust region
enforcement, despite the main clipping mechanism staying the same.
Indeed, it turns out that the
way that PPO enforces the ratio trust region does not actually keep the ratios
from becoming too large or too small. In fact, in our paper we show that there
are <i>infinite</i> optima of the optimization problem PPO solves to find each
step and only <i>one</i> of them enforces the intended trust region bound.</p>

<h2 id="wrapping-up">Wrapping Up</h2>

<p>Deep reinforcement learning algorithms are rooted in a well-grounded framework
of classical RL, and have shown great promise in practice. However, as we’ve
found in our three-part investigation, this framework often falls a little short
of explaining the behavior of these algorithms in practice.</p>

<p>Beyond just being disconcerting, this disconnect impedes our understanding of
why these algorithms succeed (or fail). It also poses a major barrier to
addressing key challenges facing deep RL, such as widespread brittleness and
poor reproducibility (as has been observed by our 
<a href="https://gradientscience.org/policy_gradients_pt1">study in part one</a> and
many others, e.g., [<a href="https://arxiv.org/abs/1709.06560">1</a>,
<a href="https://www.alexirpan.com/2018/02/14/rl-hard.html">2</a>,
<a href="http://amid.fish/reproducing-deep-rl">3</a>]).</p>

<p>To close this gap, we need to either develop methods that adhere more closely to
theory, or build theory that can capture what makes existing policy gradient
methods successful. In both cases, the first step is to precisely pinpoint where
theory and practice diverge. Even more broadly, our findings suggest that
developing a deep RL toolkit that is truly robust and reliable will require
moving beyond the current benchmark-driven evaluation model, to a more
fine-grained understanding of deep RL algorithms.</p></div>
    </summary>
    <updated>2019-04-30T00:00:00Z</updated>
    <published>2019-04-30T00:00:00Z</published>
    <source>
      <id>http://gradientscience.org/</id>
      <author>
        <name>Gradient Science</name>
      </author>
      <link href="http://gradientscience.org/" rel="alternate" type="text/html"/>
      <link href="http://gradientscience.org/feed.xml" rel="self" type="application/atom+xml"/>
      <subtitle>Research highlights and perspectives on machine learning and optimization from MadryLab.</subtitle>
      <title>gradient science</title>
      <updated>2019-05-08T23:57:18Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-3722233.post-6025884855508893027</id>
    <link href="https://blog.computationalcomplexity.org/feeds/6025884855508893027/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="https://blog.computationalcomplexity.org/2019/04/x-3-y-3-z-3-33-has-solution-in-z-and.html#comment-form" rel="replies" type="text/html"/>
    <link href="https://www.blogger.com/feeds/3722233/posts/default/6025884855508893027" rel="edit" type="application/atom+xml"/>
    <link href="https://www.blogger.com/feeds/3722233/posts/default/6025884855508893027" rel="self" type="application/atom+xml"/>
    <link href="https://blog.computationalcomplexity.org/2019/04/x-3-y-3-z-3-33-has-solution-in-z-and.html" rel="alternate" type="text/html"/>
    <title>x3   + y3 + z3 = 33  has a solution in Z. And its big!</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Consider the following problem:<br/>
<br/>
Given k, a natural number, determine if there exists x,y,z INTEGERS such that x<sup>3</sup>+y<sup>3</sup>+z<sup>3</sup>=k.<br/>
<br/>
It is not obvious that this problem is decidable (I think it is but have not been able to find an exact statement to that affect; however, if it was not solvable, I would know that, hence it is solvable. If you know a ref give it in the comments.)<br/>
<br/>
<br/>
If k≡ 4,5 mod 9  then mod arguments easily show there is no solution. <a href="https://arxiv.org/pdf/1604.07746.pdf">Huisman</a> showed that if k≤ 1000, k≡1,2,3,6,7,8 mod 9 and max(|x|,|y|,|z|) ≤ 10<sup>15</sup> and k is NOT one of<br/>
<br/>
33, 42, 114, 165, 390, 579, 627, 633, 732, 795, 906, 921, 975<br/>
<br/>
then there was a solution. For those on the list it was unknown.<br/>
<br/>
Recently <a href="https://people.maths.bris.ac.uk/~maarb/papers/cubesv1.pdf">Booker</a> (not Cory Booker, the candidate for prez, but Andrew Booker who I assume is a math-computer science person and is not running for prez) showed that<br/>
<br/>
x<sup>3</sup> + y<sup>3</sup> + z<sup>3</sup> =33<br/>
<br/>
DOES have a solution in INTEGERS. It is<br/>
<br/>
x= 8,866,128,975,287,528<br/>
<br/>
y=-8,778,405,442,862,239<br/>
<br/>
z=-2,736,111,468,807,040<br/>
<br/>
<br/>
does that make us more likely or less likely to think that<br/>
<br/>
x<sup>3</sup> + y<sup>3</sup> + z<sup>3</sup> =42<br/>
<br/>
has a solution? How about =114, etc, the others on the list?<br/>
<br/>
Rather than say what I think is true (I have no idea) here is what I HOPE is true: that the resolution of these problems leads to some mathematics of interest.<br/>
<br/>
<br/>
<br/>
<br/>
<br/></div>
    </content>
    <updated>2019-04-29T02:26:00Z</updated>
    <published>2019-04-29T02:26:00Z</published>
    <author>
      <name>GASARCH</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/03615736448441925334</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-3722233</id>
      <category term="typecast"/>
      <category term="focs metacomments"/>
      <author>
        <name>Lance Fortnow</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/06752030912874378610</uri>
      </author>
      <link href="https://blog.computationalcomplexity.org/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="https://www.blogger.com/feeds/3722233/posts/default" rel="self" type="application/atom+xml"/>
      <link href="https://blog.computationalcomplexity.org/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <link href="https://www.blogger.com/feeds/3722233/posts/default?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml"/>
      <subtitle>Computational Complexity and other fun stuff in math and computer science from Lance Fortnow and Bill Gasarch</subtitle>
      <title>Computational Complexity</title>
      <updated>2019-05-08T16:36:29Z</updated>
    </source>
  </entry>
</feed>
