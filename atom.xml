<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:planet="http://planet.intertwingly.net/" xmlns:indexing="urn:atom-extension:indexing" indexing:index="no"><access:restriction xmlns:access="http://www.bloglines.com/about/specs/fac-1.0" relationship="deny"/>
  <title>Theory of Computing Blog Aggregator</title>
  <updated>2019-05-01T05:21:48Z</updated>
  <generator uri="http://intertwingly.net/code/venus/">Venus</generator>
  <author>
    <name>Arnab Bhattacharyya, Suresh Venkatasubramanian</name>
    <email>arbhat+cstheoryfeed@gmail.com</email>
  </author>
  <id>http://www.cstheory-feed.org/atom.xml</id>
  <link href="http://www.cstheory-feed.org/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="http://www.cstheory-feed.org/" rel="alternate"/>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1904.13389</id>
    <link href="http://arxiv.org/abs/1904.13389" rel="alternate" type="text/html"/>
    <title>Categorical Feature Compression via Submodular Optimization</title>
    <feedworld_mtime>1556668800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/b/Bateni:MohammadHossein.html">MohammadHossein Bateni</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/c/Chen:Lin.html">Lin Chen</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/e/Esfandiari:Hossein.html">Hossein Esfandiari</a>, Thomas Fu, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/m/Mirrokni:Vahab_S=.html">Vahab S. Mirrokni</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/r/Rostamizadeh:Afshin.html">Afshin Rostamizadeh</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1904.13389">PDF</a><br/><b>Abstract: </b>In the era of big data, learning from categorical features with very large
vocabularies (e.g., 28 million for the Criteo click prediction dataset) has
become a practical challenge for machine learning researchers and
practitioners. We design a highly-scalable vocabulary compression algorithm
that seeks to maximize the mutual information between the compressed
categorical feature and the target binary labels and we furthermore show that
its solution is guaranteed to be within a $1-1/e \approx 63\%$ factor of the
global optimal solution. To achieve this, we introduce a novel
re-parametrization of the mutual information objective, which we prove is
submodular, and design a data structure to query the submodular function in
amortized $O(\log n )$ time (where $n$ is the input vocabulary size). Our
complete algorithm is shown to operate in $O(n \log n )$ time. Additionally, we
design a distributed implementation in which the query data structure is
decomposed across $O(k)$ machines such that each machine only requires $O(\frac
n k)$ space, while still preserving the approximation guarantee and using only
logarithmic rounds of computation. We also provide analysis of simple
alternative heuristic compression methods to demonstrate they cannot achieve
any approximation guarantee. Using the large-scale Criteo learning task, we
demonstrate better performance in retaining mutual information and also verify
competitive learning performance compared to other baseline methods.
</p></div>
    </summary>
    <updated>2019-05-01T01:45:22Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-05-01T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1904.13369</id>
    <link href="http://arxiv.org/abs/1904.13369" rel="alternate" type="text/html"/>
    <title>Constrained Orthogonal Segment Stabbing</title>
    <feedworld_mtime>1556668800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/b/Bandyapadhyay:Sayan.html">Sayan Bandyapadhyay</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/m/Mehrabi:Saeed.html">Saeed Mehrabi</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1904.13369">PDF</a><br/><b>Abstract: </b>Let $S$ and $D$ each be a set of orthogonal line segments in the plane. A
line segment $s\in S$ \emph{stabs} a line segment $s'\in D$ if $s\cap
s'\neq\emptyset$. It is known that the problem of stabbing the line segments in
$D$ with the minimum number of line segments of $S$ is NP-hard. However, no
better than $O(\log |S\cup D|)$-approximation is known for the problem. In this
paper, we introduce a constrained version of this problem in which every
horizontal line segment of $S\cup D$ intersects a vertical line. We study
several versions of the problem, depending on which line segments are used for
stabbing and which line segments must be stabbed. We obtain several NP-hardness
and constant approximation results for these versions. Our finding implies, the
problem remains NP-hard even under the extra assumption on input, but small
constant approximation algorithms can be designed.
</p></div>
    </summary>
    <updated>2019-05-01T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Geometry"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CG" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Geometry (cs.CG) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CG updates on arXiv.org</title>
      <updated>2019-05-01T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1904.13309</id>
    <link href="http://arxiv.org/abs/1904.13309" rel="alternate" type="text/html"/>
    <title>Phase Transition in Democratic Opinion Dynamics</title>
    <feedworld_mtime>1556668800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/g/G=auml=rtner:Bernd.html">Bernd GÃ¤rtner</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/z/Zehmakan:Ahad_N=.html">Ahad N. Zehmakan</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1904.13309">PDF</a><br/><b>Abstract: </b>Consider a community where initially, each individual is positive or negative
regarding a reform proposal. In each round, individuals gather randomly in
fixed rooms of different sizes, and all individuals in a room agree on the
majority opinion in the room (with ties broken in favor of the negative
opinion). The Galam model---introduced in statistical physics, specifically
sociophysics---approximates this basic random process. We approach the model
from a more mathematical perspective and study the threshold behavior and the
consensus time of the model.
</p></div>
    </summary>
    <updated>2019-05-01T01:25:29Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-05-01T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1904.13239</id>
    <link href="http://arxiv.org/abs/1904.13239" rel="alternate" type="text/html"/>
    <title>A Quantum-inspired Similarity Measure for the Analysis of Complete Weighted Graphs</title>
    <feedworld_mtime>1556668800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/b/Bai:Lu.html">Lu Bai</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/r/Rossi:Luca.html">Luca Rossi</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/c/Cui:Lixin.html">Lixin Cui</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/c/Cheng:Jian.html">Jian Cheng</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/h/Hancock:Edwin_R=.html">Edwin R. Hancock</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1904.13239">PDF</a><br/><b>Abstract: </b>We develop a novel method for measuring the similarity between complete
weighted graphs, which are probed by means of discrete-time quantum walks.
Directly probing complete graphs using discrete-time quantum walks is
intractable due to the cost of simulating the quantum walk. We overcome this
problem by extracting a commute-time minimum spanning tree from the complete
weighted graph. The spanning tree is probed by a discrete time quantum walk
which is initialised using a weighted version of the Perron-Frobenius operator.
This naturally encapsulates the edge weight information for the spanning tree
extracted from the original graph. For each pair of complete weighted graphs to
be compared, we simulate a discrete-time quantum walk on each of the
corresponding commute time minimum spanning trees, and then compute the
associated density matrices for the quantum walks. The probability of the walk
visiting each edge of the spanning tree is given by the diagonal elements of
the density matrices. The similarity between each pair of graphs is then
computed using either a) the inner product or b) the negative exponential of
the Jensen-Shannon divergence between the probability distributions. We show
that in both cases the resulting similarity measure is positive definite and
therefore corresponds to a kernel on the graphs. We perform a series of
experiments on publicly available graph datasets from a variety of different
domains, together with time-varying financial networks extracted from data for
the New York Stock Exchange. Our experiments demonstrate the effectiveness of
the proposed similarity measures.
</p></div>
    </summary>
    <updated>2019-05-01T01:25:53Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-05-01T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1904.13210</id>
    <link href="http://arxiv.org/abs/1904.13210" rel="alternate" type="text/html"/>
    <title>A Classification of Topological Discrepancies in Additive Manufacturing</title>
    <feedworld_mtime>1556668800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/b/Behandish:Morad.html">Morad Behandish</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/m/Mirzendehdel:Amir_M=.html">Amir M. Mirzendehdel</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/n/Nelaturi:Saigopal.html">Saigopal Nelaturi</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1904.13210">PDF</a><br/><b>Abstract: </b>Additive manufacturing (AM) enables enormous freedom for design of complex
structures. However, the process-dependent limitations that result in
discrepancies between as-designed and as-manufactured shapes are not fully
understood. The tradeoffs between infinitely many different ways to approximate
a design by a manufacturable replica are even harder to characterize. To
support design for AM (DfAM), one has to quantify local discrepancies
introduced by AM processes, identify the detrimental deviations (if any) to the
original design intent, and prescribe modifications to the design and/or
process parameters to countervail their effects. Our focus in this work will be
on topological analysis. There is ample evidence in many applications that
preserving local topology (e.g., connectivity of beams in a lattice) is
important even when slight geometric deviations can be tolerated. We first
present a generic method to characterize local topological discrepancies due to
material under- and over-deposition in AM, and show how it captures various
types of defects in the as-manufactured structures. We use this information to
systematically modify the as-manufactured outcomes within the limitations of
available 3D printer resolution(s), which often comes at the expense of
introducing more geometric deviations (e.g., thickening a beam to avoid
disconnection). We validate the effectiveness of the method on 3D examples with
nontrivial topologies such as lattice structures and foams.
</p></div>
    </summary>
    <updated>2019-05-01T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Geometry"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CG" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Geometry (cs.CG) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CG updates on arXiv.org</title>
      <updated>2019-05-01T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1904.13205</id>
    <link href="http://arxiv.org/abs/1904.13205" rel="alternate" type="text/html"/>
    <title>A Note on Computational Complexity of Dou Shou Qi</title>
    <feedworld_mtime>1556668800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/z/Zhang:Zhujun.html">Zhujun Zhang</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1904.13205">PDF</a><br/><b>Abstract: </b>Dou Shou Qi is a Chinese strategy board game for two players. We use a
EXPTIME-hardness framework to analyse computational complexity of the game. We
construct all gadgets of the hardness framework. In conclusion, we prove that
Dou Shou Qi is EXPTIME-complete.
</p></div>
    </summary>
    <updated>2019-05-01T01:25:18Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Complexity"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CC" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Complexity (cs.CC) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CC updates on arXiv.org</title>
      <updated>2019-05-01T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1904.13191</id>
    <link href="http://arxiv.org/abs/1904.13191" rel="alternate" type="text/html"/>
    <title>Case Study of the Proof of Cook's theorem - Interpretation of A(w)</title>
    <feedworld_mtime>1556668800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/l/Li:Yu.html">Yu Li</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1904.13191">PDF</a><br/><b>Abstract: </b>Cook's theorem is commonly expressed such as any polynomial time-verifiable
problem can be reduced to the SAT problem. The proof of Cook's theorem consists
in constructing a propositional formula A(w) to simulate a computation of TM,
and such A(w) is claimed to be CNF to represent a polynomial time-verifiable
problem w. In this paper, we investigate A(w) through a very simple example and
show that, A(w) has just an appearance of CNF, but not a true logical form.
This case study suggests that there exists the begging the question in Cook's
theorem.
</p></div>
    </summary>
    <updated>2019-05-01T01:20:26Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Complexity"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CC" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Complexity (cs.CC) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CC updates on arXiv.org</title>
      <updated>2019-05-01T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1904.13101</id>
    <link href="http://arxiv.org/abs/1904.13101" rel="alternate" type="text/html"/>
    <title>Efficiently Checking Actual Causality with SAT Solving</title>
    <feedworld_mtime>1556668800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/i/Ibrahim:Amjad.html">Amjad Ibrahim</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/r/Rehwald:Simon.html">Simon Rehwald</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/p/Pretschner:Alexander.html">Alexander Pretschner</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1904.13101">PDF</a><br/><b>Abstract: </b>Recent formal approaches towards causality have made the concept ready for
incorporation into the technical world. However, causality reasoning is
computationally hard; and no general algorithmic approach exists that
efficiently infers the causes for effects. Thus, checking causality in the
context of complex, multi-agent, and distributed socio-technical systems is a
significant challenge. Therefore, we conceptualize an intelligent and novel
algorithmic approach towards checking causality in acyclic causal models with
binary variables, utilizing the optimization power in the solvers of the
Boolean Satisfiability Problem (SAT). We present two SAT encodings, and an
empirical evaluation of their efficiency and scalability. We show that
causality is computed efficiently in less than 5 seconds for models that
consist of more than 4000 variables.
</p></div>
    </summary>
    <updated>2019-05-01T01:44:17Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-05-01T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1904.13077</id>
    <link href="http://arxiv.org/abs/1904.13077" rel="alternate" type="text/html"/>
    <title>Improved bounds for the excluded-minor approximation of treedepth</title>
    <feedworld_mtime>1556668800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b>Wojciech CzerwiÅski, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/n/Nadara:Wojciech.html">Wojciech Nadara</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/p/Pilipczuk:Marcin.html">Marcin Pilipczuk</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1904.13077">PDF</a><br/><b>Abstract: </b>Treedepth, a more restrictive graph width parameter than treewidth and
pathwidth, plays major role in the theory of sparse graph classes. We show that
there exists a constant $C$ such that for every integers $a,b \geq 2$ and a
graph $G$, if the treedepth of $G$ is at least $Cab\log a$, then the treewidth
of $G$ is at least $a$ or $G$ contains a subcubic (i.e., of maximum degree at
most $3$) tree of treedepth at least $b$ as a subgraph.
</p>
<p>As a direct corollary, we obtain that every graph of treedepth $\Omega(k^3
\log k)$ is either of treewidth at least $k$, contains a subdivision of full
binary tree of depth $k$, or contains a path of length $2^k$. This improves the
bound of $\Omega(k^5 \log^2 k)$ of Kawarabayashi and Rossman [SODA 2018].
</p>
<p>We also show an application for approximation algorithms of treedepth: given
a graph $G$ of treedepth $k$ and treewidth $t$, one can in polynomial time
compute a treedepth decomposition of $G$ of width $O(kt \log^{3/2} t)$. This
improves upon a bound of $O(kt^2 \log t)$ stemming from a tradeoff between
known results.
</p>
<p>The main technical ingredient in our result is a proof that every tree of
treedepth $d$ contains a subcubic subtree of treedepth at least $d \cdot \log_3
((1+\sqrt{5})/2)$.
</p></div>
    </summary>
    <updated>2019-05-01T01:50:25Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-05-01T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1904.13056</id>
    <link href="http://arxiv.org/abs/1904.13056" rel="alternate" type="text/html"/>
    <title>Query-to-communication lifting for BPP using inner product</title>
    <feedworld_mtime>1556668800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/c/Chattopadhyay:Arkadev.html">Arkadev Chattopadhyay</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/f/Filmus:Yuval.html">Yuval Filmus</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/k/Koroth:Sajin.html">Sajin Koroth</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/m/Meir:Or.html">Or Meir</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/p/Pitassi:Toniann.html">Toniann Pitassi</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1904.13056">PDF</a><br/><b>Abstract: </b>We prove a new query-to-communication lifting for randomized protocols, with
inner product as gadget. This allows us to use a much smaller gadget, leading
to a more efficient lifting. Prior to this work, such a theorem was known only
for deterministic protocols, due to Chattopadhyay et al. and Wu et al. The only
query-to-communication lifting result for randomized protocols, due to
G\"o\"os, Pitassi and Watson, used the much larger indexing gadget.
</p>
<p>Our proof also provides a unified treatment of randomized and deterministic
lifting. Most existing proofs of deterministic lifting theorems use a measure
of information known as thickness. In contrast, G\"o\"os, Pitassi and Watson
used blockwise min-entropy as a measure of information. Our proof uses the
blockwise min-entropy framework to prove lifting theorems in both settings in a
unified way.
</p></div>
    </summary>
    <updated>2019-05-01T01:22:58Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Complexity"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CC" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Complexity (cs.CC) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CC updates on arXiv.org</title>
      <updated>2019-05-01T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1904.13043</id>
    <link href="http://arxiv.org/abs/1904.13043" rel="alternate" type="text/html"/>
    <title>Estimating the Frequency of a Clustered Signal</title>
    <feedworld_mtime>1556668800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/c/Chen:Xue.html">Xue Chen</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/p/Price:Eric.html">Eric Price</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1904.13043">PDF</a><br/><b>Abstract: </b>We consider the problem of locating a signal whose frequencies are "off grid"
and clustered in a narrow band. Given noisy sample access to a function $g(t)$
with Fourier spectrum in a narrow range $[f_0 - \Delta, f_0 + \Delta]$, how
accurately is it possible to identify $f_0$? We present generic conditions on
$g$ that allow for efficient, accurate estimates of the frequency. We then show
bounds on these conditions for $k$-Fourier-sparse signals that imply recovery
of $f_0$ to within $\Delta + \tilde{O}(k^3)$ from samples on $[-1, 1]$. This
improves upon the best previous bound of $O\big( \Delta + \tilde{O}(k^5)
\big)^{1.5}$. We also show that no algorithm can do better than $\Delta +
\tilde{O}(k^2)$. In the process we provide a new $\tilde{O}(k^3)$ bound on the
ratio between the maximum and average value of continuous $k$-Fourier-sparse
signals, which has independent application.
</p></div>
    </summary>
    <updated>2019-05-01T01:43:32Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-05-01T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1904.13019</id>
    <link href="http://arxiv.org/abs/1904.13019" rel="alternate" type="text/html"/>
    <title>The Littlewood-Offord Problem for Markov Chains</title>
    <feedworld_mtime>1556668800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/r/Rao:Shravas.html">Shravas Rao</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1904.13019">PDF</a><br/><b>Abstract: </b>The celebrated Littlewood-Offord problem asks for an upper bound on the
probability that the random variable $\epsilon_1 v_1 + \cdots + \epsilon_n v_n$
lies in the Euclidean unit ball, where $\epsilon_1, \ldots, \epsilon_n \in
\{-1, 1\}$ are independent Rademacher random variables and $v_1, \ldots, v_n
\in \mathbb{R}^d$ are fixed vectors of at least unit length.We extend many
known results to the case that the $\epsilon_i$ are obtained from a Markov
chain, including the general bounds first shown by Erd\H{o}s in the scalar case
and Kleitman in the vector case, and also under the restriction that the $v_i$
are distinct integers due to S\'ark\"ozy and Szemeredi. In all extensions, the
upper bound includes an extra factor depending on the spectral gap. We also
construct a pseudorandom generator for the Littlewood-Offord problem using
similar techniques.
</p></div>
    </summary>
    <updated>2019-05-01T01:25:23Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Complexity"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CC" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Complexity (cs.CC) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CC updates on arXiv.org</title>
      <updated>2019-05-01T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1904.12804</id>
    <link href="http://arxiv.org/abs/1904.12804" rel="alternate" type="text/html"/>
    <title>The I/O complexity of hybrid algorithms for square matrix multiplication</title>
    <feedworld_mtime>1556668800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/s/Stefani:Lorenzo_De.html">Lorenzo De Stefani</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1904.12804">PDF</a><br/><b>Abstract: </b>Asymptotically tight lower bounds are derived for the I/O complexity of a
general class of hybrid algorithms computing the product of $n \times n$ square
matrices combining ``\emph{Strassen-like}'' fast matrix multiplication approach
with computational complexity $\Theta{n^{\log_2 7}}$, and ``\emph{standard}''
matrix multiplication algorithms with computational complexity
$\Omega\left(n^3\right)$. We present a novel and tight
$\Omega\left(\left(\frac{n}{\max\{\sqrt{M},n_0\}}\right)^{\log_2
7}\left(\max\{1,\frac{n_0}{M}\}\right)^3M\right)$ lower bound for the I/O
complexity a class of ``\emph{uniform, non-stationary}'' hybrid algorithms when
executed in a two-level storage hierarchy with $M$ words of fast memory, where
$n_0$ denotes the threshold size of sub-problems which are computed using
standard algorithms with algebraic complexity $\Omega\left(n^3\right)$.
</p>
<p>The lower bound is actually derived for the more general class of
``\emph{non-uniform, non-stationary}'' hybrid algorithms which allow recursive
calls to have a different structure, even when they refer to the multiplication
of matrices of the same size and in the same recursive level, although the
quantitative expressions become more involved. Our results are the first I/O
lower bounds for these classes of hybrid algorithms. All presented lower bounds
apply even if the recomputation of partial results is allowed and are
asymptotically tight.
</p>
<p>The proof technique combines the analysis of the Grigoriev's flow of the
matrix multiplication function, combinatorial properties of the encoding
functions used by fast Strassen-like algorithms, and an application of the
Loomis-Whitney geometric theorem for the analysis of standard matrix
multiplication algorithms.
</p>
<p>Extensions of the lower bounds for a parallel model with $P$ processors are
also discussed.
</p></div>
    </summary>
    <updated>2019-05-01T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-04-30T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1904.12777</id>
    <link href="http://arxiv.org/abs/1904.12777" rel="alternate" type="text/html"/>
    <title>Pushing Lines Helps: Efficient Universal Centralised Transformations for Programmable Matter</title>
    <feedworld_mtime>1556668800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/a/Almethen:Abdullah.html">Abdullah Almethen</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/m/Michail:Othon.html">Othon Michail</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/p/Potapov:Igor.html">Igor Potapov</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1904.12777">PDF</a><br/><b>Abstract: </b>In this paper, we study a discrete system of entities residing on a
two-dimensional square grid. Each entity is modelled as a node occupying a
distinct cell of the grid. The set of all $n$ nodes forms initially a connected
shape $A$. Entities are equipped with a linear-strength pushing mechanism that
can push a whole line of entities, from 1 to $n$, in parallel in a single
time-step. A target connected shape $B$ is also provided and the goal is to
\emph{transform} $A$ into $B$ via a sequence of line movements. Existing models
based on local movement of individual nodes, such as rotating or sliding a
single node, can be shown to be special cases of the present model, therefore
their (inefficient, $\Theta(n^2)$) \emph{universal transformations} carry over.
Our main goal is to investigate whether the parallelism inherent in this new
type of movement can be exploited for efficient, i.e., sub-quadratic
worst-case, transformations. As a first step towards this, we restrict
attention solely to centralised transformations and leave the distributed case
as a direction for future research. Our results are positive. By focusing on
the apparently hard instance of transforming a diagonal $A$ into a straight
line $B$, we first obtain transformations of time $O(n\sqrt{n})$ without and
with preserving the connectivity of the shape throughout the transformation.
Then, we further improve by providing two $O(n\log n)$-time transformations for
this problem. By building upon these ideas, we first manage to develop an
$O(n\sqrt{n})$-time universal transformation. Our main result is then an $ O(n
\log n) $-time universal transformation. We leave as an interesting open
problem a suspected $\Omega(n\log n)$-time lower bound.
</p></div>
    </summary>
    <updated>2019-05-01T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-04-30T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1904.12728</id>
    <link href="http://arxiv.org/abs/1904.12728" rel="alternate" type="text/html"/>
    <title>Accurate MapReduce Algorithms for $k$-median and $k$-means in General Metric Spaces</title>
    <feedworld_mtime>1556668800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b>Alessio Mazzetto, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/p/Pietracaprina:Andrea.html">Andrea Pietracaprina</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/p/Pucci:Geppino.html">Geppino Pucci</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1904.12728">PDF</a><br/><b>Abstract: </b>Center-based clustering is a fundamental primitive for data analysis and
becomes very challenging for large datasets. In this paper, we focus on the
popular $k$-median and $k$-means variants which, given a set $P$ of points from
a metric space and a parameter $k&lt;|P|$, require to identify a set $S$ of $k$
centers minimizing respectively the sum of the distances and of the squared
distances of all points in $P$ from their closest centers. Our specific focus
is on general metric spaces for which it is reasonable to require that the
centers belong to the input set (i.e., $S \subseteq P$). We present
coreset-based 2-round distributed approximation algorithms for the above
problems using the MapReduce computational model. The algorithms are rather
simple and obliviously adapt to the intrinsic complexity of the dataset,
captured by the doubling dimension $D$ of the metric space. Remarkably, the
algorithms attain approximation ratios that can be made arbitrarily close to
those achievable by the best known polynomial-time sequential approximations,
and they are very space efficient for small $D$, requiring local memories sizes
substantially sublinear in the input size. To the best of our knowledge, no
previous distributed approaches were able to attain similar quality-performance
guarantees in general metric spaces.
</p></div>
    </summary>
    <updated>2019-04-30T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-04-30T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1904.12682</id>
    <link href="http://arxiv.org/abs/1904.12682" rel="alternate" type="text/html"/>
    <title>An efficient branch-and-cut algorithm for approximately submodular function maximization</title>
    <feedworld_mtime>1556668800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/u/Uematsu:Naoya.html">Naoya Uematsu</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/u/Umetani:Shunji.html">Shunji Umetani</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/k/Kawahara:Yoshinobu.html">Yoshinobu Kawahara</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1904.12682">PDF</a><br/><b>Abstract: </b>When approaching to problems in computer science, we often encounter
situations where a subset of a finite set maximizing some utility function
needs to be selected. Some of such utility functions are known to be
approximately submodular. For the problem of maximizing an approximately
submodular function (ASFM problem), a greedy algorithm quickly finds good
feasible solutions for many instances while guaranteeing
($1-e^{-\gamma}$)-approximation ratio for a given submodular ratio $\gamma$.
However, we still encounter its applications that ask more accurate or exactly
optimal solutions within a reasonable computation time. In this paper, we
present an efficient branch-and-cut algorithm for the non-decreasing ASFM
problem based on its binary integer programming (BIP) formulation with an
exponential number of constraints. To this end, we first derive a BIP
formulation of the ASFM problem and then, develop an improved constraint
generation algorithm that starts from a reduced BIP problem with a small subset
of constraints and repeats solving the reduced BIP problem while adding a
promising set of constraints at each iteration. Moreover, we incorporate it
into a branch-and-cut algorithm to attain good upper bounds while solving a
smaller number of nodes of a search tree. The computational results for three
types of well-known benchmark instances show that our algorithm performs better
than the conventional exact algorithms.
</p></div>
    </summary>
    <updated>2019-05-01T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-04-30T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1904.12596</id>
    <link href="http://arxiv.org/abs/1904.12596" rel="alternate" type="text/html"/>
    <title>Graph Planarity Testing with Hierarchical Embedding Constraints</title>
    <feedworld_mtime>1556668800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/l/Liotta:Giuseppe.html">Giuseppe Liotta</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/r/Rutter:Ignaz.html">Ignaz Rutter</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/t/Tappini:Alessandra.html">Alessandra Tappini</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1904.12596">PDF</a><br/><b>Abstract: </b>Hierarchical embedding constraints define a set of allowed cyclic orders for
the edges incident to the vertices of a graph. These constraints are expressed
in terms of FPQ-trees. FPQ-trees are a variant of PQ-trees that includes
F-nodes in addition to P- and to Q-nodes. An F-node represents a permutation
that is fixed, i.e., it cannot be reversed. Let $G$ be a graph such that every
vertex of $G$ is equipped with a set of FPQ-trees encoding hierarchical
embedding constraints for its incident edges. We study the problem of testing
whether $G$ admits a planar embedding such that, for each vertex $v$ of $G$,
the cyclic order of the edges incident to $v$ is described by at least one of
the FPQ-trees associated with $v$. We prove that the problem is NP-complete
even when the number of FPQ-trees associated with each vertex is bounded by a
constant. If however the branchwidth of $G$ is bounded, the problem can be
solved in polynomial time. Besides being interesting on its own right, the
study of planarity testing with hierarchical embedding constraints can be used
to address other planarity testing problems which can be modeled by associating
a set of FPQ-trees to the vertices of the input graph. As a proof of concept,
we apply our techniques to the study of NodeTrix planarity testing of clustered
graphs. We show that NodeTrix planarity testing with fixed sides is
fixed-parameter tractable when parameterized by the size of the clusters and by
the tree-width of the multi-graph obtained by collapsing the clusters to single
vertices.
</p></div>
    </summary>
    <updated>2019-04-30T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-04-30T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1904.12503</id>
    <link href="http://arxiv.org/abs/1904.12503" rel="alternate" type="text/html"/>
    <title>Solving Vertex Cover in Polynomial Time on Hyperbolic Random Graphs</title>
    <feedworld_mtime>1556668800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/b/Bl=auml=sius:Thomas.html">Thomas BlÃ¤sius</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/f/Fischbeck:Philipp.html">Philipp Fischbeck</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/f/Friedrich:Tobias.html">Tobias Friedrich</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/k/Katzmann:Maximilian.html">Maximilian Katzmann</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1904.12503">PDF</a><br/><b>Abstract: </b>The VertexCover problem is proven to be computationally hard in different
ways: It is NP-complete to find an optimal solution and even NP-hard to find an
approximation with reasonable factors. In contrast, recent experiments suggest
that on many real-world networks the run time to solve VertexCover is way
smaller than even the best known FPT-approaches can explain. Similarly, greedy
algorithms deliver very good approximations to the optimal solution in
practice, although VertexCover is NP-hard to approximate within reasonable
factors.
</p>
<p>We link these observations to two properties that are observed in many
real-world networks, namely a heterogeneous degree distribution and high
clustering. To formalize these properties and explain the observed behavior, we
analyze how a branch-and-reduce algorithm performs on hyperbolic random graphs,
which have become increasingly popular for modeling real-world networks. In
fact, we are able to show that the VertexCover problem on hyperbolic random
graphs can be solved in polynomial time, with high probability.
</p>
<p>The proof relies on interesting structural properties of hyperbolic random
graphs. Since these predictions of the model are interesting in their own
right, we conducted experiments on real-world networks showing that these
properties are also observed in practice. When utilizing the same structural
properties in an adaptive greedy algorithm, further experiments suggest that
this leads to even better approximations than the standard greedy approach on
real instances.
</p></div>
    </summary>
    <updated>2019-05-01T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-04-30T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1904.12500</id>
    <link href="http://arxiv.org/abs/1904.12500" rel="alternate" type="text/html"/>
    <title>Composing dynamic programming tree-decomposition-based algorithms</title>
    <feedworld_mtime>1556668800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/b/Baste:Julien.html">Julien Baste</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1904.12500">PDF</a><br/><b>Abstract: </b>Given two integers $\ell$ and $p$ as well as $\ell$ graph classes
$\mathcal{H}_1,\ldots,\mathcal{H}_\ell$, the problems
$\mathsf{GraphPart}(\mathcal{H}_1, \ldots, \mathcal{H}_\ell,p)$,
$\mathsf{VertPart}(\mathcal{H}_1, \ldots, \mathcal{H}_\ell)$, and
$\mathsf{EdgePart}(\mathcal{H}_1, \ldots, \mathcal{H}_\ell)$ ask, given graph
$G$ as input, whether $V(G)$, $V(G)$, $E(G)$ respectively can be partitioned
into $\ell$ sets $S_1, \ldots, S_\ell$ such that, for each $i$ between $1$ and
$\ell$, $G[V_i] \in \mathcal{H}_i$, $G[V_i] \in \mathcal{H}_i$, $(V(G),S_i) \in
\mathcal{H}_i$ respectively. Moreover in $\mathsf{GraphPart}(\mathcal{H}_1,
\ldots, \mathcal{H}_\ell,p)$, we request that the number of edges with
endpoints in different sets of the partition is bounded by $p$. We show that if
there exist dynamic programming tree-decomposition-based algorithms for
recognizing the graph classes $\mathcal{H}_i$, for each $i$, then we can
constructively create a dynamic programming tree-decomposition-based algorithms
for $\mathsf{GraphPart}(\mathcal{H}_1, \ldots, \mathcal{H}_\ell,p)$,
$\mathsf{VertPart}(\mathcal{H}_1, \ldots, \mathcal{H}_\ell)$, and
$\mathsf{EdgePart}(\mathcal{H}_1, \ldots, \mathcal{H}_\ell)$. We show that, in
some known cases, the obtained running times are comparable to those of the
best know algorithms.
</p></div>
    </summary>
    <updated>2019-05-01T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-04-30T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1904.12467</id>
    <link href="http://arxiv.org/abs/1904.12467" rel="alternate" type="text/html"/>
    <title>A Fast Scalable Heuristic for Bin Packing</title>
    <feedworld_mtime>1556668800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/d/Divakaran:Srikrishnan.html">Srikrishnan Divakaran</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1904.12467">PDF</a><br/><b>Abstract: </b>In this paper we present a fast scalable heuristic for bin packing that
partitions the given problem into identical sub-problems of constant size and
solves these constant size sub-problems by considering only a constant number
of bin configurations with bounded unused space. We present some empirical
evidence to support the scalability of our heuristic and its tighter empirical
analysis of hard instances due to improved lower bound on the necessary wastage
in an optimal solution.
</p></div>
    </summary>
    <updated>2019-05-01T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-04-30T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1904.12427</id>
    <link href="http://arxiv.org/abs/1904.12427" rel="alternate" type="text/html"/>
    <title>Improved Dynamic Graph Coloring</title>
    <feedworld_mtime>1556668800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/s/Solomon:Shay.html">Shay Solomon</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/w/Wein:Nicole.html">Nicole Wein</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1904.12427">PDF</a><br/><b>Abstract: </b>This paper studies the fundamental problem of graph coloring in fully dynamic
graphs. Since the problem of computing an optimal coloring, or even
approximating it to within $n^{1-\epsilon}$ for any $\epsilon &gt; 0$, is NP-hard
in static graphs, there is no hope to achieve any meaningful computational
results for general graphs in the dynamic setting. It is therefore only natural
to consider the combinatorial aspects of dynamic coloring, or alternatively,
study restricted families of graphs.
</p>
<p>Towards understanding the combinatorial aspects of this problem, one may
assume a black-box access to a static algorithm for $C$-coloring any subgraph
of the dynamic graph, and investigate the trade-off between the number of
colors and the number of recolorings per update step. In WADS'17, Barba et al.
devised two complementary algorithms: For any $\beta &gt; 0$ the first
(respectively, second) maintains an $O(C \beta n^{1/\beta})$ (resp., $O(C
\beta)$)-coloring while recoloring $O(\beta)$ (resp., $O(\beta n^{1/\beta})$)
vertices per update. Our contribution is two-fold:
</p>
<p>- We devise a new algorithm for general graphs that improves significantly
upon the first trade-off in a wide range of parameters: For any $\beta &gt; 0$, we
get a $\tilde{O}(\frac{C}{\beta}\log^2 n)$-coloring with $O(\beta)$ recolorings
per update, where the $\tilde{O}$ notation supresses polyloglog$(n)$ factors.
In particular, for $\beta=O(1)$ we get constant recolorings with polylog$(n)$
colors; this is an exponential improvement over the previous bound.
</p>
<p>- For uniformly sparse graphs, we use low out-degree orientations to
strengthen the above result by bounding the update time of the algorithm rather
than the number of recolorings. Then, we further improve this result by
introducing a new data structure that refines bounded out-degree edge
orientations and is of independent interest.
</p></div>
    </summary>
    <updated>2019-05-01T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-04-30T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1904.12370</id>
    <link href="http://arxiv.org/abs/1904.12370" rel="alternate" type="text/html"/>
    <title>Compact Fenwick trees for dynamic ranking and selection</title>
    <feedworld_mtime>1556668800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b>Stefano Marchini, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/v/Vigna:Sebastiano.html">Sebastiano Vigna</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1904.12370">PDF</a><br/><b>Abstract: </b>The Fenwick tree is a classical implicit data structure that stores an array
in such a way that modifying an element, accessing an element, computing a
prefix sum and performing a predecessor search on prefix sums all take
logarithmic time. We introduce a number of variants which improve the classical
implementation of the tree: in particular, we can reduce its size when an upper
bound on the array element is known, and we can perform much faster predecessor
searches. Our aim is to use our variants to implement an efficient dynamic bit
vector: our structure is able to perform updates, ranking and selection in
logarithmic time, with a space overhead in the order of a few percents,
outperforming existing data structures with the same purpose. Along the way, we
highlight the pernicious interplay between the arithmetic behind the Fenwick
tree and the structure of current CPU caches, suggesting simple solutions that
improve performance significantly.
</p></div>
    </summary>
    <updated>2019-04-30T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-04-30T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1904.12337</id>
    <link href="http://arxiv.org/abs/1904.12337" rel="alternate" type="text/html"/>
    <title>Efficient Black-Box Identity Testing over Free Group Algebra</title>
    <feedworld_mtime>1556668800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b>V. Arvind, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/c/Chatterjee:Abhranil.html">Abhranil Chatterjee</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/d/Datta:Rajit.html">Rajit Datta</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/m/Mukhopadhyay:Partha.html">Partha Mukhopadhyay</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1904.12337">PDF</a><br/><b>Abstract: </b>Hrube\v{s} and Wigderson [HW14] initiated the study of noncommutative
arithmetic circuits with division computing a noncommutative rational function
in the free skew field, and raised the question of rational identity testing.
It is now known that the problem can be solved in deterministic polynomial time
in the white-box model for noncommutative formulas with inverses, and in
randomized polynomial time in the black-box model [GGOW16, IQS18, DM18], where
the running time is polynomial in the size of the formula. The complexity of
identity testing of noncommutative rational functions remains open in general
(when the formula size is not polynomially bounded). We solve the problem for a
natural special case. We consider polynomial expressions in the free group
algebra $\mathbb{F}\langle X, X^{-1}\rangle$ where $X=\{x_1, x_2, \ldots,
x_n\}$, a subclass of rational expressions of inversion height one. Our main
results are the following. 1. Given a degree $d$ expression $f$ in
$\mathbb{F}\langle X, X^{-1}\rangle$ as a black-box, we obtain a randomized
$\text{poly}(n,d)$ algorithm to check whether $f$ is an identically zero
expression or not. We obtain this by generalizing the Amitsur-Levitzki theorem
[AL50] to $\mathbb{F}\langle X, X^{-1}\rangle$. This also yields a
deterministic identity testing algorithm (and even an expression reconstruction
algorithm) that is polynomial time in the sparsity of the input expression. 2.
Given an expression $f$ in $\mathbb{F}\langle X, X^{-1}\rangle$ of degree at
most $D$, and sparsity $s$, as black-box, we can check whether $f$ is
identically zero or not in randomized $\text{poly}(n,\log s, \log D)$ time.
</p></div>
    </summary>
    <updated>2019-04-30T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-04-30T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1904.12334</id>
    <link href="http://arxiv.org/abs/1904.12334" rel="alternate" type="text/html"/>
    <title>Tight FPT Approximations for $k$-Median and $k$-Means</title>
    <feedworld_mtime>1556668800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/c/Cohen=Addad:Vincent.html">Vincent Cohen-Addad</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/g/Gupta:Anupam.html">Anupam Gupta</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/k/Kumar:Amit.html">Amit Kumar</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/l/Lee:Euiwoong.html">Euiwoong Lee</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/l/Li:Jason.html">Jason Li</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1904.12334">PDF</a><br/><b>Abstract: </b>We investigate the fine-grained complexity of approximating the classical
$k$-median / $k$-means clustering problems in general metric spaces. We show
how to improve the approximation factors to $(1+2/e+\varepsilon)$ and
$(1+8/e+\varepsilon)$ respectively, using algorithms that run in
fixed-parameter time. Moreover, we show that we cannot do better in FPT time,
modulo recent complexity-theoretic conjectures.
</p></div>
    </summary>
    <updated>2019-04-30T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-04-30T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1904.12258</id>
    <link href="http://arxiv.org/abs/1904.12258" rel="alternate" type="text/html"/>
    <title>Generalizing the Covering Path Problem on a Grid</title>
    <feedworld_mtime>1556668800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/z/Zeng:Liwei.html">Liwei Zeng</a>, Karen Smilowitz, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/c/Chopra:Sunil.html">Sunil Chopra</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1904.12258">PDF</a><br/><b>Abstract: </b>We study the covering path problem on a grid of R^{2}. We generalize earlier
results on a rectangular grid and prove that the covering path cost can be
bounded by the area and perimeter of the grid. We provide (2+\epsilon) and
(1+\epsilon)-approximations for the problem on a general grid and on a convex
grid, respectively.
</p></div>
    </summary>
    <updated>2019-05-01T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-04-30T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1904.12248</id>
    <link href="http://arxiv.org/abs/1904.12248" rel="alternate" type="text/html"/>
    <title>Fast Utility Mining on Complex Sequences</title>
    <feedworld_mtime>1556668800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/g/Gan:Wensheng.html">Wensheng Gan</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/l/Lin:Jerry_Chun=Wei.html">Jerry Chun-Wei Lin</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/z/Zhang:Jiexiong.html">Jiexiong Zhang</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/f/Fournier=Viger:Philippe.html">Philippe Fournier-Viger</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/c/Chao:Han=Chieh.html">Han-Chieh Chao</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/y/Yu:Philip_S=.html">Philip S. Yu</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1904.12248">PDF</a><br/><b>Abstract: </b>High-utility sequential pattern mining is an emerging topic in the field of
Knowledge Discovery in Databases. It consists of discovering subsequences
having a high utility (importance) in sequences, referred to as high-utility
sequential patterns (HUSPs). HUSPs can be applied to many real-life
applications, such as market basket analysis, E-commerce recommendation,
click-stream analysis and scenic route planning. For example, in economics and
targeted marketing, understanding economic behavior of consumers is quite
challenging, such as finding credible and reliable information on product
profitability. Several algorithms have been proposed to address this problem by
efficiently mining utility-based useful sequential patterns. Nevertheless, the
performance of these algorithms can be unsatisfying in terms of runtime and
memory usage due to the combinatorial explosion of the search space for low
utility threshold and large databases. Hence, this paper proposes a more
efficient algorithm for the task of high-utility sequential pattern mining,
called HUSP-ULL. It utilizes a lexicographic sequence (LS)-tree and a
utility-linked (UL)-list structure to fast discover HUSPs. Furthermore, two
pruning strategies are introduced in HUSP-ULL to obtain tight upper-bounds on
the utility of candidate sequences, and reduce the search space by pruning
unpromising candidates early. Substantial experiments both on real-life and
synthetic datasets show that the proposed algorithm can effectively and
efficiently discover the complete set of HUSPs and outperforms the
state-of-the-art algorithms.
</p></div>
    </summary>
    <updated>2019-05-01T00:30:23Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-04-30T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1904.12217</id>
    <link href="http://arxiv.org/abs/1904.12217" rel="alternate" type="text/html"/>
    <title>A computational model for analytic column stores</title>
    <feedworld_mtime>1556668800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/r/Rozenberg:Eyal.html">Eyal Rozenberg</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1904.12217">PDF</a><br/><b>Abstract: </b>This work presents an abstract model for the computations performed by
analytic column stores or columnar query processors. The model is based on
circuits whose wires carry columns rather than scalar values, and whose nodes
apply operators with column inputs and outputs. This model allows expression of
most of the architectural features of existing column-store DBMSes through
columnar execution plans, rather than such features being implemented
sui-generis, and without the column store maintaining significant out-of-plan
data. A strict adherence to columnarity allows for a relatively simple and
robust model; enabling extensive and intensive optimization of almost all
aspects of query processing; and also enabling massive uniform parallelization
of query process on modern hardware. Moreover, the computational model's
expressivity makes it useful also as an \emph{analytical} tool for considering
design aspects and features of existing column stores, individually and
comparatively.
</p>
<p>To achieve the model's wide expressiveness, much of this work develops
representation schemes of relevant data structures as combinations of plain
columns, with columnar circuits used as scheme encoders and decoders. A
particular focus is given to schemes which also compress the data, and their
use in query execution --- as an integral part of the computation: Subcircuits
of larger columnar circuits, not black boxes. Decoder and encoder circuits are
thus also composed to form more elaborate schemes. Such formulation allows both
for an alternative view of well-known compression schemes, and for the
development of new columnar compression schemes with useful features; these
should be of independent interest irrespective of column store systems.
</p></div>
    </summary>
    <updated>2019-04-30T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-04-30T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1904.12068</id>
    <link href="http://arxiv.org/abs/1904.12068" rel="alternate" type="text/html"/>
    <title>Authenticated Key-Value Stores with Hardware Enclaves</title>
    <feedworld_mtime>1556668800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/t/Tang:Yuzhe.html">Yuzhe Tang</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/c/Chen:Ju.html">Ju Chen</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/l/Li:Kai.html">Kai Li</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/x/Xu:Jianliang.html">Jianliang Xu</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/z/Zhang:Qi.html">Qi Zhang</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1904.12068">PDF</a><br/><b>Abstract: </b>Authenticated data storage on an untrusted platform is an important computing
paradigm for cloud applications ranging from big-data outsourcing, to
cryptocurrency and certificate transparency log. These modern applications
increasingly feature update-intensive workloads, whereas existing authenticated
data structures (ADSs) designed with in-place updates are inefficient to handle
such workloads. In this paper, we address this issue and propose a novel
authenticated log-structured merge tree (eLSM) based key-value store by
leveraging Intel SGX enclaves.
</p>
<p>We present a system design that runs the code of eLSM store inside enclave.
To circumvent the limited enclave memory (128 MB with the latest Intel CPUs),
we propose to place the memory buffer of the eLSM store outside the enclave and
protect the buffer using a new authenticated data structure by digesting
individual LSM-tree levels. We design protocols to support query authentication
in data integrity, completeness (under range queries), and freshness. The proof
in our protocol is made small by including only the Merkle proofs at selective
levels.
</p>
<p>We implement eLSM on top of Google LevelDB and Facebook RocksDB with minimal
code change and performance interference. We evaluate the performance of eLSM
under the YCSB workload benchmark and show a performance advantage of up to
4.5X speedup.
</p></div>
    </summary>
    <updated>2019-05-01T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-04-30T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1904.12061</id>
    <link href="http://arxiv.org/abs/1904.12061" rel="alternate" type="text/html"/>
    <title>A Linear-Time Algorithm for Radius-Optimally Augmenting Paths in a Metric Space</title>
    <feedworld_mtime>1556668800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/j/Johnson:Christopher.html">Christopher Johnson</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/w/Wang:Haitao.html">Haitao Wang</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1904.12061">PDF</a><br/><b>Abstract: </b>Let $P$ be a path graph of $n$ vertices embedded in a metric space. We
consider the problem of adding a new edge to $P$ to minimize the radius of the
resulting graph. Previously, a similar problem for minimizing the diameter of
the graph was solved in $O(n\log n)$ time. To the best of our knowledge, the
problem of minimizing the radius has not been studied before. In this paper, we
present an $O(n)$ time algorithm for the problem, which is optimal.
</p></div>
    </summary>
    <updated>2019-05-01T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-04-30T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1904.12042</id>
    <link href="http://arxiv.org/abs/1904.12042" rel="alternate" type="text/html"/>
    <title>Truly Optimal Euclidean Spanners</title>
    <feedworld_mtime>1556668800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/l/Le:Hung.html">Hung Le</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/s/Solomon:Shay.html">Shay Solomon</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1904.12042">PDF</a><br/><b>Abstract: </b>Euclidean spanners are important geometric structures, having found numerous
applications over the years. Cornerstone results in this area from the late 80s
and early 90s state that for any $d$-dimensional $n$-point Euclidean space,
there exists a $(1+\epsilon)$-spanner with $nO(\epsilon^{-d+1})$ edges and
lightness $O(\epsilon^{-2d})$. Surprisingly, the fundamental question of
whether or not these dependencies on $\epsilon$ and $d$ for small $d$ can be
improved has remained elusive, even for $d = 2$. This question naturally arises
in any application of Euclidean spanners where precision is a necessity.
</p>
<p>The state-of-the-art bounds $nO(\epsilon^{-d+1})$ and $O(\epsilon^{-2d})$ on
the size and lightness of spanners are realized by the {\em greedy} spanner. In
2016, Filtser and Solomon proved that, in low dimensional spaces, the greedy
spanner is near-optimal. The question of whether the greedy spanner is truly
optimal remained open to date.
</p>
<p>The contribution of this paper is two-fold. We resolve these longstanding
questions by nailing down the exact dependencies on $\epsilon$ and $d$ and
showing that the greedy spanner is truly optimal. Specifically, for any $d=
O(1), \epsilon = \Omega({n}^{-\frac{1}{d-1}})$:
</p>
<p>_ We show that any $(1+\epsilon)$-spanner must have $n
\Omega(\epsilon^{-d+1})$ edges, implying that the greedy (and other) spanners
achieve the optimal size.
</p>
<p>_ We show that any $(1+\epsilon)$-spanner must have lightness
$\Omega(\epsilon^{-d})$, and then improve the upper bound on the lightness of
the greedy spanner from $O(\epsilon^{-2d})$ to $O(\epsilon^{-d})$.
</p>
<p>We then complement our negative result for the size of spanners with a rather
counterintuitive positive result: Steiner points lead to a quadratic
improvement in the size of spanners! Our bound for the size of Steiner spanners
is tight as well (up to lower-order terms).
</p></div>
    </summary>
    <updated>2019-05-01T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-04-30T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1904.12011</id>
    <link href="http://arxiv.org/abs/1904.12011" rel="alternate" type="text/html"/>
    <title>Parameterized algorithms for Partial vertex covers in bipartite graphs</title>
    <feedworld_mtime>1556668800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/m/Mkrtchyan:Vahan.html">Vahan Mkrtchyan</a>, Garik Petrosyan, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/s/Subramani:K=.html">K. Subramani</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1904.12011">PDF</a><br/><b>Abstract: </b>In the weighted partial vertex cover problem (WPVC), we are given a graph
$G=(V,E)$, cost function $c:V\rightarrow N$, profit function $p:E\rightarrow
N$, and positive integers $R$ and $L$. The goal is to check whether there is a
subset $V'\subseteq V$ of cost at most $R$, such that the total profit of edges
covered by $V'$ is at least $L$. In this paper we study the fixed-parameter
tractability of WPVC in bipartite graphs (WPVCB). By extending the methods of
Amini et al., we show that WPVCB is FPT with respect to $R$ if $c\equiv 1$. On
the negative side, it is $W[1]$-hard for arbitrary $c$, even when $p\equiv 1$.
In particular, WPVCB is $W[1]$-hard parameterized by $R$. We complement this
negative result by proving that for bounded-degree graphs WPVC is FPT with
respect to $R$. The same result holds for the case of WPVCB when we allow to
take only one fractional vertex. Additionally, we show that WPVC is FPT with
respect to $L$. Finally, we discuss a variant of PVCB in which the edges
covered are constrained to include a matching of prescribed size and derive a
paramterized algorithm for the same.
</p></div>
    </summary>
    <updated>2019-04-30T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-04-30T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1904.12000</id>
    <link href="http://arxiv.org/abs/1904.12000" rel="alternate" type="text/html"/>
    <title>On the fixed-parameter tractability of the maximum connectivity improvement problem</title>
    <feedworld_mtime>1556668800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b>Federico CorÃ², Gianlorenzo D'Angelo, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/m/Mkrtchyan:Vahan.html">Vahan Mkrtchyan</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1904.12000">PDF</a><br/><b>Abstract: </b>In the Maximum Connectivity Improvement (MCI) problem, we are given a
directed graph $G=(V,E)$ and an integer $B$ and we are asked to find $B$ new
edges to be added to $G$ in order to maximize the number of connected pairs of
vertices in the resulting graph. The MCI problem has been studied from the
approximation point of view. In this paper, we approach it from the
parameterized complexity perspective in the case of directed acyclic graphs. We
show several hardness and algorithmic results with respect to different natural
parameters. Our main result is that the problem is $W[2]$-hard for parameter
$B$ and it is FPT for parameters $|V| - B$ and $\nu$, the matching number of
$G$. We further characterize the MCI problem with respect to other
complementary parameters.
</p></div>
    </summary>
    <updated>2019-05-01T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-04-30T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1904.07358</id>
    <link href="http://arxiv.org/abs/1904.07358" rel="alternate" type="text/html"/>
    <title>Deterministic Preparation of Dicke States</title>
    <feedworld_mtime>1556668800</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/b/B=auml=rtschi:Andreas.html">Andreas BÃ¤rtschi</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/e/Eidenbenz:Stephan.html">Stephan Eidenbenz</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1904.07358">PDF</a><br/><b>Abstract: </b>The Dicke state $|D_k^n\rangle$ is an equal-weight superposition of all
$n$-qubit states with Hamming Weight $k$ (i.e. all strings of length $n$ with
exactly $k$ ones over a binary alphabet). Dicke states are an important class
of entangled quantum states that among other things serve as starting states
for combinatorial optimization quantum algorithms.
</p>
<p>We present a deterministic quantum algorithm for the preparation of Dicke
states. Implemented as a quantum circuit, our scheme uses $O(kn)$ gates, has
depth $O(n)$ and needs no ancilla qubits. The inductive nature of our approach
allows for linear-depth preparation of arbitrary symmetric pure states and --
used in reverse -- yields a quasilinear-depth circuit for efficient compression
of quantum information in the form of symmetric pure states, improving on
existing work requiring quadratic depth. All of these properties even hold for
Linear Nearest Neighbor architectures.
</p></div>
    </summary>
    <updated>2019-05-01T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-04-30T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>https://eccc.weizmann.ac.il/report/2019/064</id>
    <link href="https://eccc.weizmann.ac.il/report/2019/064" rel="alternate" type="text/html"/>
    <title>TR19-064 |  Randomness and Intractability in Kolmogorov Complexity | 

	Igor Carboni Oliveira</title>
    <summary>We introduce randomized time-bounded Kolmogorov complexity (rKt), a natural extension of Levin's notion of Kolmogorov complexity from 1984. A string w of low rKt complexity can be decompressed from a short representation via a time-bounded algorithm that outputs w with high probability. 

This complexity measure gives rise to a decision problem over strings: MrKtP (The Minimum rKt Problem). We explore ideas from pseudorandomness to prove that MrKtP and its variants cannot be solved in randomized quasi-polynomial time. This exhibits a natural string compression problem that is provably intractable, even for randomized computations. Our techniques also imply that there is no n^{1-eps}-approximate algorithm for MrKtP running in randomized quasi-polynomial time. 

Complementing this lower bound, we observe connections between rKt, the power of randomness in computing, and circuit complexity. In particular, we present the first hardness magnification theorem for a natural problem that is unconditionally hard against a strong model of computation.</summary>
    <updated>2019-04-30T18:41:08Z</updated>
    <published>2019-04-30T18:41:08Z</published>
    <source>
      <id>https://eccc.weizmann.ac.il/</id>
      <author>
        <name>ECCC papers</name>
      </author>
      <link href="https://eccc.weizmann.ac.il/" rel="alternate" type="text/html"/>
      <link href="https://example.com/feeds/reports/" rel="self" type="application/atom+xml"/>
      <subtitle>Latest Reports published at https://eccc.weizmann.ac.il</subtitle>
      <title>ECCC - Reports</title>
      <updated>2019-05-01T05:20:38Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://rjlipton.wordpress.com/?p=15814</id>
    <link href="https://rjlipton.wordpress.com/2019/04/30/network-coding-yields-lower-bounds/" rel="alternate" type="text/html"/>
    <title>Network Coding Yields Lower Bounds</title>
    <summary>Practice leads theory Peyman Afshani, Casper Freksen, Lior Kamma, and Kasper Larsen have a beautiful new paper titled âLower Bounds for Multiplication via Network Codingâ. Today we will talk about how practical computing played a role in this theory research. The authors (AFKL) state this: In this work, we prove that if a central conjecture [â¦]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>
<font color="#0044cc"><br/>
<em>Practice leads theory</em><br/>
<font color="#000000"/></font></p><font color="#0044cc"><font color="#000000">
<a href="https://rjlipton.files.wordpress.com/2019/04/akkl.jpg"><img alt="" class="alignright wp-image-15816" height="162" src="https://rjlipton.files.wordpress.com/2019/04/akkl.jpg?w=123&amp;h=162" width="123"/></a><p/><p>
Peyman Afshani, Casper Freksen, Lior Kamma, and Kasper Larsen have a beautiful new <a href="https://arxiv.org/abs/1902.10935">paper</a> titled âLower Bounds for Multiplication via Network Codingâ. </p><p>
Today we will talk about how practical computing played a role in this theory research.</p><p>
The authors (AFKL) state this:</p><blockquote><p><b> </b> <em> In this work, we prove that if a central conjecture in the area of network coding is true, then any constant degree boolean circuit for multiplication must have size <img alt="{\Omega(n \log n)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5COmega%28n+%5Clog+n%29%7D&amp;bg=e8e8e8&amp;fg=000000&amp;s=0" title="{\Omega(n \log n)}"/>, thus <s>almost</s> completely settling the complexity of multiplication circuits. </em>
</p></blockquote><p/><p>
We added the strikeout because of the <img alt="{O(n \log n)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BO%28n+%5Clog+n%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{O(n \log n)}"/> upper bound that we discussed recently <a href="https://rjlipton.wordpress.com/2019/03/29/integer-multiplication-in-nlogn-time/">here</a>.</p><p>
AFKL have conditionally solved a long standing open problem: âHow hard is it to multiply two <img alt="{n}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bn%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{n}"/>-bit numbers?â Their proof shows that a conjecture from practice implies a circuit lower bound. This is rare: using a conjecture from practice, to solve a complexity open problem. We have used conjectures from many parts of mathematics, and from some parts of physics, to make progress, but drawing on experience with practical networking is strikingly fresh. </p><p>
</p><p/><h2> Integer Multiplication </h2><p/><p/><p>
The authors AFKL explain the history of the multiplication problem. We knew some of the story, but not all the delicious details.</p><blockquote><p><b> </b> <em> In 1960, Andrey Kolmogorov conjectured that the thousands of years old <img alt="{O(n^{2})}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BO%28n%5E%7B2%7D%29%7D&amp;bg=e8e8e8&amp;fg=000000&amp;s=0" title="{O(n^{2})}"/>-time algorithm is optimal and he arranged a seminar at Moscow State University with the goal of proving this conjecture. However only a week into the seminar, the student Anatoly Karatsuba came up with an <img alt="{O(n^{\log_{2}3}) \approx O(n^{1.585})}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BO%28n%5E%7B%5Clog_%7B2%7D3%7D%29+%5Capprox+O%28n%5E%7B1.585%7D%29%7D&amp;bg=e8e8e8&amp;fg=000000&amp;s=0" title="{O(n^{\log_{2}3}) \approx O(n^{1.585})}"/> time algorithm. The algorithm was presented at the next seminar meeting and the seminar was terminated. </em>
</p></blockquote><p/><p>
Ken and I wish we could have Kolmogorovâs luck, in one of our seminars. Partly because it would advance knowledge; partly because it would let us out of teaching. Sweet.</p><p>
The main result of AKKL is:</p><blockquote><p><b>Theorem 1</b> <em><a name="NC2mult"/> Assuming the Network Conjecture, every general boolean circuit that computes the product of two <img alt="{n}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bn%7D&amp;bg=e8e8e8&amp;fg=000000&amp;s=0" title="{n}"/>-bit integers has size order at least <img alt="{n\log n}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bn%5Clog+n%7D&amp;bg=e8e8e8&amp;fg=000000&amp;s=0" title="{n\log n}"/>. </em>
</p></blockquote><p/><p>
This says that the boolean complexity of multiplication is super-linear. No restriction of a bounded depth, no restriction on the operations allowed, no restrictions at all. Given our non-existent lower bounds this is remarkable. If it was unconditional, it would be a terrific result. But it still is a strong one. </p><p>
We will next explain what the Network Coding Conjecture (NCC) is. </p><p>
</p><p/><h2> Network Coding </h2><p/><p/><p>
One of the basic papers was authored by Rudolf Ahlswede, Ning Cai, Shuo-Yen Li, and Raymond Yeung <a href="http://www.inf.fu-berlin.de/lehre/WS11/Wireless/papers/CodAhlswede00.pdf">here</a>. The paper has close to ten thousand citations, which would be amazing for a theory paper.</p><p>
In basic networks each node can receive and send messages to and from other nodes. They can only move messages aroundâthey are not allowed to peer into a message. The concept of <i>network coding</i> is to allow nodes also to decode and encode messages. Nodes can peer into messages and create new ones. The goal, of course, is to decrease the time required to transmit information through the network.</p><p>
The following example combines figures from a 2004 <a href="http://www.eecg.utoronto.ca/~bli/papers/allerton04.pdf">paper</a> by Zongpeng Li and Baochun Li which formulated the NCC. At left is a situation where two senders, <img alt="{S_1}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BS_1%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{S_1}"/> with an <img alt="{n}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bn%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{n}"/>-bit message <img alt="{a}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Ba%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{a}"/> and <img alt="{S_2}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BS_2%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{S_2}"/> with an <img alt="{n}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bn%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{n}"/>-bit message <img alt="{b}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bb%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{b}"/>, wish to transmit to respective receivers <img alt="{T_1}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BT_1%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{T_1}"/> and <img alt="{T_2}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BT_2%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{T_2}"/>. The networkâs links are one-way as shown, with two intermediate nodes <img alt="{A}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BA%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{A}"/> and <img alt="{B}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BB%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{B}"/>, and each link can carry <img alt="{n}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bn%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{n}"/> bits at any one time.</p><p/><p><br/>
<a href="https://rjlipton.files.wordpress.com/2019/04/flowfigures.png"><img alt="" class="aligncenter wp-image-15815" height="115" src="https://rjlipton.files.wordpress.com/2019/04/flowfigures.png?w=500&amp;h=115" width="500"/></a></p><p/><p><br/>
If <img alt="{a}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Ba%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{a}"/> and <img alt="{b}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bb%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{b}"/> are black-boxes that must be kept entire, there is no way to solve this in three time steps. But if the nodes can read messages and do lightweight computations, then the middle diagram gives a viable solution. Node <img alt="{A}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BA%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{A}"/> reads <img alt="{a}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Ba%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{a}"/> and <img alt="{b}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bb%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{b}"/> and on-the-fly transmits their bitwise exclusive-or to node <img alt="{B}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BB%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{B}"/>. Node <img alt="{B}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BB%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{B}"/> relays this to each receiver, who has also received the other partyâs message directly. The receivers can each do a final exclusive-or to recover the messages intended for them. </p><p>
The ability to look inside messages seems powerful, and there are networks where it helps even more dramatically. Incidentally, as <a href="https://en.wikipedia.org/wiki/Linear_network_coding">noted</a> by Wikipedia, the exclusive-or trick was anticipated in a 1978 <a href="https://ieeexplore.ieee.org/document/1455117">paper</a> showing how the two senders can exchange their messages <img alt="{a}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Ba%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{a}"/> and <img alt="{b}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bb%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{b}"/> by relaying them to a satellite which transmits <img alt="{a \oplus b}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Ba+%5Coplus+b%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{a \oplus b}"/> back to each.</p><p>
</p><p/><h2> The Conjecture </h2><p/><p/><p>
However, there is another solution if the links are bi-directional and messages can be broken in half. Sender <img alt="{S_1}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BS_1%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{S_1}"/> simply routes half of <img alt="{a}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Ba%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{a}"/> one way around the network and the other half the other way. Sender <img alt="{S_2}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BS_2%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{S_2}"/> does similarly. This is shown at far right. Each link never has more than <img alt="{n}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bn%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{n}"/> bits of total load and the three-step elapsed time is the same. Moreover, the link from <img alt="{A}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BA%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{A}"/> to <img alt="{B}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BB%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{B}"/> is not needed. This is just an undirected network commodity flow with fractional units.</p><p>
In fact, <i>no</i> example is known in an undirected network where encoding beats fractional routing. That is, the known network encoding rate is just the flow rate of the network. The network coding (NCC) conjecture is informally:</p><blockquote><p><b> </b> <em> <i>The coding rate is never better than the flow rate in undirected graphs</i>. </em>
</p></blockquote><p/><p>
The paper by Li and Li gave formal details and several equivalent statements. Quoting them:</p><blockquote><p><b> </b> <em> For undirected networks with integral routing, there still exist configurations that are feasible with network coding but infeasible with routing only. For undirected networks with fractional routing, we show that the potential of network coding to help increase throughput in a capacitied network is equivalent to the potential of network coding to increase bandwidth efficiency in an uncapacitied network. We conjecture that these benefits are non-existent. </em>
</p></blockquote><p>
</p><p/><h2> Good and Bad News </h2><p/><p/><p>
What has become of the NCC in the fifteen years since? Hereâs how Ken and I see it:</p><p>
<img alt="{\bullet }" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cbullet+%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\bullet }"/> <i>The Good News</i>: The NCC helps solve long-standing open problems. Since this conjecture is widely believed this is impressive. Besides integer multiplication, NCC has been used to prove other lower bounds. For example, Larsen working with Alireza Farhadi, Mohammad Hajiaghayi, and Elaine Shi used it to <a href="https://arxiv.org/abs/1811.01313">prove</a> lower bounds on sorting with external memory. </p><p>
<img alt="{\bullet }" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cbullet+%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\bullet }"/> <i>The Bad News</i>: The NCC helps solve long-standing open problems. This suggests that this conjecture could be deep and hard to resolve. The boolean complexity of integer multiplication is a long standing open question. Since the NCC leads to a non-linear lower bound, perhaps proving this conjecture could be hopeless.</p><p>
I have mixed feelings about these lower bound results. They are impressive and shed light on hard open problems. But I wonder if the NCC could be wrong. There is a long <a href="https://rjlipton.wordpress.com/2010/06/19/guessing-the-truth/">history</a> in complexity theory where guesses of the form: </p><blockquote><p><b> </b> <em> <i>The obvious algorithm is optimal</i> </em>
</p></blockquote><p>have failed. The situation strikes us as resembling that of the (Strong) Exponential Time Hypothesis, in ways we <a href="https://rjlipton.wordpress.com/2015/06/01/puzzling-evidence/">discussed</a> four years ago. </p><p>
</p><p/><h2> How the New Paper Works </h2><p/><p/><p>
The authors AKKL did not know that an <img alt="{O(n\log n)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BO%28n%5Clog+n%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{O(n\log n)}"/> upper bound had been proved for integer multiplication when they posted their paper. They did, however, prove a stronger version of Theorem (<a href="https://rjlipton.wordpress.com/feed/#NC2mult">1</a>) for a problem with a known <img alt="{n\log n}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bn%5Clog+n%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{n\log n}"/> upper bound. This is to create circuits with <img alt="{n + \log_2 n}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bn+%2B+%5Clog_2+n%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{n + \log_2 n}"/> input gates and <img alt="{2n}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B2n%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{2n}"/> output gates that given <img alt="{x}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x}"/> and a binary number <img alt="{\ell \leq n = |x|}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cell+%5Cleq+n+%3D+%7Cx%7C%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\ell \leq n = |x|}"/> output the string <img alt="{y}" class="latex" src="https://s0.wp.com/latex.php?latex=%7By%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{y}"/> whose bits <img alt="{n-\ell}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bn-%5Cell%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{n-\ell}"/> through <img alt="{2n-\ell-1}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B2n-%5Cell-1%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{2n-\ell-1}"/> equal <img alt="{x}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x}"/>, with other bits <img alt="{0}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B0%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{0}"/>. A conditional lower bound on this <i>shift</i> task implies the same for multiplication, since the shift is the same as multiplication by <img alt="{2^\ell}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B2%5E%5Cell%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{2^\ell}"/>. </p><blockquote><p><b>Theorem 2</b> <em><a name="NC2shift"/> Assuming the NCC, circuits for the shift task need size order <img alt="{n\log n}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bn%5Clog+n%7D&amp;bg=e8e8e8&amp;fg=000000&amp;s=0" title="{n\log n}"/>. </em>
</p></blockquote><p/><p>
The proof is disarmingly elementary: The input <img alt="{x}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bx%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{x}"/> gives <img alt="{n}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bn%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{n}"/> âsendersâ and each value of <img alt="{\ell}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cell%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\ell}"/> creates a different set of <img alt="{n}" class="latex" src="https://s0.wp.com/latex.php?latex=%7Bn%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{n}"/> âreceivers.â With a circuit <img alt="{C}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BC%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{C}"/> fixed, they show one can fix a shift <img alt="{\ell_0}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cell_0%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\ell_0}"/> so that the average distance from sender to receiver in an undirected multi-commodity flow is <img alt="{\Omega(\log n)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5COmega%28%5Clog+n%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\Omega(\log n)}"/>, giving <img alt="{\Omega(n\log n)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5COmega%28n%5Clog+n%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\Omega(n\log n)}"/> total flow. If <img alt="{C}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BC%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{C}"/> achieves smaller size, then it represents a counterexample to the NCC. </p><p>
Pretty neatâthis is half a page in the paper. The paper proves more intricate results relating to conjectures by Les Valiant about Boolean circuits of bounded fan-in and <img alt="{O(\log n)}" class="latex" src="https://s0.wp.com/latex.php?latex=%7BO%28%5Clog+n%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{O(\log n)}"/> depth that compute permutations and their reduction to depth-3 circuits of unbounded fan-in. This also may extend to the sorting/shifting problem Ken wrote about long ago in a guest <a href="https://blog.computationalcomplexity.org/2007/07/concrete-open-problem.html">post</a> for Lance Fortnow and Bill Gasarchâs blog.</p><p>
</p><p/><h2> Open Problems </h2><p/><p/><p>
Is the NCC true? Can it be proved for some interesting classes of graphs? I believe it is known for tiny size graphs of at most six nodes. What about, for example, planar graphs?</p><p>
[inserted âconditionallyâ before âsolvedâ in intro]</p><table class="image alignright">










































</table></font></font></div>
    </content>
    <updated>2019-04-30T13:27:11Z</updated>
    <published>2019-04-30T13:27:11Z</published>
    <category term="algorithms"/>
    <category term="All Posts"/>
    <category term="History"/>
    <category term="Ideas"/>
    <category term="News"/>
    <category term="Open Problems"/>
    <category term="Proofs"/>
    <category term="Results"/>
    <category term="trick"/>
    <category term="Casper Freksen"/>
    <category term="circuits"/>
    <category term="communication complexity"/>
    <category term="conjecture"/>
    <category term="integer multiplication"/>
    <category term="Kasper Larsen"/>
    <category term="Lior Kamma"/>
    <category term="lower bounds"/>
    <category term="network coding"/>
    <category term="Peyman Afshani"/>
    <category term="reduction"/>
    <author>
      <name>RJLipton+KWRegan</name>
    </author>
    <source>
      <id>https://rjlipton.wordpress.com</id>
      <logo>https://s0.wp.com/i/buttonw-com.png</logo>
      <link href="https://rjlipton.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="https://rjlipton.wordpress.com" rel="alternate" type="text/html"/>
      <link href="https://rjlipton.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="https://rjlipton.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>a personal view of the theory of computation</subtitle>
      <title>GÃ¶delâs Lost Letter and P=NP</title>
      <updated>2019-05-01T05:20:45Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://gradientscience.org/policy_gradients_pt3</id>
    <link href="http://gradientscience.org/policy_gradients_pt3" rel="alternate" type="text/html"/>
    <title>A Closer Look at Deep Policy Gradients (Part 3&amp;#58; Landscapes and Trust Regions)</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This post is the last of a three part series about our recent paper: â<a href="https://arxiv.org/abs/1811.02553">Are Deep
Policy Gradient Algorithms Truly Policy Gradient
Algorithms?</a>â Today, we will analyze agentsâ
reward landscapes as well as try to understand to what extent, and by what mechanisms,
our agents enforce so-called <i>trust regions</i>.</p>

<p>First, a quick recap (itâs been a while!):</p>
<ul>
  <li>
    <p>In our <a href="https://gradientscience.org/policy_gradients_pt1">first post</a>, we outlined the
RL framework and introduced policy gradient algorithms. We saw that
auxiliary optimizations hidden in the implementation details of RL algorithms
drastically impact performance. These findings highlighted the need for a more
fine-grained analysis of how algorithms really operate.</p>
  </li>
  <li>
    <p>In our <a href="https://gradientscience.org/policy_gradients_pt2">second post</a>, we zoomed in on
three algorithms: trust region policy optimization (TRPO), proximal policy
optimization (PPO), and an algorithm we called âPPO-M.â PPO-M is the core PPO
algorithm exactly as described in the <a href="https://arxiv.org/abs/1707.06347">original
paper</a>, without any of the auxiliary
optimizations. Using these methods as a test-bed, we studied two core
primitives of the policy gradient framework: gradient estimation and value
prediction.</p>
  </li>
</ul>

<p>Our discussion today begins where we left off in our second post. Recall that
last time we studied the variance of the gradient estimates our algorithms use
to maximize rewards. We found (among other things) that, despite high variance, algorithm steps were
still (very slightly) correlated with the actual, âtrueâ gradient of the reward.
However, how good was this true gradient to begin with? After all, a fundamental
assumption of the whole policy gradient framework is that our gradient steps actually point in a direction (in policy
parameter space) that increases the reward. Is this indeed so in practice?</p>

<h2 id="optimization-landscapes">Optimization Landscapes</h2>
<p>Recall from our <a href="https://gradientscience.org/policy_gradients_pt1">first post</a> that
policy gradient methods treat reward maximization as a zeroth-order optimization
problem. That is, they maximize the objective by applying first order methods
with finite sample gradient estimates of the form:</p>



<p>Here,  represents the cumulative reward of a trajectory , where
 is sampled from the distribution of trajectories induced by the current
policy . We let  represent an easily computable
function of  that is an unbiased estimator of the gradient of the reward
(seen on the left hand side)âfor more details see <a href="https://gradientscience.org/policy_gradients_pt1/#rl-with-policy-gradients">our previous post</a>.
Finally, we denote by  the number of trajectories used to estimate the
gradient.</p>

<p>An important point is, however, that instead of following the gradients of the cumulative reward (as
suggested by the above equation), the algorithms we analyze actually use a
<i>surrogate reward</i> at each step. The surrogate reward is a function of the
collected trajectories that is meant to locally approximate the true reward,
while providing other benefits such as easier computation and a smoother
optimization landscape. Consequently, at each step these algorithms maximize the
surrogate rewards  instead of following the gradient of the
true reward .</p>

<p>A natural question to ask is: <i>do steps maximizing the surrogate reward
consistently increase policy returns?</i> To answer this, we will use
<i>landscape plots</i> as a tool for visualizing the landscape of returns
around a given policy :</p>

<p><img alt="Labeled diagram of optimization landscape plot" src="https://gradientscience.org/images/rl/labeled_landscape.jpg"/></p>

<p>Here, for each point  in the plot,  and  specify a policy
 parameterized by</p>



<p>where  is the step computed by the studied algorithm. (Note that
we include the random Gaussian  direction to visualize how
âimportantâ the step direction is compared to a random baseline). The  axis
corresponds to the return attained by the policy , which we
denote by .</p>

<p>Now, when we make this plot for a random  (corresponding to a randomly
initialized policy network), everything looks as expected:</p>

<p><img alt="Landscape for randomly initialized network" src="https://gradientscience.org/images/rl/step_0_landscape.jpg"/></p>

<p>That is, the return increases significantly more quickly along the step direction than in
the random direction. However, repeating these landscape experiments at later
iterations, we find a more surprising picture: going in the step direction
actually <i>decreases</i> the average cumulative reward obtained by the resulting
agent!</p>

<p><img alt="Landscape for trained networks" src="https://gradientscience.org/images/rl/landscape_step_150_300_450.jpg"/></p>

<p>So what exactly is going on here? The steps computed by these algorithms are
estimates of the gradient of the reward, so it is unexpected that the reward
plateaus (or in some cases decreases!) along this direction.</p>

<p>We find that the
answer lies in a <i>misalignment</i> of the true reward and the surrogate. Specifically, while
the steps taken do correspond to an improvement in the surrogate problem, they
do <i>not</i> always correspond to a similar improvement in the true return.
Here are the same graphs as above shown again, this time with the corresponding
optimization landscapes of the <i>surrogate loss</i>
<sup><a href="https://gradientscience.org/feed.xml#footnote1">1</a></sup>:</p>
<div class="footnote">
<sup><a id="footnote1">1</a></sup>All of the landscapes we plot in this post are for PPO; we have (similar)
results for TRPO in <a href="https://arxiv.org/abs/1811.02553">our paper</a>.
</div>

<p><img alt="Surrogate vs real landscape" src="https://gradientscience.org/images/rl/surrogate_vs_real_landscape.jpg"/></p>

<!-- The surrogate reward landscape misalignment is further complicated by the fact -->
<!-- that all of the rewards plotted in the landscapes weâve seen so far are computed with -->
<!-- many, many more samples than an algorithm would ever collect at a single step in -->
<!-- practice.  -->

<p>To make matters worse, we find that in the low sample regime that policy
gradient methods actually operate in, it is hard to even <i>discern</i> directions of
improvement in the true reward landscape. (In all the plots above,
we use orders of magnitude more samples than an agent would ever see in practice
at a single step.) In the plot below, we visualize reward landscapes while
varying the number of samples used to estimate the expected return of a policy
:</p>

<p><img alt="Surrogate vs real landscape" src="https://gradientscience.org/images/rl/landscape_conc.jpg"/></p>

<p>In contrast to the smooth landscape we see on the right and in the plots above,
the reward landscape actually accessible to the model is jagged and poorly behaved.
This landscape makes it thus near-impossible for an agent to distinguish between good
and bad points in its relevant sample regime, even when the true underlying
landscape is fairly well-behaved!</p>

<p>Overall, our investigation into the optimization landscape of policy gradient algorithms
reveals that (a) the surrogate reward function is often misaligned with the
underlying true return of the policy, and (b) in the relevant sample regime, it
is hard to distinguish between âgoodâ steps and âbadâ steps, even when looking at the true reward
landscape. As always, however, <i>none of this stops the agents from training
and continually improving reward in the average sense</i>. This raises some
key questions about the landscape of policy optimization:</p>

<ul>
  <li>Given that the function we actually optimize is so often misaligned with the
underlying rewards, how is it that agents continually improve?</li>
  <li>Can we explain or link the local behaviour we observe in the landscape with a
more global view of policy optimization?</li>
  <li>How do we ensure that the reward landscape is navigable? And, more generally,
what is the best way to navigate it?</li>
</ul>

<h2 id="trust-regions">Trust Regions</h2>
<p>Let us now turn our attention to another important notion in the popular policy gradient algorithms: that of the <i>trust region</i>. 
Recall that a convenient way to think about our training process is to view it as a series of policy parameter iterates:</p>



<p>An important aspect of this process is ensuring that the steps we take donât
lead us outside of the region (of parameter space) where the samples we
collected are informative. Intuitively, if we collect samples at a given set of
policy parameters , there is no reason to expect that these samples
should tell us about the performance of a new set of parameters that is far away
from .</p>

<p>Thus, in order to ensure that gradient steps are predictive, classical
algorithms like the 
<a href="http://www.cs.cmu.edu/~./jcl/papers/aoarl/Final.pdf">conservative policy update</a> 
employ update schemes that constrain the probability distributions induced by 
successive policy parameters.  The <a href="https://arxiv.org/abs/1502.05477">TRPO paper</a> 
in particular showed 
that one can 
guarantee monotonic policy improvement with each step by solving a surrogate problem of the following form:</p>



<p>The second, âpenaltyâ term in the above objective, referred to as the <i>trust region</i> penalty, is a
critical component of modern policy gradient algorithms. TRPO, one of the
algorithms we study, proposes a relaxation of \eqref{eq:klpen} that
instead imposes a hard constraint on the
<i>mean</i> KL divergence<sup><a href="https://gradientscience.org/feed.xml#footnote2">2</a></sup>
 (estimated using the empirical samples we obtain):</p>



<div class="footnote">
<sup><a id="footnote2">2</a></sup>It's worth noting that 
<a href="https://arxiv.org/abs/1705.10528">a
recent paper</a> showed that under some conditions, mean KL is actually
sufficient.
</div>

<p>In other words, we try to ensure that the <i>average</i> distance between 
conditional probability distributions is small. 
Finally, PPO approximates the mean KL bound of TRPO by attempting to
constrain a <i>ratio</i> between successive conditional probability
distributions, instead of the KL divergence. The exact mechanism for
enforcing this is shown in the 
box below. Intuitively, however, what PPO does is just throw away
(i.e. get no gradient signal from) the
rewards incurred from any state-action pair such that:</p>



<p>where  is a user-chosen hyperparameter.</p>

<section class="container">
<div>
<div class="checkboxdiv">
<input id="ac-1" name="accordion-1" type="checkbox"/>
<label for="ac-1"><span class="fas fa-chevron-right" id="titlespan"/>Â <strong>The PPO update step</strong> (Click to expand)</label>
<article class="small">
<i>Note that the following is only for interested readers and is unessential 
for reading the rest of the blog post.</i> <br/> <br/>

The exact update used by PPO is as follows, where $\widehat{A}_\pi$ is
the <a href="https://arxiv.org/abs/1506.02438">generalized advantage 
estimate</a>:
$$
\begin{array}{c}{\max _{\theta} \mathbb{E}_{\left(s_{t}, a_{t}\right) \sim \pi}\left[\min \left(\operatorname{clip}\left(\rho_{t}, 1-\varepsilon, 1+\varepsilon\right) \widehat{A}_{\pi}\left(s_{t}, a_{t}\right), \rho_{t} \widehat{A}_{\pi}\left(s_{t}, a_{t}\right)\right)\right]} \\ {\text{where }\ \ \rho_{t}=\frac{\pi_{\theta}\left(a_{t} | s_{t}\right)}{\pi\left(a_{t} | s_{t}\right)}}\end{array}
$$
As described in the main text, this intuitively corresponds to throwing
away (i.e. getting no gradient signal) from state-action pairs where the
ratio of conditional probabilities between successive policies is too high.
</article>
</div>
</div>
</section>
<p><br/></p>

<p>To recap, there is a theoretically motivated algorithm \eqref{eq:klpen} which
constrains maximum KL. This motivates TRPOâs bound on
mean KL in \eqref{eq:trpotrust}, which in turn motivates the 
ratio-based bound of PPO (shown in the box). This chain of approximations might 
lead us to ask: <i>how well do these algorithms actually maintain trust regions</i>?</p>

<p>We first plot the mean KL divergence between successive policies for each
algorithm:
<img src="https://gradientscience.org/images/rl/meankl_trust.jpg" style="width: 50%;"/>
<br/></p>

<p>TRPO seems to constrain this very well
<a href="https://gradientscience.org/feed.xml#footnote3"><sup>3</sup></a>
! On the other hand, our two
varieties of the PPO algorithm paint a drastically different picture. Recall that we decided to
separately study two versions of PPO: PPO (based on a state-of-the-art implementation), 
and PPO-M, which we defined to be the core PPO algorithm without auxiliary optimizations. 
PPO <i>with</i> optimizations does quite well at maintaining a KL trust region, 
but PPO-M does not. This is unexpected: PPOâs main mechanism for maintaining the
trust region (the ratio clipping) is present in both methodsâthe
differences are only in auxiliary optimizations such as Adam learning rate annealing or
orthogonal initialization. As such, it is unclear exactly which mechanisms 
in PPO are responsible for maintaining the mean KL constraint.</p>

<div class="footnote">
<a id="footnote3"><sup>3</sup></a>
Note that this is somewhat unsurprising, since TRPO constrains this
directly in its optimization.
</div>

<p>In fact, we find that PPOâs inability to maintain a KL-based trust region 
is not entirely due to the looseness of its relaxation; it turns out that 
PPO does not even successfully enforce its <i>own</i> ratio-based trust region.
Below, we plot the maximum ratio \eqref{eq:ratio} between successive
policies for the three algorithms in question:</p>

<p><img src="https://gradientscience.org/images/rl/maxratio_trust.jpg" style="width: 50%;"/>
<br/></p>

<p>In the above, the dotted line represents , corresponding to the 
bound in \eqref{eq:ratio}âit looks like the max ratio is not kept at all! And once again, 
simply adding the auxiliary, code-level optimizations to PPO-M
yields <i>better</i> trust region
enforcement, despite the main clipping mechanism staying the same.
Indeed, it turns out that the
way that PPO enforces the ratio trust region does not actually keep the ratios
from becoming too large or too small. In fact, in our paper we show that there
are <i>infinite</i> optima of the optimization problem PPO solves to find each
step and only <i>one</i> of them enforces the intended trust region bound.</p>

<h2 id="wrapping-up">Wrapping Up</h2>

<p>Deep reinforcement learning algorithms are rooted in a well-grounded framework
of classical RL, and have shown great promise in practice. However, as weâve
found in our three-part investigation, this framework often falls a little short
of explaining the behavior of these algorithms in practice.</p>

<p>Beyond just being disconcerting, this disconnect impedes our understanding of
why these algorithms succeed (or fail). It also poses a major barrier to
addressing key challenges facing deep RL, such as widespread brittleness and
poor reproducibility (as has been observed by our 
<a href="https://gradientscience.org/policy_gradients_pt1">study in part one</a> and
many others, e.g., [<a href="https://arxiv.org/abs/1709.06560">1</a>,
<a href="https://www.alexirpan.com/2018/02/14/rl-hard.html">2</a>,
<a href="http://amid.fish/reproducing-deep-rl">3</a>]).</p>

<p>To close this gap, we need to either develop methods that adhere more closely to
theory, or build theory that can capture what makes existing policy gradient
methods successful. In both cases, the first step is to precisely pinpoint where
theory and practice diverge. Even more broadly, our findings suggest that
developing a deep RL toolkit that is truly robust and reliable will require
moving beyond the current benchmark-driven evaluation model, to a more
fine-grained understanding of deep RL algorithms.</p></div>
    </summary>
    <updated>2019-04-30T00:00:00Z</updated>
    <published>2019-04-30T00:00:00Z</published>
    <source>
      <id>http://gradientscience.org/</id>
      <author>
        <name>Gradient Science</name>
      </author>
      <link href="http://gradientscience.org/" rel="alternate" type="text/html"/>
      <link href="http://gradientscience.org/feed.xml" rel="self" type="application/atom+xml"/>
      <subtitle>Research highlights and perspectives on machine learning and optimization from MadryLab.</subtitle>
      <title>gradient science</title>
      <updated>2019-05-01T01:46:12Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1904.12747</id>
    <link href="http://arxiv.org/abs/1904.12747" rel="alternate" type="text/html"/>
    <title>Testing tensor products</title>
    <feedworld_mtime>1556582400</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/d/Dinur:Irit.html">Irit Dinur</a>, Konstantin Golubev <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1904.12747">PDF</a><br/><b>Abstract: </b>A function $f:[n]^d\to\mathbb{F}_2$ is a direct sum if it is of the form $
f\left((a_1,\dots,a_d)\right) = f_1(a_1)+\dots + f_d (a_d),$ for some $d$
functions $f_1,\dots,f_d:[n]\to\mathbb{F}_2$. We present a $4$-query test which
distinguishes between direct sums and functions that are far from them. The
test relies on the BLR linearity test and on the direct product test
constructed by Dinur and Steurer.
</p>
<p>We also present a different test, which queries the function $(d+1)$ times,
but is easier to analyze.
</p>
<p>In multiplicative $\pm 1$ notation, the above reads as follows. A
$d$-dimensional tensor with $\pm 1$ entries is called a tensor product if it is
a tensor product of $d$ vectors with $\pm 1$ entries. In other words, it is a
tensor product if it is of rank $1$. The presented tests check whether a given
tensor is close to a tensor product.
</p></div>
    </summary>
    <updated>2019-04-30T23:22:25Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Complexity"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CC" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Complexity (cs.CC) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CC updates on arXiv.org</title>
      <updated>2019-04-30T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1904.12424</id>
    <link href="http://arxiv.org/abs/1904.12424" rel="alternate" type="text/html"/>
    <title>Dichotomy for symmetric Boolean PCSPs</title>
    <feedworld_mtime>1556582400</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b>Miron Ficak, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/k/Kozik:Marcin.html">Marcin Kozik</a>, Miroslav Olsak, Szymon Stankiewicz <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1904.12424">PDF</a><br/><b>Abstract: </b>A PCSP is a combination of two CSPs defined by two similar templates; the
computational question is to distinguish a YES instance of the first one from a
NO instance of the second. The computational complexity of many PCSPs remains
unknown. Even the case of Boolean templates (solved for CSP by Schaefer
[STOC'78]) remains wide open.
</p>
<p>The main result of Brakensiek and Guruswami [SODA'18] shows that Boolean
PCSPs exhibit a dichotomy (PTIME vs. NPC) when "all the clauses are symmetric
and allow for negation of variables''. In this paper we remove the "allow for
negation of variables'' assumption from the theorem. The "symmetric" assumption
means that changing the order of variables in a constraint does not change its
satisfiability. The "negation of variables" means that both of the templates
share a relation which can be used to effectively negate Boolean variables.
</p>
<p>The main result of this paper establishes dichotomy for all the symmetric
boolean templates. The tractability case of our theorem and the theorem of
Brakensiek and Guruswami are almost identical. The main difference, and the
main contribution of this work, is the new reason for hardness and the
reasoning proving the split.
</p></div>
    </summary>
    <updated>2019-04-30T23:22:55Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Complexity"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CC" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Complexity (cs.CC) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CC updates on arXiv.org</title>
      <updated>2019-04-30T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1904.12335</id>
    <link href="http://arxiv.org/abs/1904.12335" rel="alternate" type="text/html"/>
    <title>Blended Matching Pursuit</title>
    <feedworld_mtime>1556582400</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b>Cyrille W. Combettes, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/p/Pokutta:Sebastian.html">Sebastian Pokutta</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1904.12335">PDF</a><br/><b>Abstract: </b>Matching pursuit algorithms are an important class of algorithms in signal
processing and machine learning. We present a blended matching pursuit
algorithm, combining coordinate descent-like steps with stronger gradient
descent steps, for minimizing a smooth convex function over a linear space
spanned by a set of atoms. We derive sublinear to linear convergence rates
according to the smoothness and sharpness orders of the function and
demonstrate computational superiority of our approach. In particular, we derive
linear rates for a wide class of non-strongly convex functions, and we
demonstrate in experiments that our algorithm enjoys very fast rates of
convergence and wall-clock speed while maintaining a sparsity of iterates very
comparable to that of the (much slower) orthogonal matching pursuit.
</p></div>
    </summary>
    <updated>2019-04-30T23:20:31Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Complexity"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CC" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Complexity (cs.CC) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CC updates on arXiv.org</title>
      <updated>2019-04-30T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1904.12156</id>
    <link href="http://arxiv.org/abs/1904.12156" rel="alternate" type="text/html"/>
    <title>Parameterised Counting Classes with Bounded Nondeterminism</title>
    <feedworld_mtime>1556582400</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/h/Haak:Anselm.html">Anselm Haak</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/m/Meier:Arne.html">Arne Meier</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/p/Prakash:Om.html">Om Prakash</a>, Raghavendra Rao B. V <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1904.12156">PDF</a><br/><b>Abstract: </b>Stockhusen and Tantau (IPEC 2013) introduced the operators paraW and paraBeta
for parameterised space complexity classes by allowing bounded nondeterminism
with read-only and read-once access, respectively. Using these operators, they
could characterise the complexity of many parameterisations of natural problems
on graphs. In this article, we study the counting versions of the parameterised
space-bounded complexity classes introduced by Stockhusen and Tantau (IPEC
2013). We show that natural path counting problems in digraphs are complete for
the newly introduced classes #paraWL and #paraBetaL. Finally, we introduce
parameterised counting classes based on branching programs (BPs). We show that
parameterised counting classes based on branching programs coincide with the
corresponding parameterised space bounded counting classes.
</p></div>
    </summary>
    <updated>2019-04-30T23:21:16Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Complexity"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CC" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Complexity (cs.CC) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CC updates on arXiv.org</title>
      <updated>2019-04-30T01:30:00Z</updated>
    </source>
  </entry>
</feed>
