<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:planet="http://planet.intertwingly.net/" xmlns:indexing="urn:atom-extension:indexing" indexing:index="no"><access:restriction xmlns:access="http://www.bloglines.com/about/specs/fac-1.0" relationship="deny"/>
  <title>Theory of Computing Blog Aggregator</title>
  <updated>2019-01-03T09:21:57Z</updated>
  <generator uri="http://intertwingly.net/code/venus/">Venus</generator>
  <author>
    <name>Arnab Bhattacharyya, Suresh Venkatasubramanian</name>
    <email>arbhat+cstheoryfeed@gmail.com</email>
  </author>
  <id>http://www.cstheory-feed.org/atom.xml</id>
  <link href="http://www.cstheory-feed.org/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="http://www.cstheory-feed.org/" rel="alternate"/>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1901.00479</id>
    <link href="http://arxiv.org/abs/1901.00479" rel="alternate" type="text/html"/>
    <title>Towards the Locality of Vizing's Theorem</title>
    <feedworld_mtime>1546473600</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/s/Su:Hsin=Hao.html">Hsin-Hao Su</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/v/Vu:Hoa_T=.html">Hoa T. Vu</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1901.00479">PDF</a><br/><b>Abstract: </b>Vizing showed that it suffices to color the edges of a simple graph using
$\Delta + 1$ colors, where $\Delta$ is the maximum degree of the graph.
However, up to this date, no efficient distributed edge-coloring algorithms are
known for obtaining such a coloring, even for constant degree graphs. The
current algorithms that get closest to this number of colors are the randomized
$(\Delta + \tilde{\Theta}(\sqrt{\Delta}))$-edge-coloring algorithm that runs in
$\text{polylog}(n)$ rounds by Chang et al. (SODA '18) and the deterministic
$(\Delta + \text{polylog}(n))$-edge-coloring algorithm that runs in
$\text{poly}(\Delta, \log n)$ rounds by Ghaffari et al. (STOC '18).
</p>
<p>We present two distributed edge-coloring algorithms that run in
$\text{poly}(\Delta,\log n)$ rounds. The first algorithm, with randomization,
uses only $\Delta+2$ colors. The second algorithm is a deterministic algorithm
that uses $\Delta+ O(\log n/ \log \log n)$ colors. Our approach is to reduce
the distributed edge-coloring problem into an online, restricted version of
balls-into-bins problem. If $\ell$ is the maximum load of the bins, our
algorithm uses $\Delta + 2\ell - 1$ colors. We show how to achieve $\ell = 1$
with randomization and $\ell = O(\log n / \log \log n)$ without randomization.
</p></div>
      <div class="commentbar">
        <p/>
      </div>
    </summary>
    <updated>2019-01-03T02:30:14Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-01-03T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1901.00335</id>
    <link href="http://arxiv.org/abs/1901.00335" rel="alternate" type="text/html"/>
    <title>Clique-Width for Hereditary Graph Classes</title>
    <feedworld_mtime>1546473600</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/d/Dabrowski:Konrad_K=.html">Konrad K. Dabrowski</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/j/Johnson:Matthew.html">Matthew Johnson</a>, Daniel Paulusma <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1901.00335">PDF</a><br/><b>Abstract: </b>Clique-width is a well-studied graph parameter owing to its use in
understanding algorithmic tractability: if the clique-width of a graph class
${\cal G}$ is bounded by a constant, a wide range of problems that are
NP-complete in general can be shown to be polynomial-time solvable on ${\cal
G}$. For this reason, the boundedness or unboundedness of clique-width has been
investigated and determined for many graph classes. We survey these results for
hereditary graph classes, which are the graph classes closed under taking
induced subgraphs. We then discuss the algorithmic consequences of these
results, in particular for the Colouring and Graph Isomorphism problems. We
also explain a possible strong connection between results on boundedness of
clique-width and on well-quasi-orderability by the induced subgraph relation
for hereditary graph classes.
</p></div>
      <div class="commentbar">
        <p/>
      </div>
    </summary>
    <updated>2019-01-03T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-01-03T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1901.00316</id>
    <link href="http://arxiv.org/abs/1901.00316" rel="alternate" type="text/html"/>
    <title>Deciding the existence of minority terms</title>
    <feedworld_mtime>1546473600</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/k/Kazda:Alexandr.html">Alexandr Kazda</a>, Jakub Opr≈°al, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/v/Valeriote:Matt.html">Matt Valeriote</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/z/Zhuk:Dmitriy.html">Dmitriy Zhuk</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1901.00316">PDF</a><br/><b>Abstract: </b>This paper investigates the computational complexity of deciding if a given
finite idempotent algebra has a ternary term operation $m$ that satisfies the
minority equations $m(y,x,x) \approx m(x,y,x) \approx m(x,x,y) \approx y$. We
show that a common polynomial-time approach to testing for this type of
condition will not work in this case and that this decision problem lies in the
class NP.
</p></div>
      <div class="commentbar">
        <p/>
      </div>
    </summary>
    <updated>2019-01-03T02:23:38Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Complexity"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CC" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Complexity (cs.CC) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CC updates on arXiv.org</title>
      <updated>2019-01-03T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1901.00238</id>
    <link href="http://arxiv.org/abs/1901.00238" rel="alternate" type="text/html"/>
    <title>Singularity Structure Simplification of Hexahedral Mesh Weighted Ranking</title>
    <feedworld_mtime>1546473600</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/x/Xu:Gang.html">Gang Xu</a>, Ran Ling, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/z/Zhang:Jessica.html">Jessica Zhang</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/x/Xiao:Zhoufang.html">Zhoufang Xiao</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/j/Ji:Zhongping.html">Zhongping Ji</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/r/Rabczuk:Timon.html">Timon Rabczuk</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1901.00238">PDF</a><br/><b>Abstract: </b>In this paper, we propose an improved singularity structure simplification
method for hexahedral (hex) meshes using a weighted ranking approach. In
previous work, the selection of to-be-collapsed base complex sheets/chords is
only based on their thickness, which will introduce a few closed-loops and
cause an early termination of simplification and a slow convergence rate. In
this paper, a new weighted ranking function is proposed by combining the
valence prediction function of local singularity structure, shape quality
metric of elements and the width of base complex sheets/chords together.
Adaptive refinement and local optimization are also introduced to improve the
uniformity and aspect ratio of mesh elements. Compared to thickness ranking
methods, our weighted ranking approach can yield a simpler singularity
structure with fewer base-complex components, while achieving comparable
Hausdorff distance ratio and better mesh quality. Comparisons on a hex-mesh
dataset are performed to demonstrate the effectiveness of the proposed method.
</p></div>
      <div class="commentbar">
        <p/>
      </div>
    </summary>
    <updated>2019-01-03T02:24:36Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Geometry"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CG" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Geometry (cs.CG) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CG updates on arXiv.org</title>
      <updated>2019-01-03T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1901.00156</id>
    <link href="http://arxiv.org/abs/1901.00156" rel="alternate" type="text/html"/>
    <title>On the Parameterized Cluster Editing with Vertex Splitting Problem</title>
    <feedworld_mtime>1546473600</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/a/Abu=Khzam:Faisal_N=.html">Faisal N. Abu-Khzam</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/e/Egan:Judith.html">Judith Egan</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/g/Gaspers:Serge.html">Serge Gaspers</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/s/Shaw:Alexis.html">Alexis Shaw</a>, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/s/Shaw:Peter.html">Peter Shaw</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1901.00156">PDF</a><br/><b>Abstract: </b>In the Cluster Editing problem, a given graph is to be transformed into a
disjoint union of cliques via a minimum number of edge editing operations. In
this paper we introduce a new variant of Cluster Editing whereby a vertex can
be divided, or split, into two or more vertices thus allowing a single vertex
to belong to multiple clusters. This new problem, Cluster Editing with Vertex
Splitting, has applications in finding correlation clusters in discrete data,
including graphs obtained from Biological Network analysis. We initiate the
study of this new problem and show that it is fixed-parameter tractable when
parameterized by the total number of vertex splitting and edge editing
operations. In particular we obtain a 4k(k + 1) vertex kernel for the problem
and an $\Oh^*(2^{\Oh(k^2)})$ search algorithm.
</p></div>
      <div class="commentbar">
        <p/>
      </div>
    </summary>
    <updated>2019-01-03T00:00:00Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Data Structures and Algorithms"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.DS" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Data Structures and Algorithms (cs.DS) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.DS updates on arXiv.org</title>
      <updated>2019-01-03T01:30:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>http://arxiv.org/abs/1901.00138</id>
    <link href="http://arxiv.org/abs/1901.00138" rel="alternate" type="text/html"/>
    <title>Algorithmically Efficient Syntactic Characterization of Possibility Domains</title>
    <feedworld_mtime>1546473600</feedworld_mtime>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><b>Authors: </b><a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/d/D=iacute=az:Josep.html">Josep D√≠az</a>, Lefteris Kirousis, Sofia Kokonezi, <a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/l/Livieratos:John.html">John Livieratos</a> <br/><b>Download:</b> <a href="http://arxiv.org/pdf/1901.00138">PDF</a><br/><b>Abstract: </b>We call domain any arbitrary subset of a Cartesian power of the set $\{0,1\}$
when we think of it as reflecting abstract rationality restrictions on vectors
of two-valued judgments on a number of issues. In Computational Social Choice
Theory, and in particular in the theory of judgment aggregation, a domain is
called a possibility domain if it admits a non-dictatorial aggregator, i.e. if
for some $k$ there exists a unanimous (idempotent) function $F:D^k \rightarrow
D$ which is not a projection function. We prove that a domain is a possibility
domain if and only if there is a propositional formula of a certain syntactic
form whose set of satisfying truth assignments, or models, comprise the domain.
A formula whose set of satisfying truth assignments is equal to a given
arbitrary domain $D$ is sometimes referred to as an integrity constraint for
$D$. So we call {\em possibility} integrity constraints the formulas of the
specific syntactic type we define. Given a possibility domain $D$, we show how
to construct a possibility integrity constraint for $D$ efficiently, i.e, in
polynomial time in the size of the domain. We also show how to distinguish
formulas that are possibility integrity constraints in linear time in the size
of the input formula. Our result falls in the realm of classical results that
give syntactic characterizations of logical relations that have certain closure
properties, like e.g. the result that logical relations component-wise closed
under logical AND are precisely the models of Horn formulas. However, our
techniques draw from results in judgment aggregation theory as well from
results about propositional formulas and logical relations.
</p></div>
      <div class="commentbar">
        <p/>
      </div>
    </summary>
    <updated>2019-01-03T02:20:11Z</updated>
    <author>
      <name/>
    </author>
    <source>
      <id>http://arxiv.org/</id>
      <category term="Computer Science -- Computational Complexity"/>
      <link href="http://arxiv.org/" rel="alternate" type="text/html"/>
      <link href="http://export.arxiv.org/rss/cs.CC" rel="self" type="application/rdf+xml"/>
      <subtitle>Computer Science -- Computational Complexity (cs.CC) updates on the arXiv.org e-print archive</subtitle>
      <title>cs.CC updates on arXiv.org</title>
      <updated>2019-01-03T01:30:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://cstheory.stackexchange.com/q/42138</id>
    <link href="https://cstheory.stackexchange.com/questions/42138/the-definition-of-weakest-precondition-for-a-non-deterministic-language" rel="alternate" type="text/html"/>
    <title>The definition of weakest precondition for a non-deterministic language</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>In the classical IMP language, the definition of weakest precondition is:</p>

<pre><code>definition "wp c Q s ‚â° ‚àÉt. (c,s) ‚áí t ‚àß Q t"
</code></pre>

<p>This is stating that from state s, after executing c we get to a state satisfying Q. My question comes when handling the selection construct in the language of guarded commands (see selection command in <a href="https://en.wikipedia.org/wiki/Predicate_transformer_semantics" rel="nofollow noreferrer">Wikipedia</a>). My guess is that in this case one needs to define:</p>

<pre><code>definition "wp c Q s ‚â° ‚àÉt. (c,s) ‚áí t ‚àß (‚àÄ t'. (c,s) ‚áí t' ‚ü∂ Q t)"
</code></pre>

<p>I wonder if this is correct. Currently, I'm having problems proving the weakest precondition definition for the sequential composition of commands:</p>

<pre><code>"wp (c1;;c2) Q s = wp c1 (wp c2 Q) s" 
</code></pre>

<p>So, I'm beginning to think my definition is wrong.</p>

<p>Does anybody see what am I doing wrong?</p></div>
    </summary>
    <updated>2019-01-02T21:05:32Z</updated>
    <published>2019-01-02T21:05:32Z</published>
    <category scheme="https://cstheory.stackexchange.com/tags" term="pl.programming-languages"/>
    <category scheme="https://cstheory.stackexchange.com/tags" term="semantics"/>
    <category scheme="https://cstheory.stackexchange.com/tags" term="formal-methods"/>
    <author>
      <name>Javier</name>
      <uri>https://cstheory.stackexchange.com/users/36456</uri>
    </author>
    <source>
      <id>https://cstheory.stackexchange.com/feeds/</id>
      <link href="https://cstheory.stackexchange.com/feeds/" rel="self" type="application/atom+xml"/>
      <link href="https://cstheory.stackexchange.com/questions" rel="alternate" type="text/html"/>
      <link href="http://www.creativecommons.org/licenses/by-sa/3.0/rdf" rel="license"/>
      <subtitle>most recent 30 from cstheory.stackexchange.com</subtitle>
      <title>Recent Questions - Theoretical Computer Science Stack Exchange</title>
      <updated>2019-01-03T09:20:39Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://cstheory-jobs.org/2019/01/02/faculty-position-in-theoretical-cs-at-imperial-college-london-apply-by-january-7-2019-2/</id>
    <link href="https://cstheory-jobs.org/2019/01/02/faculty-position-in-theoretical-cs-at-imperial-college-london-apply-by-january-7-2019-2/" rel="alternate" type="text/html"/>
    <title>Faculty Position in Theoretical CS at Imperial College London (apply by January 7, 2019)</title>
    <summary>Multiple faculty openings (at Assistant Professor level) including a dedicaed position in CS theory. Department of Computing at Imperial College London has ambitious plans of expansion in all areas, including theory. Academics in the department enjoy a mild teaching load, which is currently up to 1.5 one-term courses per year. Each term amounts to about [‚Ä¶]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Multiple faculty openings (at Assistant Professor level) including a dedicaed position in CS theory. Department of Computing at Imperial College London has ambitious plans of expansion in all areas, including theory. Academics in the department enjoy a mild teaching load, which is currently up to 1.5 one-term courses per year. Each term amounts to about 10 weeks of teaching. Deadline is strict.</p>
<p>Website: <a href="https://www.imperial.ac.uk/jobs/description/ENG00581/six-lectureships-assistant-professor-senior-lectureships-associate-professor-computer-science/">https://www.imperial.ac.uk/jobs/description/ENG00581/six-lectureships-assistant-professor-senior-lectureships-associate-professor-computer-science/</a><br/>
Email: margaret.hall@imperial.ac.uk</p></div>
    </content>
    <updated>2019-01-02T20:25:47Z</updated>
    <published>2019-01-02T20:25:47Z</published>
    <category term="Uncategorized"/>
    <author>
      <name>shacharlovett</name>
    </author>
    <source>
      <id>https://cstheory-jobs.org</id>
      <logo>https://s0.wp.com/i/buttonw-com.png</logo>
      <link href="https://cstheory-jobs.org/feed/" rel="self" type="application/atom+xml"/>
      <link href="https://cstheory-jobs.org" rel="alternate" type="text/html"/>
      <link href="https://cstheory-jobs.org/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="https://cstheory-jobs.org/?pushpress=hub" rel="hub" type="text/html"/>
      <title>Theoretical Computer Science Jobs</title>
      <updated>2019-01-03T09:20:57Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://gilkalai.wordpress.com/?p=16724</id>
    <link href="https://gilkalai.wordpress.com/2019/01/02/jean/" rel="alternate" type="text/html"/>
    <title>Jean</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Jean Bourgain and Joram Lindenstrauss. I was very sad to hear that Jean Bourgain, among the greatest mathematicians of our time, and a dear friend, passed away.¬† I first met Jean about forty years ago and later we have become ‚Ä¶ <a href="https://gilkalai.wordpress.com/2019/01/02/jean/">Continue reading <span class="meta-nav">‚Üí</span></a></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://gilkalai.files.wordpress.com/2018/12/Jean-Joram.png"><img alt="" class="alignnone size-full wp-image-16725" height="500" src="https://gilkalai.files.wordpress.com/2018/12/Jean-Joram.png?w=640&amp;h=500" width="640"/></a></p>
<p><span style="color: #ff0000;">Jean Bourgain and Joram Lindenstrauss.</span></p>
<p>I was very sad to hear that Jean Bourgain, among the greatest mathematicians of our time, and a dear friend, passed away.¬† I first met Jean about forty years ago and later we have become friends and collaborators.¬† In the 80s and 90s Jean used to visit Israel quite often and had close collaboration with the Banach space Israeli community, and with the Ergodic theory community,¬† and with the Harmonic analysis community, and the PDE community, and later also with the combinatorics, probability,¬† algebra, number theory,¬† and theoretical computer science communities.¬† I always admired his immense mathematical powers and his deep devotion to mathematics.</p>
<p>You can read about Jean Bourgain in Terry Tao‚Äôs <a href="https://terrytao.wordpress.com/2018/12/29/jean-bourgain/">beautiful obituary post</a>.¬† I was also moved by Svetlana Jitomirskaya‚Äôs beautiful <a href="https://www.facebook.com/photo.php?fbid=10106557607678501&amp;set=a.10102850768938051&amp;type=3&amp;theater">facebook post</a>.¬†Some of Jean‚Äôs contributions to combinatorics (which formed a small portion of his interests) are mentioned in <a href="https://gilkalai.wordpress.com/tag/jean-bourgain/">several posts¬†</a>over my blog (and my lecture below). I will try to come back to these mathematical topics at a later post and here I post a few pictures of Jean over the years. Here is the moving <a href="https://www.ias.edu/news/2018/bourgain-obituary-notice">IAS obituary notice</a>. See also Ryan O‚ÄôDonnell‚Äôs <a href="https://terrytao.wordpress.com/2018/12/29/jean-bourgain/#comment-509792">moving comment</a>.</p>
<p>¬†</p>
<p/>
<p><span style="color: #ff0000;"><strong>My 2016 lecture ‚ÄúQuestions for Jean Bourgain‚Äù about questions that I (and some colleagues) asked Jean Bourgain over the years, mainly in the areas of combinatorics and combinatorial aspects of convexity.</strong></span></p>
<p><span id="more-16724"/></p>
<p><a href="https://gilkalai.files.wordpress.com/2019/01/SvetlanaonJean.png"><img alt="" class="alignnone size-full wp-image-16740" src="https://gilkalai.files.wordpress.com/2019/01/SvetlanaonJean.png?w=640"/></a></p>
<p class="_14f3 _14f5 _5pbw _5vra" id="js_6s"><span style="color: #0000ff;"><strong><span class="fwn fcg"><span class="fwb fcg">Svetlana Jitomirskaya:</span></span></strong></span></p>
<p>–í–µ—á–Ω–æ—Å—Ç–∏ –∑–∞–ª–æ–∂–Ω–∏–∫<br/>
–£ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø–ª–µ–Ω—É</p>
<p>Eternity‚Äôs ambassador<br/>
held captive by the time‚Ä¶</p>
<p>He was truly a gift from God to humanity and yet unparalleled in his kindness, humbleness, and generosity.</p>
<p>It is an enormous loss</p>
<p>February 28, 1954 ‚Äì December 22, 2018</p>
<p><a href="https://gilkalai.files.wordpress.com/2019/01/KFBT.jpg"><img alt="" class="alignnone size-full wp-image-16742" height="439" src="https://gilkalai.files.wordpress.com/2019/01/KFBT.jpg?w=640&amp;h=439" width="640"/></a></p>
<p>Hermann K<em>√∂</em>nig,Tadeusz Figiel, Jean Bourgain, and Lior Tzafriri¬† (<a href="http://www.math.kent.edu/~mtackett/mathweb/pictures/banach.html">Banach Center Photo Archive</a>)</p>
<p><a href="https://gilkalai.files.wordpress.com/2019/01/JeanRussell.jpg"><img alt="" class="alignnone size-full wp-image-16747" height="454" src="https://gilkalai.files.wordpress.com/2019/01/JeanRussell.jpg?w=640&amp;h=454" width="640"/></a></p>
<p>With <span dir="ltr">Russell Impagliazzo¬†</span>(picture taken from the IAS obituary)</p>
<p><a href="https://gilkalai.files.wordpress.com/2019/01/JB.jpg"><img alt="" class="alignnone size-full wp-image-16743" height="489" src="https://gilkalai.files.wordpress.com/2019/01/JB.jpg?w=640&amp;h=489" width="640"/></a></p>
<p>An early picture near the blackboard</p>
<p><a href="https://gilkalai.files.wordpress.com/2019/01/AlexJeanPeter.png"><img alt="" class="alignnone size-full wp-image-16755" src="https://gilkalai.files.wordpress.com/2019/01/AlexJeanPeter.png?w=640"/></a></p>
<p>Alex Gamburd, Jean Bourgain, and Peter Sarnak.</p>
<p><a href="https://gilkalai.files.wordpress.com/2019/01/crafoord-day.jpg"><img alt="" class="alignnone size-full wp-image-16744" src="https://gilkalai.files.wordpress.com/2019/01/crafoord-day.jpg?w=640"/></a></p>
<p>Crafoord day, Lund 2012¬†Carlos Kenig, Ben Green, Jean, Terry Tao, me, and Michael Christ.</p>
<p>¬†</p>
<p><a href="https://gilkalai.files.wordpress.com/2019/01/jeangil88.png"><img alt="" class="alignnone size-full wp-image-16741" height="470" src="https://gilkalai.files.wordpress.com/2019/01/jeangil88.png?w=640&amp;h=470" width="640"/></a></p>
<p>At IHES, 1989</p>
<h3>Pictures of early version of our first joint work (around 1990) with Izzy Katznelson, Jeff Kahn and Nati Linial.</h3>
<p>The initial approach had a 22 page long proof and my copy has a dense (Hebrew) handwritten explanation all the way to page 15.</p>
<p><a href="https://gilkalai.files.wordpress.com/2019/01/BKKKL2.png"><img alt="" class="alignnone size-full wp-image-16738" height="325" src="https://gilkalai.files.wordpress.com/2019/01/BKKKL2.png?w=640&amp;h=325" width="640"/></a></p>
<p>¬†</p>
<p style="text-align: center;"><span style="color: #ff0000;">Part of Page 6</span></p>
<p><a href="https://gilkalai.files.wordpress.com/2019/01/BKKK3.png"><img alt="" class="alignnone size-full wp-image-16739" height="399" src="https://gilkalai.files.wordpress.com/2019/01/BKKK3.png?w=640&amp;h=399" width="640"/></a></p>
<p style="text-align: center;"><span style="color: #ff0000;">Part of page 19</span></p>
<p>At the end we found a shortcut to the problem itself, but both Jean and I have felt over the years that the deeper methods developed initially by Jean may have further important use.</p></div>
    </content>
    <updated>2019-01-02T19:09:52Z</updated>
    <published>2019-01-02T19:09:52Z</published>
    <category term="Algebra and Number Theory"/>
    <category term="Analysis"/>
    <category term="Combinatorics"/>
    <category term="Computer Science and Optimization"/>
    <category term="Convexity"/>
    <category term="Obituary"/>
    <category term="Jean Bourgain"/>
    <author>
      <name>Gil Kalai</name>
    </author>
    <source>
      <id>https://gilkalai.wordpress.com</id>
      <logo>https://s0.wp.com/i/buttonw-com.png</logo>
      <link href="https://gilkalai.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="https://gilkalai.wordpress.com" rel="alternate" type="text/html"/>
      <link href="https://gilkalai.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="https://gilkalai.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Gil Kalai's blog</subtitle>
      <title>Combinatorics and more</title>
      <updated>2019-01-03T09:20:54Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://cstheory.stackexchange.com/q/42135</id>
    <link href="https://cstheory.stackexchange.com/questions/42135/strong-seeded-randomness-extractors-with-minimal-entropy-loss" rel="alternate" type="text/html"/>
    <title>Strong seeded randomness extractors with minimal entropy loss</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I would like to implement a strong seeded randomness extractor as a part of my project. </p>

<p>Most of the literature on seeded extractors is concentrated on minimizing seed length. However, low entropy loss is crucial for my construction. What are the known extractors with minimal entropy loss? How efficient is the extractor in practice? </p>

<p>Is there a lower bound on the entropy loss for strong seeded extractors? </p>

<p>Are there any implementations of extractors that I can use off the shelf?</p></div>
    </summary>
    <updated>2019-01-02T16:48:50Z</updated>
    <published>2019-01-02T16:48:50Z</published>
    <category scheme="https://cstheory.stackexchange.com/tags" term="lower-bounds"/>
    <category scheme="https://cstheory.stackexchange.com/tags" term="randomness"/>
    <category scheme="https://cstheory.stackexchange.com/tags" term="pseudorandomness"/>
    <category scheme="https://cstheory.stackexchange.com/tags" term="extractors"/>
    <author>
      <name>satya</name>
      <uri>https://cstheory.stackexchange.com/users/51635</uri>
    </author>
    <source>
      <id>https://cstheory.stackexchange.com/feeds/</id>
      <link href="https://cstheory.stackexchange.com/feeds/" rel="self" type="application/atom+xml"/>
      <link href="https://cstheory.stackexchange.com/questions" rel="alternate" type="text/html"/>
      <link href="http://www.creativecommons.org/licenses/by-sa/3.0/rdf" rel="license"/>
      <subtitle>most recent 30 from cstheory.stackexchange.com</subtitle>
      <title>Recent Questions - Theoretical Computer Science Stack Exchange</title>
      <updated>2019-01-03T09:20:39Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://cstheory.stackexchange.com/q/42134</id>
    <link href="https://cstheory.stackexchange.com/questions/42134/lambda-abstraction-equivalence-confusion" rel="alternate" type="text/html"/>
    <title>Lambda abstraction equivalence confusion</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I'm reading <a href="http://www.cs.cornell.edu/courses/cs3110/2008fa/recitations/rec26.html" rel="nofollow noreferrer">this</a> explanation of Lambda Calculus and right at the beginning I see this:</p>

<p><span class="math-container">$\lambda x.\lambda y.y \equiv \lambda x.(x\,(\lambda y.y))$</span> not <span class="math-container">$(\lambda x.x)(\lambda y.y)$</span></p>

<p>and I'm not sure how this is true. I guess I'm not sure how <span class="math-container">$\lambda x.(x\,(\lambda y.y))$</span> reduces to <span class="math-container">$\lambda x.\lambda y.y$</span> . How is the variable <span class="math-container">$x$</span> behaving here? One stab in the dark would be to reason that <span class="math-container">$\lambda x.x$</span> is the identity function, therefore, <span class="math-container">$(\lambda x.x)(\lambda y.y)$</span> would reduce to <span class="math-container">$\lambda y.y$</span>, which is not what we want. So I understand the <em>not</em> part. . . . BTW, how do <span class="math-container">$\lambda x.\lambda y.y$</span> and <span class="math-container">$\lambda x.(\lambda y.y)$</span> differ?</p></div>
    </summary>
    <updated>2019-01-02T04:02:43Z</updated>
    <published>2019-01-02T04:02:43Z</published>
    <category scheme="https://cstheory.stackexchange.com/tags" term="lambda-calculus"/>
    <author>
      <name>147pm</name>
      <uri>https://cstheory.stackexchange.com/users/32039</uri>
    </author>
    <source>
      <id>https://cstheory.stackexchange.com/feeds/</id>
      <link href="https://cstheory.stackexchange.com/feeds/" rel="self" type="application/atom+xml"/>
      <link href="https://cstheory.stackexchange.com/questions" rel="alternate" type="text/html"/>
      <link href="http://www.creativecommons.org/licenses/by-sa/3.0/rdf" rel="license"/>
      <subtitle>most recent 30 from cstheory.stackexchange.com</subtitle>
      <title>Recent Questions - Theoretical Computer Science Stack Exchange</title>
      <updated>2019-01-03T09:20:39Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://cstheory.stackexchange.com/q/42133</id>
    <link href="https://cstheory.stackexchange.com/questions/42133/what-is-a-good-route-for-a-math-student-to-self-study-computer-science-systemati" rel="alternate" type="text/html"/>
    <title>What is a good route for a math student to self study computer science systematically and efficiently?</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I decided to ask this question after being attracted by how much one can do with the knowledge in computer science, including iOS application development, game(or mods) development, website creating, etc., but having trouble with matching what I learned with what I really understood. </p>

<p>Realizing the lack of knowledge in programming, I once decided to learn programming in a specific language, like Objective-C and Swift. After I tried every single textbook on OC programming, I found myself wasting time in the "explanation" part and getting lost with the real "theoretical" part. It seems to me that those textbooks prefer a long and loose explanation in describing a concept without telling me what exactly it is(Like the notion of "Object" and "Pointer") and skip the real important "thinking" before the implementation of the code. Although after many times of reading I could create a very simple application(like a simple calculator), I was still very lost in how it really works.</p>

<p>That reminds me how I began to learn mathematics. In middle school "function" is just "<span class="math-container">$y=f(x)$</span>", where <span class="math-container">$f(x)$</span> can be <span class="math-container">$x^2$</span>, <span class="math-container">$\sin(x)$</span>, and other operations about <span class="math-container">$x$</span>. However, now for me <span class="math-container">$f$</span> is a set of tuples satisfying the unique mapping property, or an arrow with domain and codomain. More generally, I can give a affirmative response to every question like "what is (the definition of) this?(in a math sentence.)" So I asked myself, "what is most basic among all subjects in computer science"? </p>

<p>Based on the belief that computer system and programming can be completely theoretical, I decided to learn from the very basic. That's when I began to have trouble because of the lack of knowledge in the computer science world. Where is the code for my programming environment?(For me, Xcode) and how can I understand it? What is a computer made of (up to the transistors), and how do them work together? 
But then I found out that there is no book with the name similar to "how a computer works" that reach my satisfaction, which I thought is my vocabulary problem. </p>

<p>I hope that in the book I'm looking for, every keyword is rigorously defined, and without any waste of time in explaining what a notion "means" or how it is developed stage by stage historically. I expect that it gives only the goals(like the adding machine) and how to build it from the given definitions(a graph with the nodes of value "0" or "1"). Every textbooks in mathematics(like the GTM series) reach this goal, and for me, that is MUCH easier to read and understand. I think most of the math student like me will prefer this style of learning.</p>

<p>What is a good (book) route for a math student to self study computer science from the basic? I wish there are some theoretical textbooks that build the whole operation system, compiler, or some of this kind, that is readable to math students. Any answer would be much appreciated. Thank you. </p></div>
    </summary>
    <updated>2019-01-01T23:57:18Z</updated>
    <published>2019-01-01T23:57:18Z</published>
    <category scheme="https://cstheory.stackexchange.com/tags" term="reference-request"/>
    <category scheme="https://cstheory.stackexchange.com/tags" term="books"/>
    <author>
      <name>William Sun</name>
      <uri>https://cstheory.stackexchange.com/users/51630</uri>
    </author>
    <source>
      <id>https://cstheory.stackexchange.com/feeds/</id>
      <link href="https://cstheory.stackexchange.com/feeds/" rel="self" type="application/atom+xml"/>
      <link href="https://cstheory.stackexchange.com/questions" rel="alternate" type="text/html"/>
      <link href="http://www.creativecommons.org/licenses/by-sa/3.0/rdf" rel="license"/>
      <subtitle>most recent 30 from cstheory.stackexchange.com</subtitle>
      <title>Recent Questions - Theoretical Computer Science Stack Exchange</title>
      <updated>2019-01-03T09:20:39Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-27705661.post-5864407579793524954</id>
    <link href="http://processalgebra.blogspot.com/feeds/5864407579793524954/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://www.blogger.com/comment.g?blogID=27705661&amp;postID=5864407579793524954" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/27705661/posts/default/5864407579793524954" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/27705661/posts/default/5864407579793524954" rel="self" type="application/atom+xml"/>
    <link href="http://processalgebra.blogspot.com/2019/01/thirty-five-years-of-testing.html" rel="alternate" type="text/html"/>
    <title>Thirty-five years of "Testing Equivalences for Processes" (TCS edition)</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Thirty-five years ago, <a href="https://www.imtlucca.it/rocco.denicola" target="_blank">Rocco De Nicola</a> and <a href="https://scholar.google.com/citations?user=wIto1LUAAAAJ&amp;hl=en" target="_blank">Matthew Hennessy</a> published the <a href="https://doi.org/10.1016/0304-3975(84)90113-0" target="_blank">archival paper </a>introducing the notions of testing equivalence over concurrent processes in the journal Theoretical Computer Science. These testing equivalences embody in a natural and mathematically elegant way the intuitive idea that two processes should be equated unless they behave differently when subjected to some ‚Äòexperiment‚Äô or ‚Äòtest‚Äô. The origin of this notion of equivalence can be traced back to <a href="https://en.wikipedia.org/wiki/Gottfried_Wilhelm_Leibniz" target="_blank">Gottfried Wilhelm Leibniz </a>(1646‚Äì1716), who stated that two mathematical objects are equal if there is no test to distinguish them. In the semantics of programming languages, its earliest precursor is, to the best of my¬† knowledge, the notion of contextual equivalence proposed by Morris in his doctoral dissertation.<br/><br/>In general, given a set of processes, a set of tests and a relation between processes and tests that describes when a process passes a test, one can apply Leibniz‚Äôs motto and declare two processes to be equivalent if if they pass exactly the same set of tests. In the work of De Nicola and Hennessy, processes are states in some <a href="https://en.wikipedia.org/wiki/Transition_system" target="_blank">labelled transition system</a>. A test is itself a process, which interacts with a concurrent system under observation by hand-shake synchronisation and uses a distinguished action to report success in its observation. Since both processes and tests may be nondeterministic, the interaction between a process and a test may lead to different outcomes depending on how the two systems resolve their nondeterministic choices in the course of a computation. This led De Nicola and Hennessy to define three notions of testing semantics, which are naturally expressed in terms of preorders over processes.<br/><br/>In the so-called may semantics, a process q is at least as good as some process p if the set of tests that p may pass is included in the set of tests that q may pass. In may semantics, possible failure under a test is immaterial and therefore nondeterminism is angelic. On the other hand, one may take the view that failure in the testing effort is catastrophic, in the sense that a process that may fail some test is just as bad as one that always fails it. The notion of testing semantics that captures this viewpoint is the so-called must semantics, according to which a process q is at¬† least as good as some process p if the set of tests that p must pass is included in the set of tests that q must pass. Finally, a third testing preorder over processes is obtained as the intersection of the may and must preorders described above. According to this more refined view of process behaviour, a process that always fails a test is worse than one that may pass that test, which in turn is worse than one that always passes it.<br/><br/>De Nicola and Hennessy explored the rich theory of the testing semantics in their seminal TCS paper (see <a href="https://mitpress.mit.edu/books/algebraic-theory-processes" target="_blank">this monograph</a> for a classic, book-length treatment), where each of these semantics is given operational, denotational and axiomatic accounts that are in agreement one with the other. Their ideas and the accompanying technical results have had an enormous impact on further research, as witnessed, among other things, by the 1,640 citations to the TCS paper published in 1984 (source: <a href="https://scholar.google.com/citations?user=Meb6JFkAAAAJ&amp;hl=en" target="_blank">Google Scholar </a>today).<br/><br/>Happy 2019 to everyone.<br/><br/><br/><br/></div>
      <div class="commentbar">
        <p/>
        <span class="commentbutton" href="http://processalgebra.blogspot.com/feeds/5864407579793524954/comments/default"/>
        <a href="http://processalgebra.blogspot.com/feeds/5864407579793524954/comments/default">
          <img class="commenticon" src="/images/feed-icon.png"/> Subscribe to comments
        </a>  | 
        <a href="http://www.blogger.com/comment.g?blogID=27705661&amp;postID=5864407579793524954">
          <img class="commenticon" src="/images/post-icon.png"/> Post a comment
        </a>
      </div>
    </content>
    <updated>2019-01-01T22:06:00Z</updated>
    <published>2019-01-01T22:06:00Z</published>
    <author>
      <name>Luca Aceto</name>
      <email>noreply@blogger.com</email>
      <uri>http://www.blogger.com/profile/01092671728833265127</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-27705661</id>
      <author>
        <name>Luca Aceto</name>
        <email>noreply@blogger.com</email>
        <uri>http://www.blogger.com/profile/01092671728833265127</uri>
      </author>
      <link href="http://processalgebra.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/27705661/posts/default" rel="self" type="application/atom+xml"/>
      <link href="http://processalgebra.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <link href="http://www.blogger.com/feeds/27705661/posts/default?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml"/>
      <subtitle>Papers I find interesting---mostly, but not solely, in Process Algebra---, and some fun stuff in Mathematics and Computer Science at large and on general issues related to research, teaching and academic life.</subtitle>
      <title>Process Algebra Diary</title>
      <updated>2019-01-02T10:24:33Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://cstheory.stackexchange.com/q/42132</id>
    <link href="https://cstheory.stackexchange.com/questions/42132/separating-words-and-graph-isomorphism" rel="alternate" type="text/html"/>
    <title>Separating words and graph isomorphism</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I wonder if there are any known implications of Babai's recent quasi-polynomial time algorithm for Graph Isomorphism to <a href="https://cstheory.stackexchange.com/a/22494/419">separating words by DFA's</a>.
In both cases the ultimate goal is to differentiate some object, though the conditions are quite different.
I would like to know what people more familiar with Babai's proof think about whether some of the ideas there are applicable to word separation or not.</p></div>
    </summary>
    <updated>2019-01-01T21:18:15Z</updated>
    <published>2019-01-01T21:18:15Z</published>
    <category scheme="https://cstheory.stackexchange.com/tags" term="graph-theory"/>
    <category scheme="https://cstheory.stackexchange.com/tags" term="graph-isomorphism"/>
    <category scheme="https://cstheory.stackexchange.com/tags" term="dfa"/>
    <author>
      <name>domotorp</name>
      <uri>https://cstheory.stackexchange.com/users/419</uri>
    </author>
    <source>
      <id>https://cstheory.stackexchange.com/feeds/</id>
      <link href="https://cstheory.stackexchange.com/feeds/" rel="self" type="application/atom+xml"/>
      <link href="https://cstheory.stackexchange.com/questions" rel="alternate" type="text/html"/>
      <link href="http://www.creativecommons.org/licenses/by-sa/3.0/rdf" rel="license"/>
      <subtitle>most recent 30 from cstheory.stackexchange.com</subtitle>
      <title>Recent Questions - Theoretical Computer Science Stack Exchange</title>
      <updated>2019-01-03T09:20:39Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://cstheory.stackexchange.com/q/42130</id>
    <link href="https://cstheory.stackexchange.com/questions/42130/busy-beaver-equivalent-for-the-untyped-lambda-calculus" rel="alternate" type="text/html"/>
    <title>Busy Beaver Equivalent for the Untyped Lambda Calculus</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>In the same way that the Busy Beaver function is defined for Turing Machines, we could define a similar function for the untyped lambda calculus:</p>

<p>Over all terms in the ULC composed of <code>n</code> abstractions, variables and applications, which has the longest normal form?</p>

<p>This could be defined in a couple ways: we could consider only strongly normalizing ULC terms, or we could look for the longest normal form over all replacements.</p>

<p>Clearly, this function is not computable for arbitrarily large <code>n</code>, for the same reason as for the standard Busy Beaver function. However, I am interested in whether anything is known about this function for small values of <code>n</code>. What values is it known for? What bounds exists for higher <code>n</code>? For what <code>n</code> is the value known to be independent of ZFC?</p></div>
    </summary>
    <updated>2019-01-01T13:07:28Z</updated>
    <published>2019-01-01T13:07:28Z</published>
    <category scheme="https://cstheory.stackexchange.com/tags" term="lo.logic"/>
    <category scheme="https://cstheory.stackexchange.com/tags" term="pl.programming-languages"/>
    <category scheme="https://cstheory.stackexchange.com/tags" term="lambda-calculus"/>
    <author>
      <name>isaacg</name>
      <uri>https://cstheory.stackexchange.com/users/25504</uri>
    </author>
    <source>
      <id>https://cstheory.stackexchange.com/feeds/</id>
      <link href="https://cstheory.stackexchange.com/feeds/" rel="self" type="application/atom+xml"/>
      <link href="https://cstheory.stackexchange.com/questions" rel="alternate" type="text/html"/>
      <link href="http://www.creativecommons.org/licenses/by-sa/3.0/rdf" rel="license"/>
      <subtitle>most recent 30 from cstheory.stackexchange.com</subtitle>
      <title>Recent Questions - Theoretical Computer Science Stack Exchange</title>
      <updated>2019-01-03T09:20:39Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://cstheory.stackexchange.com/q/42129</id>
    <link href="https://cstheory.stackexchange.com/questions/42129/how-to-prove-that-models-of-indirect-and-direct-ram-machines-are-equivalent" rel="alternate" type="text/html"/>
    <title>How to prove that models of indirect and direct RAM machines are equivalent?</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>as in the title, I am looking for a formal proof how to show that models of indirect and direct RAM (random-access) machines are equivalent. I would really appreciate your help.</p></div>
    </summary>
    <updated>2019-01-01T10:39:10Z</updated>
    <published>2019-01-01T10:39:10Z</published>
    <category scheme="https://cstheory.stackexchange.com/tags" term="fl.formal-languages"/>
    <category scheme="https://cstheory.stackexchange.com/tags" term="turing-machines"/>
    <author>
      <name>Tomek</name>
      <uri>https://cstheory.stackexchange.com/users/51627</uri>
    </author>
    <source>
      <id>https://cstheory.stackexchange.com/feeds/</id>
      <link href="https://cstheory.stackexchange.com/feeds/" rel="self" type="application/atom+xml"/>
      <link href="https://cstheory.stackexchange.com/questions" rel="alternate" type="text/html"/>
      <link href="http://www.creativecommons.org/licenses/by-sa/3.0/rdf" rel="license"/>
      <subtitle>most recent 30 from cstheory.stackexchange.com</subtitle>
      <title>Recent Questions - Theoretical Computer Science Stack Exchange</title>
      <updated>2019-01-03T09:20:39Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://cstheory.stackexchange.com/q/42126</id>
    <link href="https://cstheory.stackexchange.com/questions/42126/hamiltonian-cycle-vs-co-np" rel="alternate" type="text/html"/>
    <title>Hamiltonian cycle vs co-NP</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I am trying to understand co-NP and its implications properly.</p>

<p>The French Wikipedia <a href="https://fr.wikipedia.org/wiki/Co-NP" rel="nofollow noreferrer">page</a> describing co-NP provides the "complementary" version of the Hamiltonian cycle in co-NP as follows:</p>

<pre><code>Considering a graph G, is it true that it does not have an Hamiltonian cycle?
</code></pre>

<p>Is this correct?</p>

<p>If so, then how is this complementary version a different class of complexity than the original Hamiltonian cycle problem? The decision question is the same. To put it differently, what is the difference between NP and co-NP here?</p>

<p>Otherwise, if this complementary version is false, what would be the correct version (if any exists)?</p></div>
    </summary>
    <updated>2018-12-31T22:19:33Z</updated>
    <published>2018-12-31T22:19:33Z</published>
    <category scheme="https://cstheory.stackexchange.com/tags" term="complexity-classes"/>
    <category scheme="https://cstheory.stackexchange.com/tags" term="np"/>
    <author>
      <name>J√©r√¥me Verstrynge</name>
      <uri>https://cstheory.stackexchange.com/users/50131</uri>
    </author>
    <source>
      <id>https://cstheory.stackexchange.com/feeds/</id>
      <link href="https://cstheory.stackexchange.com/feeds/" rel="self" type="application/atom+xml"/>
      <link href="https://cstheory.stackexchange.com/questions" rel="alternate" type="text/html"/>
      <link href="http://www.creativecommons.org/licenses/by-sa/3.0/rdf" rel="license"/>
      <subtitle>most recent 30 from cstheory.stackexchange.com</subtitle>
      <title>Recent Questions - Theoretical Computer Science Stack Exchange</title>
      <updated>2019-01-03T09:20:39Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://11011110.github.io/blog/2018/12/31/linkage</id>
    <link href="https://11011110.github.io/blog/2018/12/31/linkage.html" rel="alternate" type="text/html"/>
    <title>Linkage for the end of the year</title>
    <summary>LaTeX, the game (, G+, via). It should be an even higher level to get the commutative diagram to format in Wikipedia‚Äôs lobotomized version of LaTeX.
      <div class="commentbar">
        <p/>
      </div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><ul>
  <li>
    <p><a href="https://twitter.com/trannosaurusma/status/959423514485841925?s=21">LaTeX, the game</a> (<span style="white-space: nowrap;"><a href="https://mathstodon.xyz/@11011110/101252368314388741"/>,</span> <a href="https://plus.google.com/100003628603413742554/posts/BAwHG7Tnc2N">G+</a>, <a href="https://mathstodon.xyz/@ejk/101201955004129570">via</a>). It should be an even higher level to get the commutative diagram to format in Wikipedia‚Äôs lobotomized version of LaTeX.</p>
  </li>
  <li>
    <p><a href="http://aperiodical.com/2018/12/byrnes-euclid-recreated-for-the-web/">Byrne‚Äôs Euclid recreated for the web</a> (<span style="white-space: nowrap;"><a href="https://mathstodon.xyz/@11011110/101259384727886209"/>,</span> <a href="https://plus.google.com/100003628603413742554/posts/4Z1pWdmcWui">G+</a>, <a href="https://plus.google.com/+Aperiodical/posts/KdfBH9YMFMV">via</a>, <a href="https://www.metafilter.com/178260/Byrnes-Euclid">also via</a>. Beautiful three-color figures, hard-to-read old-fa≈øhioned orthography, and all. I have the Ta≈øchen reprint in my office, but I prefer the Dover Heath edition for actually u≈øing the books rather than looking pretty.</p>
  </li>
  <li>
    <p><a href="https://www.theengineer.co.uk/electric-eel-hydrogel-battery/">Electric eel inspires biocompatible hydrogel battery</a> (<span style="white-space: nowrap;"><a href="https://mathstodon.xyz/@11011110/101264841241151850"/>,</span> <a href="https://plus.google.com/100003628603413742554/posts/EioURA7NEmH">G+</a>, <a href="https://www.nature.com/articles/nature24670">original paper</a>, <a href="https://news.umich.edu/electricity-eel-style-soft-power-cells-could-run-tomorrow-s-implantables/">see also</a>). The part that caught my attention is that they‚Äôre using a Miura fold to simultaneously align and press together many pairs of droplets of four types (salty, fresh water, or two kinds of charge-selective hydrogel), creating an origami-activated electrical discharge.</p>
  </li>
  <li>
    <p><a href="https://www.quantamagazine.org/in-the-universe-of-equations-virtually-all-are-prime-20181210/">In the universe of equations, virtually all are prime</a> (<span style="white-space: nowrap;"><a href="https://mathstodon.xyz/@11011110/101270526352782325"/>,</span> <a href="https://plus.google.com/100003628603413742554/posts/d7hvGtho5FJ">G+</a>, <a href="https://plus.google.com/+QuantamagazineOrgNews/posts/9e2bRyNfyeF">via</a>, <a href="https://arxiv.org/abs/1810.13360">original paper</a>). Choose a polynomial‚Äôs coefficients randomly and independently from your favorite nontrivial distribution. Then it should be irreducible with high probability for polynomials of high enough degree. This was previously conjectured for the uniform distribution on  by Odlyzko and Poonen; now Breuillard and Varj√∫ have proven that it follows from a form of the Riemann hypothesis.</p>
  </li>
  <li>
    <p>A tricky Sudoku (<span style="white-space: nowrap;"><a href="https://mathstodon.xyz/@11011110/101277538292220348"/>,</span> <a href="https://plus.google.com/100003628603413742554/posts/NDeATkTyEKT">G+</a>):</p>

    <p style="text-align: center;"><img alt="A sudoku puzzle" src="https://11011110.github.io/blog/assets/2018/sudoku.svg"/></p>
  </li>
  <li>
    <p><a href="https://www.chronicle.com/article/In-Talks-With-Elsevier-UCLA/245311">UCLA suggests that its faculty refrain from publishing with or reviewing for Elsevier while negotiations are ongoing</a> (<span style="white-space: nowrap;"><a href="https://mathstodon.xyz/@11011110/101281900329465390"/>,</span> <a href="https://plus.google.com/100003628603413742554/posts/E4KAhwXct6y">G+</a>). For those willing to take a longer-term stand, there‚Äôs always <a href="http://thecostofknowledge.com/">thecostofknowledge.com</a>.</p>
  </li>
  <li>
    <p><a href="https://suomela.github.io/snowflake/">A161330 Snowflake</a> (<span style="white-space: nowrap;"><a href="https://mathstodon.xyz/@11011110/101293131395532694"/>,</span> <a href="https://plus.google.com/100003628603413742554/posts/N1gsDwSmjrX">G+</a>, <a href="https://plus.google.com/+JukkaSuomela/posts/b7rngpsTaVc">via</a>). An animated holiday greeting from <a href="https://twitter.com/JukkaSuomela">Jukka Suomela</a> based on <a href="https://oeis.org/A161330">integer sequence A161330</a>.</p>
  </li>
  <li>
    <p><a href="https://mathstodon.xyz/@unknown/101273978649098365">Festive two-to-one star dissection</a> (<span style="white-space: nowrap;"><a href="https://mathstodon.xyz/@11011110/101298812633911915"/>,</span> <a href="https://plus.google.com/100003628603413742554/posts/Bf3kWzhc9Yh">G+</a>). A Christmas greeting from <a href="https://mathstodon.xyz/@unknown/">@unknown@mathstodon.xyz</a>.</p>
  </li>
  <li>
    <p><a href="https://www.youtube.com/watch?v=uNJ7riiPHOY">Journeys of women in mathematics</a> (<span style="white-space: nowrap;"><a href="https://mathstodon.xyz/@11011110/101311027456154189"/>,</span> <a href="https://plus.google.com/100003628603413742554/posts/5CXnPF36FMz">G+</a>, <a href="https://blogs.scientificamerican.com/roots-of-unity/women-mathematicians-in-their-own-words/">via</a>). A 20-minute documentary profiling three women mathematicians from developing countries: Neela Nataraj of IIT Bombay in India, Aminatou Pecha Nijahouo from Cameroon, and Carolina Araujo at IMPA in Brazil, with brief quotes from many more.</p>
  </li>
  <li>
    <p><a href="https://wikiedu.org/blog/2018/12/20/three-things-i-learned-as-a-wiki-scholar/">Three things i learned as a Wiki scholar</a> (<span style="white-space: nowrap;"><a href="https://mathstodon.xyz/@11011110/101314727270253883"/>,</span> <a href="https://plus.google.com/100003628603413742554/posts/hmWXq3eDTqf">G+</a>, <a href="https://en.wikipedia.org/wiki/Wikipedia_talk:WikiProject_Women_in_Red">via</a>). Historian Rachel Boyle on some cultural differences between academia and Wikipedia.</p>
  </li>
  <li>
    <p><a href="https://commons.wikimedia.org/wiki/File:Mendocino_Beacon_Building.jpg">Mendocino Beacon Building</a> (<span style="white-space: nowrap;"><a href="https://mathstodon.xyz/@11011110/101320263516053157"/>,</span> <a href="https://plus.google.com/100003628603413742554/posts/ik4GHTux6wN">G+</a>). It feels like I haven‚Äôt been taking and posting enough photos. So here‚Äôs a cell phone shot that I took to illustrate the Wikipedia article on the <em><a href="https://en.wikipedia.org/wiki/Mendocino_Beacon">Mendocino Beacon</a></em>. The <em>Beacon</em> hasn‚Äôt actually lived there for nearly 20 years, but their old sign still hangs on the building.</p>
  </li>
  <li>
    <p><em><a href="http://algorithms.wtf/">Algorithms</a></em> (<span style="white-space: nowrap;"><a href="https://mathstodon.xyz/@11011110/101327166193790839"/>,</span> <a href="https://plus.google.com/100003628603413742554/posts/Vsin2Hxwpaj">G+</a>, <a href="https://3dpancakes.typepad.com/ernie/2018/12/steal-this-book-1.html">via</a>). Jeff Erickson‚Äôs open-licensed algorithms text is finally more-or-less complete and available in prepublication form.</p>
  </li>
  <li>
    <p><a href="https://wyss.harvard.edu/studying-aliens-of-the-deep/">Using unfolded polyhedra to catch and later release deep-sea creatures without harming them</a> (<span style="white-space: nowrap;"><a href="https://mathstodon.xyz/@11011110/101332999043783606"/>,</span> <a href="https://plus.google.com/100003628603413742554/posts/j42xnNxs7nW">G+</a>, <a href="https://news.ycombinator.com/item?id=18769435">via</a>).</p>
  </li>
  <li>
    <p><a href="https://plus.google.com/100003628603413742554/posts/WSizeQTqrZH">In which I say goodbye to Google+</a> (<span style="white-space: nowrap;"><a href="https://mathstodon.xyz/@11011110/101338372532836995"/>).</span></p>
  </li>
</ul></div>
    </content>
    <updated>2018-12-31T16:41:00Z</updated>
    <published>2018-12-31T16:41:00Z</published>
    <author>
      <name>David Eppstein</name>
    </author>
    <source>
      <id>https://11011110.github.io/blog/feed.xml</id>
      <author>
        <name>David Eppstein</name>
      </author>
      <link href="https://11011110.github.io/blog/feed.xml" rel="self" type="application/atom+xml"/>
      <link href="https://11011110.github.io/blog/" rel="alternate" type="text/html"/>
      <subtitle>Geometry, graphs, algorithms, and more</subtitle>
      <title>11011110</title>
      <updated>2019-01-03T05:47:41Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://cstheory.stackexchange.com/q/42124</id>
    <link href="https://cstheory.stackexchange.com/questions/42124/is-it-there-any-cellular-automata-model-of-the-universe-where-uncomputable-thing" rel="alternate" type="text/html"/>
    <title>Is it there any cellular automata model of the universe where uncomputable things could happen?</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>There are several papers that propose that the universe itself is analogous to a cellular automata. Obviously, these papers assume that the universe is computable.</p>

<p>But is it there any cosmological cellular automata models that would allow uncomputable laws/processes/functions/numbers/things...etc to exist in that universe? For example, cellular automata universes where there would be truly black hole-singularities (which are uncomputable)?</p>

<p>Maybe Konrad Zuse's cellular automata could do the job? </p>

<p><a href="https://en.m.wikipedia.org/wiki/Calculating_Space" rel="nofollow noreferrer">https://en.m.wikipedia.org/wiki/Calculating_Space</a></p>

<p>Or maybe some variation of Conway's game of life?
<a href="https://en.m.wikipedia.org/wiki/Conway%27s_Game_of_Life" rel="nofollow noreferrer">https://en.m.wikipedia.org/wiki/Conway%27s_Game_of_Life</a></p>

<p>Or maybe we could build one using 't Hooft's cellular automata frameworks</p>

<p><a href="https://arxiv.org/abs/gr-qc/9903084" rel="nofollow noreferrer">https://arxiv.org/abs/gr-qc/9903084</a>
<a href="https://arxiv.org/abs/1405.1548" rel="nofollow noreferrer">https://arxiv.org/abs/1405.1548</a></p></div>
    </summary>
    <updated>2018-12-31T14:46:34Z</updated>
    <published>2018-12-31T14:46:34Z</published>
    <category scheme="https://cstheory.stackexchange.com/tags" term="computability"/>
    <category scheme="https://cstheory.stackexchange.com/tags" term="it.information-theory"/>
    <category scheme="https://cstheory.stackexchange.com/tags" term="cellular-automata"/>
    <author>
      <name>Oni Ein</name>
      <uri>https://cstheory.stackexchange.com/users/51613</uri>
    </author>
    <source>
      <id>https://cstheory.stackexchange.com/feeds/</id>
      <link href="https://cstheory.stackexchange.com/feeds/" rel="self" type="application/atom+xml"/>
      <link href="https://cstheory.stackexchange.com/questions" rel="alternate" type="text/html"/>
      <link href="http://www.creativecommons.org/licenses/by-sa/3.0/rdf" rel="license"/>
      <subtitle>most recent 30 from cstheory.stackexchange.com</subtitle>
      <title>Recent Questions - Theoretical Computer Science Stack Exchange</title>
      <updated>2019-01-03T09:20:39Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://cstheory.stackexchange.com/q/42122</id>
    <link href="https://cstheory.stackexchange.com/questions/42122/what-to-do-as-a-theoretical-computer-science-phd-student-in-a-free-time" rel="alternate" type="text/html"/>
    <title>What to do as a Theoretical computer science PhD student in a free time?</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I am a mid-stage theoretical computer science student. Although I have a busy schedule, I still have a one or one a half hour in a day which I devote to reading and solving the question given Jeff Erickson's lecture note etc. I am doing this thing from many months and wondering. Is this a right thing for me to do in free time as now I am a Ph.D. student not an undergraduate student. Now why I do this to become more strong in an algorithm, discrete maths etc part. Another thing which seems more valuable to me is to read more and more research paper of my research domain as my goal after my Ph.D. is to publish more quality research papers in the field related to my current field. I am wondering which one is better or suggest anything else which may be more valuable to me keeping my future perspective in mind.</p>

<p><strong>Question:</strong> What to do as a Theoretical computer science PhD student in free time? I am wondering what star experienced researchers do in their time ( assuming they have a free time ).</p>

<p>Some of my free time I also spent on watching video lecture of workshops related to my field.</p></div>
    </summary>
    <updated>2018-12-31T12:15:55Z</updated>
    <published>2018-12-31T12:15:55Z</published>
    <category scheme="https://cstheory.stackexchange.com/tags" term="soft-question"/>
    <author>
      <name>A_Theory</name>
      <uri>https://cstheory.stackexchange.com/users/49003</uri>
    </author>
    <source>
      <id>https://cstheory.stackexchange.com/feeds/</id>
      <link href="https://cstheory.stackexchange.com/feeds/" rel="self" type="application/atom+xml"/>
      <link href="https://cstheory.stackexchange.com/questions" rel="alternate" type="text/html"/>
      <link href="http://www.creativecommons.org/licenses/by-sa/3.0/rdf" rel="license"/>
      <subtitle>most recent 30 from cstheory.stackexchange.com</subtitle>
      <title>Recent Questions - Theoretical Computer Science Stack Exchange</title>
      <updated>2019-01-03T09:20:39Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://cstheory.stackexchange.com/q/42121</id>
    <link href="https://cstheory.stackexchange.com/questions/42121/pass-ordering-for-greedy-local-search-algorithms" rel="alternate" type="text/html"/>
    <title>Pass ordering for greedy local search algorithms</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Apologies in advance for the slightly general question - I'm really looking for pointers to research / good keywords to look for.</p>

<p>I have a problem with the following setup: I have a (finite) totally ordered set <span class="math-container">$(T, \leq)$</span> and a set of functions <span class="math-container">$f_i: T \to T$</span> that are non-increasing (i.e. <span class="math-container">$f_i(t) \leq t$</span>). I know at least one point <span class="math-container">$t \in T$</span> but in general I only have access to <span class="math-container">$T$</span> via membership queries, that starting point, and the <span class="math-container">$f_i$</span>.</p>

<p>I am looking for any point <span class="math-container">$t_{min}$</span> which is a simultaneous fixed point of all of the <span class="math-container">$f_i$</span>. Obviously I can find this by just calculating <span class="math-container">$(f_1 \ldots f_n)^k(t)$</span> for our starting point <span class="math-container">$t \in T$</span> (note: This wouldn't be true if the <span class="math-container">$f_i$</span> could increase their argument).</p>

<p>My question is this: Given some (in general non-uniform, but I'd be happy for an answer that assumes the same cost for each as a starting point) cost model for the <span class="math-container">$f_i$</span>, how do I find such a <span class="math-container">$t_{\min}$</span> with a small cost of reaching it in terms of total cost of the <span class="math-container">$f_i$</span> invocations to get to that point?</p>

<p>There are lots of obvious heuristics one can apply, but it's not obvious which ones are good, and of the ones I've tried whether they work well or not seems to depend massively on the shape of the problem and the effectiveness of individual <span class="math-container">$f_i$</span>.</p>

<p>Anecdotally, in my particular use case, the following seem to usually be true:</p>

<ul>
<li>Especially after a few iterations, most points are likely to be fixed points of most of the <span class="math-container">$f_i$</span>.</li>
<li>It is much more likely that <span class="math-container">$f_i^2(s) = f_i(s)$</span> than that <span class="math-container">$f_j(f_i(s)) = f_i(s)$</span> for <span class="math-container">$j \neq i$</span>.</li>
</ul>

<p>Other things that might be helpful:</p>

<ul>
<li>In my concrete use case, <span class="math-container">$T$</span> is a set of strings over some ordered alphabet, with <span class="math-container">$\leq$</span> being the shortlex order (i.e. <span class="math-container">$s \leq t$</span> if <span class="math-container">$|s| &lt; |t|$</span> or <span class="math-container">$|s| = |t|$</span> and <span class="math-container">$s$</span> is lexicographically before <span class="math-container">$t$</span>).</li>
<li>I can sample uniformly at random from <span class="math-container">$T$</span>, and my initial <span class="math-container">$t$</span> comes from that distribution, but sampling is typically much more expensive than individual <span class="math-container">$f_i$</span> invocations.</li>
</ul>

<p>Are there any good heuristics/metaheuristics I should be looking at for this class of problem?</p></div>
    </summary>
    <updated>2018-12-31T11:27:18Z</updated>
    <published>2018-12-31T11:27:18Z</published>
    <category scheme="https://cstheory.stackexchange.com/tags" term="optimization"/>
    <category scheme="https://cstheory.stackexchange.com/tags" term="heuristics"/>
    <author>
      <name>DRMacIver</name>
      <uri>https://cstheory.stackexchange.com/users/4624</uri>
    </author>
    <source>
      <id>https://cstheory.stackexchange.com/feeds/</id>
      <link href="https://cstheory.stackexchange.com/feeds/" rel="self" type="application/atom+xml"/>
      <link href="https://cstheory.stackexchange.com/questions" rel="alternate" type="text/html"/>
      <link href="http://www.creativecommons.org/licenses/by-sa/3.0/rdf" rel="license"/>
      <subtitle>most recent 30 from cstheory.stackexchange.com</subtitle>
      <title>Recent Questions - Theoretical Computer Science Stack Exchange</title>
      <updated>2019-01-03T09:20:39Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://cstheory.stackexchange.com/q/42120</id>
    <link href="https://cstheory.stackexchange.com/questions/42120/is-a-binary-sequence-computable-iff-the-kolmogorov-complexity-of-its-initial-seg" rel="alternate" type="text/html"/>
    <title>Is a binary sequence computable iff the Kolmogorov complexity of its initial segments is bounded?</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><strong>Disclaimer:</strong> I am mostly unfamiliar with theoretical computer science, making it hard for me to navigate literature in the field. I ask the following out of curiosity.</p>

<p><strong>Background/Motivation:</strong> Coming from information theory, I recently learned about a connection of entropy and Kolmogorov complexity: Loosely speaking, entropy of a random variable is the expected rate at which the Kolmogorov complexity of a long sample sequence increases per sample. <a href="http://www.cs-114.org/wp-content/uploads/2015/01/Elements_of_Information_Theory_Elements.pdf" rel="noreferrer">[Elements of Information Theory, p. 154]</a> Kolmogorov complexity can therefore capture the notion of entropy, but it is more general than that. Hereby, and in the following, whenever I write complexity, I implicitly refer to the complexity given the length of the output.</p>

<p>For non-zero entropy, the Kolmogorov complexity of initial segments of an infinite sequence of samples from a random variable is therefore unbounded. I was wondering whether this is equivalent to the fact that an infinite sequence of samples is uncomputable. This led me to the hypothesis in the title: Is a binary sequence computable if and only if the Kolmogorov complexity of its initial segments is bounded?</p>

<p>If the hypothesis was true, then computability could be understood as an indicator that the "amount of information" in a sequence is finite. In some sense, the initial segment complexities would allow a more finely graded characterization of infinite sequences than just "computable" and "uncomputable". We could get a notion of "information content" and "information rate" of infinite sequences by analyzing the size of the bound or, in the unbounded case, the rate/type of growth, as in the entropy case above. My question boils down to whether "computable" and "uncomputable" are regions on this scale.</p>

<p>If the hypothesis is true, I'd be interested in whether this perspective is useful for TCS research. If yes, are there references elaborating this idea? If not, why not?</p>

<p><strong>What I found in literature:</strong> It is shown that a sequence is Martin-L√∂f random iff there is a constant <span class="math-container">$c$</span> so that there are infinitely many initial segments with complexity greater than <span class="math-container">$n - c$</span> where <span class="math-container">$n$</span> is the segment length. <a href="https://arxiv.org/pdf/math/0110086.pdf" rel="noreferrer">[Randomness, p. 18]</a></p>

<p>This means that random sequences have unbounded initial segment complexity. Since they are not computable, the hypothesis is true at least for this case. If I am not mistaken, a similar argument could even be made for a weaker form of randomness, since Mises-Wald-Church random sequences cannot have initial segment complexity of O(log n). <a href="https://www.math.uni-heidelberg.de/logic/merkle/ps/JCSS-stoch.pdf" rel="noreferrer">[The complexity of stochastic sequences]</a></p>

<p><strong>What's missing for a proof:</strong></p>

<p><span class="math-container">$\Leftarrow$</span>:
Assume a sequence is computable. We know that a program <code>generate_bit(n)</code> exists that generates any bit of the sequence. Now, we can build a program <code>generate_initial_segment(n) = concat(map(1..n, generate_bit))</code> that, given the segment length <span class="math-container">$n$</span>, generates the initial segment up to position n by invoking <code>generate_bit</code> <span class="math-container">$n$</span> times and concatenating the results. The Kolmogorov complexity of this task is therefore bounded by the length of this program. ‚òê</p>

<p><span class="math-container">$\Rightarrow$</span>: I struggle to prove/disprove this direction, namely: If initial segment complexity is bounded, is a sequence always computable?</p></div>
    </summary>
    <updated>2018-12-31T09:22:03Z</updated>
    <published>2018-12-31T09:22:03Z</published>
    <category scheme="https://cstheory.stackexchange.com/tags" term="computability"/>
    <category scheme="https://cstheory.stackexchange.com/tags" term="it.information-theory"/>
    <category scheme="https://cstheory.stackexchange.com/tags" term="kolmogorov-complexity"/>
    <author>
      <name>Julius Kunze</name>
      <uri>https://cstheory.stackexchange.com/users/51614</uri>
    </author>
    <source>
      <id>https://cstheory.stackexchange.com/feeds/</id>
      <link href="https://cstheory.stackexchange.com/feeds/" rel="self" type="application/atom+xml"/>
      <link href="https://cstheory.stackexchange.com/questions" rel="alternate" type="text/html"/>
      <link href="http://www.creativecommons.org/licenses/by-sa/3.0/rdf" rel="license"/>
      <subtitle>most recent 30 from cstheory.stackexchange.com</subtitle>
      <title>Recent Questions - Theoretical Computer Science Stack Exchange</title>
      <updated>2019-01-03T09:20:39Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>https://www.scottaaronson.com/blog/?p=4045</id>
    <link href="https://www.scottaaronson.com/blog/?p=4045" rel="alternate" type="text/html"/>
    <link href="https://www.scottaaronson.com/blog/?p=4045#comments" rel="replies" type="text/html"/>
    <link href="https://www.scottaaronson.com/blog/?feed=atom&amp;p=4045" rel="replies" type="application/atom+xml"/>
    <title xml:lang="en-US">Incompleteness ex machina</title>
    <summary xml:lang="en-US">I have a treat with which to impress your friends at New Year‚Äôs Eve parties tomorrow night: a rollicking essay graciously contributed by a reader named Sebastian Oberhoff, about a unified and simplified way to prove all of G√∂del‚Äôs Incompleteness Theorems, as well as Rosser‚Äôs Theorem, directly in terms of computer programs. In particular, this [‚Ä¶]</summary>
    <content type="xhtml" xml:lang="en-US"><div xmlns="http://www.w3.org/1999/xhtml"><p>I have a treat with which to impress your friends at New Year‚Äôs Eve parties tomorrow night: a <a href="https://www.scottaaronson.com/incompleteness.pdf">rollicking essay</a> graciously contributed by a reader named Sebastian Oberhoff, about a unified and simplified way to prove all of G√∂del‚Äôs Incompleteness Theorems, as well as Rosser‚Äôs Theorem, directly in terms of computer programs.  In particular, this improves over my treatments in <em>Quantum Computing Since Democritus</em> and my <a href="https://www.scottaaronson.com/blog/?p=710">Rosser‚Äôs Theorem via Turing machines</a> post.  While there won‚Äôt be anything new here for the experts, I loved the style‚Äîindeed, it brings back wistful memories of how <em>I</em> used to write, before I accumulated too many imaginary (and non-imaginary) readers tut-tutting at crass jokes over my shoulder.  May 2019 bring us all the time and the courage to express ourselves authentically, even in ways that might be sneered at as incomplete, inconsistent, or unsound.</p></div>
    </content>
    <updated>2018-12-31T02:04:18Z</updated>
    <published>2018-12-31T02:04:18Z</published>
    <category scheme="https://www.scottaaronson.com/blog" term="Nerd Interest"/>
    <author>
      <name>Scott</name>
      <uri>http://www.scottaaronson.com</uri>
    </author>
    <source>
      <id>https://www.scottaaronson.com/blog/?feed=atom</id>
      <link href="https://www.scottaaronson.com/blog" rel="alternate" type="text/html"/>
      <link href="https://www.scottaaronson.com/blog/?feed=atom" rel="self" type="application/atom+xml"/>
      <subtitle xml:lang="en-US">The Blog of Scott Aaronson</subtitle>
      <title xml:lang="en-US">Shtetl-Optimized</title>
      <updated>2018-12-31T02:04:18Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://cstheory.stackexchange.com/q/42118</id>
    <link href="https://cstheory.stackexchange.com/questions/42118/can-a-program-generate-quantum-randomness" rel="alternate" type="text/html"/>
    <title>Can a program generate quantum randomness? [on hold]</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>The inherent property of nature- pure randomness may be generated. I'd like a proof in either direction, if a program cannot do such a thing.</p>

<p>As far as my thinking goes a program is undecidable but at the same time how could it be deterministic enough to not generate pure quantum randomness?</p>

<p>But the final truth that it can or cannot generate quantum randomness must be surely decidable.</p></div>
    </summary>
    <updated>2018-12-30T20:53:13Z</updated>
    <published>2018-12-30T20:53:13Z</published>
    <category scheme="https://cstheory.stackexchange.com/tags" term="turing-machines"/>
    <category scheme="https://cstheory.stackexchange.com/tags" term="randomness"/>
    <category scheme="https://cstheory.stackexchange.com/tags" term="quantum-information"/>
    <author>
      <name>Mini kute</name>
      <uri>https://cstheory.stackexchange.com/users/51620</uri>
    </author>
    <source>
      <id>https://cstheory.stackexchange.com/feeds/</id>
      <link href="https://cstheory.stackexchange.com/feeds/" rel="self" type="application/atom+xml"/>
      <link href="https://cstheory.stackexchange.com/questions" rel="alternate" type="text/html"/>
      <link href="http://www.creativecommons.org/licenses/by-sa/3.0/rdf" rel="license"/>
      <subtitle>most recent 30 from cstheory.stackexchange.com</subtitle>
      <title>Recent Questions - Theoretical Computer Science Stack Exchange</title>
      <updated>2019-01-03T09:20:39Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://cstheory.stackexchange.com/q/42116</id>
    <link href="https://cstheory.stackexchange.com/questions/42116/soundness-of-type-systems" rel="alternate" type="text/html"/>
    <title>Soundness of type (systems)</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>For someone without strong background in theoretical computer science: can soundness be a property of a type (given a type system), or a property of type systems only? In other words, can we say that a type is sound, or it does not mean anything?</p>

<p>Also, how to demonstrate the soundness of a type or a type system? What is a good research-level textbook/reference on the topic?</p></div>
    </summary>
    <updated>2018-12-30T14:08:18Z</updated>
    <published>2018-12-30T14:08:18Z</published>
    <category scheme="https://cstheory.stackexchange.com/tags" term="reference-request"/>
    <category scheme="https://cstheory.stackexchange.com/tags" term="type-theory"/>
    <category scheme="https://cstheory.stackexchange.com/tags" term="type-systems"/>
    <category scheme="https://cstheory.stackexchange.com/tags" term="soundness"/>
    <author>
      <name>Vincent</name>
      <uri>https://cstheory.stackexchange.com/users/25474</uri>
    </author>
    <source>
      <id>https://cstheory.stackexchange.com/feeds/</id>
      <link href="https://cstheory.stackexchange.com/feeds/" rel="self" type="application/atom+xml"/>
      <link href="https://cstheory.stackexchange.com/questions" rel="alternate" type="text/html"/>
      <link href="http://www.creativecommons.org/licenses/by-sa/3.0/rdf" rel="license"/>
      <subtitle>most recent 30 from cstheory.stackexchange.com</subtitle>
      <title>Recent Questions - Theoretical Computer Science Stack Exchange</title>
      <updated>2019-01-03T09:20:39Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://cstheory.stackexchange.com/q/42115</id>
    <link href="https://cstheory.stackexchange.com/questions/42115/is-there-and-efficient-procedure-to-test-whether-a-clause-is-implied-by-a-given" rel="alternate" type="text/html"/>
    <title>Is there and efficient procedure to test whether a clause is implied by a given CNF formula?</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I have a CNF formula <span class="math-container">$F$</span> and a clause <span class="math-container">$c$</span> defined on the same set of variables. I would like to know if <span class="math-container">$c$</span> is implied by <span class="math-container">$F$</span> i.e. if <span class="math-container">$F \vDash c$</span>. To achieve this I could just test if the formula <span class="math-container">$F\wedge \bar{c}$</span> is unsatisfiable where <span class="math-container">$\bar{c}=\bigwedge_{x \in c}\neg x$</span>. But this requires to solve instances of the boolean satisfiability problem which is known to be NP-complete.</p>

<p>Is there and efficient (poly-time) procedure to test whether a clause is implied by a given CNF formula?</p></div>
    </summary>
    <updated>2018-12-30T05:17:23Z</updated>
    <published>2018-12-30T05:17:23Z</published>
    <category scheme="https://cstheory.stackexchange.com/tags" term="lo.logic"/>
    <category scheme="https://cstheory.stackexchange.com/tags" term="sat"/>
    <category scheme="https://cstheory.stackexchange.com/tags" term="polynomial-time"/>
    <author>
      <name>RTK</name>
      <uri>https://cstheory.stackexchange.com/users/50320</uri>
    </author>
    <source>
      <id>https://cstheory.stackexchange.com/feeds/</id>
      <link href="https://cstheory.stackexchange.com/feeds/" rel="self" type="application/atom+xml"/>
      <link href="https://cstheory.stackexchange.com/questions" rel="alternate" type="text/html"/>
      <link href="http://www.creativecommons.org/licenses/by-sa/3.0/rdf" rel="license"/>
      <subtitle>most recent 30 from cstheory.stackexchange.com</subtitle>
      <title>Recent Questions - Theoretical Computer Science Stack Exchange</title>
      <updated>2019-01-03T09:20:39Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:typepad.com,2003:post-6a00d83452383469e2022ad3ca27b2200b</id>
    <link href="https://3dpancakes.typepad.com/ernie/2018/12/steal-this-book-1.html" rel="alternate" type="text/html"/>
    <link href="https://3dpancakes.typepad.com/ernie/2018/12/steal-this-book-1.html" rel="replies" type="text/html"/>
    <title>Steal This Book!</title>
    <summary>Today I'm finally releasing a final (or more honestly, ‚Äúfinal‚Äù) pre-publication draft of my Algorithms textbook under a CC-BY license. This 448-page textbook evolved out of a subset of the algorithms lecture notes I've been maintaining for about 20 years....</summary>
    <content type="xhtml" xml:lang="en-US"><div xmlns="http://www.w3.org/1999/xhtml"><p><a class="asset-img-link" href="https://3dpancakes.typepad.com/.a/6a00d83452383469e2022ad3aa81d3200d-popup"><img alt="BookCover" class="asset  asset-image at-xid-6a00d83452383469e2022ad3aa81d3200d img-responsive" src="https://3dpancakes.typepad.com/.a/6a00d83452383469e2022ad3aa81d3200d-320wi" style="display: block; margin-left: auto; margin-right: auto;" title="BookCover"/></a><br/>Today I'm <em>finally</em> releasing a final (or more honestly, ‚Äúfinal‚Äù) pre-publication draft of my <em>Algorithms</em> textbook under a CC-BY license. This 448-page textbook evolved out of a subset of the algorithms lecture notes I've been maintaining for about 20 years.</p>
<p>There are still a few more steps before this becomes an actual paper book‚Äîmost notably an index‚Äîbut I wanted to get this out the door this year. I expect to publish the actual paper book in a few weeks; it will also be licensed CC-BY.</p>
<p>Meanwhile, I've set up an issue-tracker on Github where anyone can report errors or provide other feedback.</p>
<p>The book site also includes copies of the lecture notes that I left out of the book (because I wanted a finite book in a finite amount of time), along with a complete archive of old homeworks, exams, lab handouts, and the like.</p>
<p>Enjoy!</p>
<ul>
<li>Official book site: <a href="http://jeffe.cs.illinois.edu/teaching/algorithms/">http://jeffe.cs.illinois.edu/teaching/algorithms/</a></li>
<li>Mnemonic shortcut: <a href="http://algorithms.wtf">http://algorithms.wtf</a></li>
<li><strong>Please report errors:</strong> <a href="https://github.com/jeffgerickson/algorithms">https://github.com/jeffgerickson/algorithms</a></li>
<li>Archival copy: <a href="https://archive.org/details/Algorithms-Jeff-Erickson">https://archive.org/details/Algorithms-Jeff-Erickson</a></li>
</ul></div>
    </content>
    <updated>2018-12-29T22:50:59Z</updated>
    <published>2018-12-29T22:50:59Z</published>
    <category term="Algorithms"/>
    <category term="Books"/>
    <category term="Writing"/>
    <author>
      <name>Jeff Erickson</name>
    </author>
    <source>
      <id>tag:typepad.com,2003:weblog-6686</id>
      <link href="https://3dpancakes.typepad.com/ernie/atom.xml" rel="self" type="application/atom+xml"/>
      <link href="https://3dpancakes.typepad.com/ernie/" rel="alternate" type="text/html"/>
      <subtitle>Let Œ£ be a combinatorial surface with n vertices, genus g, and b boundaries.  Amen.</subtitle>
      <title>Ernie's 3D Pancakes</title>
      <updated>2018-12-29T22:50:59Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:typepad.com,2003:post-6a00d83452383469e2022ad3aa81e9200d</id>
    <link href="https://3dpancakes.typepad.com/ernie/2018/12/steal-this-book.html" rel="alternate" type="text/html"/>
    <link href="https://3dpancakes.typepad.com/ernie/2018/12/steal-this-book.html" rel="replies" type="text/html"/>
    <title>Steal This Book!</title>
    <summary>Today I'm finally releasing a final (or more honestly, ‚Äúfinal‚Äù) pre-publication draft of my Algorithms textbook under a CC-BY license. This 448-page textbook evolved out of a subset of the algorithms lecture notes I've been maintaining for about 20 years....</summary>
    <content type="xhtml" xml:lang="en-US"><div xmlns="http://www.w3.org/1999/xhtml"><p><a class="asset-img-link" href="https://3dpancakes.typepad.com/.a/6a00d83452383469e2022ad3aa81d3200d-popup"><img alt="BookCover" class="asset  asset-image at-xid-6a00d83452383469e2022ad3aa81d3200d img-responsive" src="https://3dpancakes.typepad.com/.a/6a00d83452383469e2022ad3aa81d3200d-320wi" style="display: block; margin-left: auto; margin-right: auto;" title="BookCover"/></a><br/>Today I'm <em>finally</em> releasing a final (or more honestly, ‚Äúfinal‚Äù) pre-publication draft of my <em>Algorithms</em> textbook under a CC-BY license. This 448-page textbook evolved out of a subset of the algorithms lecture notes I've been maintaining for about 20 years.</p>
<p>There are still a few more steps before this becomes an actual paper book‚Äîmost notably an index‚Äîbut I wanted to get this out the door this year. I expect to publish the actual paper book in a few weeks; it will also be licensed CC-BY.</p>
<p>Meanwhile, I've set up an issue-tracker on Github where anyone can report errors or provide other feedback.</p>
<p>The book site also includes copies of the lecture notes that I left out of the book (because I wanted a finite book in a finite amount of time), along with a complete archive of old homeworks, exams, lab handouts, and the like.</p>
<p>Enjoy!</p>
<ul>
<li>Official book site: <a href="http://jeffe.cs.illinois.edu/teaching/algorithms/">http://jeffe.cs.illinois.edu/teaching/algorithms/</a></li>
<li>Mnemonic shortcut: <a href="http://algorithms.wtf">http://algorithms.wtf</a></li>
<li><strong>Please report errors:</strong> <a href="https://github.com/jeffgerickson/algorithms">https://github.com/jeffgerickson/algorithms</a></li>
<li>Archival copy: <a href="https://archive.org/details/Algorithms-Jeff-Erickson">https://archive.org/details/Algorithms-Jeff-Erickson</a></li>
</ul></div>
    </content>
    <updated>2018-12-29T22:50:49Z</updated>
    <published>2018-12-29T22:50:49Z</published>
    <author>
      <name>Jeff Erickson</name>
    </author>
    <source>
      <id>tag:typepad.com,2003:weblog-6686</id>
      <link href="https://3dpancakes.typepad.com/ernie/atom.xml" rel="self" type="application/atom+xml"/>
      <link href="https://3dpancakes.typepad.com/ernie/" rel="alternate" type="text/html"/>
      <subtitle>Let Œ£ be a combinatorial surface with n vertices, genus g, and b boundaries.  Amen.</subtitle>
      <title>Ernie's 3D Pancakes</title>
      <updated>2018-12-29T22:50:59Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://cstheory.stackexchange.com/q/42113</id>
    <link href="https://cstheory.stackexchange.com/questions/42113/is-this-paper-proposing-to-study-uncomputable-simulations" rel="alternate" type="text/html"/>
    <title>Is this paper proposing to study uncomputable simulations?</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>In this paper: <a href="https://arxiv.org/abs/1205.1407" rel="nofollow noreferrer">https://arxiv.org/abs/1205.1407</a>, the author proposes to study the universe (and possibly multiverses) through computer simulations of universes.</p>

<p>But there's one thing I still don't understand. </p>

<p>The paper proposes to study the evolution of these universes through a "Cosmic Evolution Equation‚Äù
The author defines a set of possible universes to study their evolution through simulations, but in that set there's a group of universes that obey different logic systems or eve do not obey any kind of logic (it uses Ellis' classification of possible universes, including illogical/logically impossible ones). The paper says that we can study all these universes with the method it proposes (through simulations and Cosmic Evolution Equation). But the logically impossible/illogical universes that the paper proposes wouldn't be uncomputable? Wouldn't they be impossible to study?</p>

<p>How can these types of universes be studied? Could they be simulated through some kind of hypercomputation? </p></div>
    </summary>
    <updated>2018-12-29T18:39:12Z</updated>
    <published>2018-12-29T18:39:12Z</published>
    <category scheme="https://cstheory.stackexchange.com/tags" term="computability"/>
    <category scheme="https://cstheory.stackexchange.com/tags" term="hypercomputation"/>
    <author>
      <name>Oni Ein</name>
      <uri>https://cstheory.stackexchange.com/users/51613</uri>
    </author>
    <source>
      <id>https://cstheory.stackexchange.com/feeds/</id>
      <link href="https://cstheory.stackexchange.com/feeds/" rel="self" type="application/atom+xml"/>
      <link href="https://cstheory.stackexchange.com/questions" rel="alternate" type="text/html"/>
      <link href="http://www.creativecommons.org/licenses/by-sa/3.0/rdf" rel="license"/>
      <subtitle>most recent 30 from cstheory.stackexchange.com</subtitle>
      <title>Recent Questions - Theoretical Computer Science Stack Exchange</title>
      <updated>2019-01-03T09:20:39Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://cstheory.stackexchange.com/q/42109</id>
    <link href="https://cstheory.stackexchange.com/questions/42109/does-bf-cflpad-bf-ppad" rel="alternate" type="text/html"/>
    <title>Does ${\bf CFLPAD}={\bf PPAD}$?</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>What happens if we define <a href="http://en.wikipedia.org/wiki/PPAD_(complexity)" rel="nofollow noreferrer"><span class="math-container">${\bf PPAD}$</span></a> such that instead of a polytime Turing-machine/polysize circuit, a (non-)deterministic finite/push-down automaton encodes the problem? </p>

<p>I asked a similar <a href="https://cstheory.stackexchange.com/questions/27074/does-bf-ac0pad-bf-ppad">question</a> four years ago, but I expect the answer to be different.</p>

<p>To give a concrete example, consider End-Of-The-Line in a grid (known to be PPAD-complete); here a digraph <span class="math-container">$G_n$</span> on <span class="math-container">$2^n\times 2^n$</span>, with arcs going only between some neighboring grid-points, is encoded by a machine, such that <span class="math-container">$(0,0)$</span> has no in-neighbor and only one out-neighbor, and our goal is to find another vertex of odd degree. We make a CFLPAD problem from it as follows. Fix a PDA. On any input <span class="math-container">$(x,y)$</span> of length <span class="math-container">$n$</span>, the PDA should return the in- and out-neighbors of the grid-vertex <span class="math-container">$(x,y)$</span> of <span class="math-container">$G_n$</span>. So how hard is it to find another odd vertex (with the PDA and <span class="math-container">$n$</span> as input)?</p></div>
    </summary>
    <updated>2018-12-28T21:32:40Z</updated>
    <published>2018-12-28T21:32:40Z</published>
    <category scheme="https://cstheory.stackexchange.com/tags" term="cc.complexity-theory"/>
    <category scheme="https://cstheory.stackexchange.com/tags" term="circuit-complexity"/>
    <category scheme="https://cstheory.stackexchange.com/tags" term="regular-language"/>
    <category scheme="https://cstheory.stackexchange.com/tags" term="context-free"/>
    <category scheme="https://cstheory.stackexchange.com/tags" term="ppad"/>
    <author>
      <name>domotorp</name>
      <uri>https://cstheory.stackexchange.com/users/419</uri>
    </author>
    <source>
      <id>https://cstheory.stackexchange.com/feeds/</id>
      <link href="https://cstheory.stackexchange.com/feeds/" rel="self" type="application/atom+xml"/>
      <link href="https://cstheory.stackexchange.com/questions" rel="alternate" type="text/html"/>
      <link href="http://www.creativecommons.org/licenses/by-sa/3.0/rdf" rel="license"/>
      <subtitle>most recent 30 from cstheory.stackexchange.com</subtitle>
      <title>Recent Questions - Theoretical Computer Science Stack Exchange</title>
      <updated>2019-01-03T09:20:39Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://agtb.wordpress.com/?p=3371</id>
    <link href="https://agtb.wordpress.com/2018/12/28/sigecom-test-of-time-award/" rel="alternate" type="text/html"/>
    <title>SIGecom Test of Time Award</title>
    <summary>The SIGecom Test of Time Award recognizes the author or authors of an influential paper or series of papers published between ten and twenty-five years ago that has significantly impacted research or applications exemplifying the interplay of economics and computation. To be eligible, a paper or series of papers must be on a topic in [‚Ä¶]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div>The SIGecom Test of Time Award recognizes the author or authors of an influential paper or series of papers published between ten and twenty-five years ago that has significantly impacted research or applications exemplifying the interplay of economics and computation.</div>
<div/>
<p/>
<div>To be eligible, a paper or series of papers must be on a topic in the intersection of economics and computation, including topics in electronic commerce, and must have been first published, in preliminary or final form, in an archival journal or conference proceedings no less than ten years and no more than twenty-five years before the year the award is conferred. Papers for which all authors are deceased at the time the Award Committee makes its decision are not eligible for the award.</div>
<div/>
<p/>
<div>The 2019 SIGecom Test of Time Award will be given for papers published no earlier than 1994 and no later than 2009. Nominations are due by February 20th, 2019, and must be made by email to the Award Committee (<a href="mailto:sigecom-awards-tot@acm.org" rel="noopener" target="_blank">sigecom-awards-tot@acm.org</a>) with ‚ÄúACM SIGecom Test of Time Award‚Äù in the subject.</div>
<div/>
<p/>
<div>Any member of SIGecom may submit a nomination. Self-nomination is not allowed. Nominations must include the following, preferably in a single PDF file:</div>
<div/>
<p/>
<div>1. Bibliographic data for the paper or series of papers demonstrating publication, in preliminary or final form, at least ten years and at most twenty-five years before the award year.</div>
<div/>
<p/>
<div>2. An endorsement letter by the nominator of no more than two pages describing the content of the paper or series of papers and the lasting contribution, significance, and impact of the work.</div>
<div/>
<p/>
<div>3. The names, email addresses, and affiliations of at least two and at most three other endorsers. Endorsers, like the nominator, may not be authors of the paper or papers under consideration.</div>
<div/>
<p/>
<div>4. A one-sentence statement that describes the contribution of the paper or series of papers.</div>
<div/>
<p/>
<div>The additional endorsers should send letters directly to the Award Committee (<a href="mailto:sigecom-awards-tot@acm.org" rel="noopener" target="_blank">sigecom-awards-tot@acm.org</a>) by the same deadline. Each letter should specify the relationship of the endorser to nominees and describe, in 500 words or fewer, the lasting contribution, significance, and impact of the paper or papers.</div>
<div/>
<p/>
<div>An unsuccessful nomination can be reconsidered for three award cycles, with the option of updating the original nomination to reflect additional impact. Subsequently, a new nomination must be provided. All matters relating to the selection process that are not specified here are left to the discretion of the Award Committee.</div>
<div/>
<p/>
<div>The award, conferred annually at the ACM Conference on Economics and Computation, includes a plaque and complimentary conference registration for each winner and an honorarium of $1,000 to be shared among the winners. The award may not be given if the nominations are judged not to meet the standards of the award.</div>
<div/>
<p/>
<div>It is expected that at least one of the nominated authors, if selected for the award, will attend the next ACM Conference on Economics and Computation on June 24-28, 2019, in Phoenix, AZ, USA, to accept the award and give a presentation on the work. The award includes complimentary registration but does not cover travel expenses to attend the conference.</div>
<div/>
<p/>
<div>The Award Committee welcomes questions from anyone considering or intending to submit a nomination. The Award Committee is happy to provide feedback on informal proposals for potential nominees, should it be needed.</div>
<div/>
<p/>
<div>On behalf of the 2019 Award Committee:</div>
<div/>
<p/>
<div>Nikhil Devanur</div>
<div>Robert Kleinberg</div>
<div>Tim Roughgarden (Chair)</div>
<div><a href="mailto:sigecom-awards-tot@acm.org" rel="noopener" target="_blank">sigecom-awards-tot@acm.org</a></div></div>
    </content>
    <updated>2018-12-28T20:52:18Z</updated>
    <published>2018-12-28T20:52:18Z</published>
    <category term="Uncategorized"/>
    <author>
      <name>timroughgarden</name>
    </author>
    <source>
      <id>https://agtb.wordpress.com</id>
      <logo>https://secure.gravatar.com/blavatar/52ef314e11e379febf97d1a97547f4cd?s=96&amp;d=https%3A%2F%2Fs0.wp.com%2Fi%2Fbuttonw-com.png</logo>
      <link href="https://agtb.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="https://agtb.wordpress.com" rel="alternate" type="text/html"/>
      <link href="https://agtb.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="https://agtb.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Computation, Economics, and Game Theory</subtitle>
      <title>Turing's Invisible Hand</title>
      <updated>2019-01-03T09:21:52Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>https://eccc.weizmann.ac.il/report/2018/213</id>
    <link href="https://eccc.weizmann.ac.il/report/2018/213" rel="alternate" type="text/html"/>
    <title>TR18-213 |  The Power of Distributed Verifiers in Interactive Proofs | 

	Eylon Yogev, 

	Moni Naor, 

	Merav Parter</title>
    <summary>We explore the power of interactive proofs with a distributed verifier. In this setting, the verifier consists of $n$ nodes and a graph $G$ that defines their communication pattern. The prover is a single entity that communicates with all nodes by short messages. The goal is to verify that the graph $G$ belongs to some language in a small number of rounds, and with small communication bound, i.e., the proof size.

This interactive model was introduced by Kol, Oshman and Saxena (PODC 2018) as a generalization of non-interactive distributed proofs. They demonstrated the power of interaction in this setting by constructing protocols for problems as Graph Symmetry and Graph Non-Isomorphism -- both of which require proofs of $\Omega(n^2)$-bits without interaction.

In this work, we provide a new general framework for distributed interactive proofs that allows one to translate standard interactive protocols (i.e., with a centralized verifier) to ones where the verifier is distributed with a proof size that depends on the computational complexity of the verification algorithm run by the centralized verifier.
We show the following:

* Every (centralized) computation that can be performed in time $O(n)$ can be translated into three-round distributed interactive protocol with $O(\log n)$ proof size. This implies that many graph problems for sparse graphs have succinct proofs (e.g., testing planarity).

* Every (centralized) computation implemented by either a small space or by uniform NC circuit can be translated into a distributed protocol with $O(1)$ rounds and $O(\log n)$ bits proof size for the low space case and $polylog(n)$ many rounds and proof size for NC.

* We also demonstrate the power of our compilers for problems not captured by the above families. We show that for Graph Non-Isomorphism, one of the striking demonstrations of the power of interaction, there is a 4-round protocol with $O(\log n)$ proof size, improving upon the $O(n \log n)$ proof size of Kol et al.

* For many problems we show how to reduce proof size below the naturally seeming barrier of $\log n$. By employing our RAM compiler, we get a 5-round protocols with proof size $O(\log \log n)$ for a family of problems including Fixed Automorphism, Clique and Leader Election (for the later two problems we actually get $O(1)$ proof size).

* Finally we discuss how to make these proofs non-interactive arguments via random oracles.

Our compilers capture many natural problems and demonstrates the difficultly in showing lower bounds in these regimes.</summary>
    <updated>2018-12-28T08:02:29Z</updated>
    <published>2018-12-28T08:02:29Z</published>
    <source>
      <id>https://example.com/</id>
      <author>
        <name>ECCC papers</name>
      </author>
      <link href="https://example.com/" rel="alternate" type="text/html"/>
      <link href="https://example.com/feeds/reports/" rel="self" type="application/atom+xml"/>
      <subtitle>Latest Reports published at https://eccc.weizmann.ac.il</subtitle>
      <title>ECCC - Reports</title>
      <updated>2019-01-03T09:21:56Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://rjlipton.wordpress.com/?p=15551</id>
    <link href="https://rjlipton.wordpress.com/2018/12/27/acm-great-results/" rel="alternate" type="text/html"/>
    <title>ACM Great Results</title>
    <summary>A Puck-ish take on promised technological advances Wikimedia Commons source Knecht Ruprecht accompanies Santa Claus in Germany. He brings gifts to good children but lumps of coal to naughty ones. He is regarded more generally as the German counterpart to England‚Äôs Robin Goodfellow, aka. Puck. The Simpsons‚Äô dog ‚ÄúSanta‚Äôs Little Helper‚Äù is named ‚ÄúKnecht Ruprecht‚Äù [‚Ä¶]</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>
<font color="#0044cc"><br/>
<em>A Puck-ish take on promised technological advances</em><br/>
<font color="#000000"/></font></p><font color="#0044cc"><font color="#000000">
<table class="image alignright">
<tbody>
<tr>
<td>
<a href="https://rjlipton.files.wordpress.com/2018/12/KnechtRuprecht.jpg"><img alt="" class="alignright wp-image-15552" height="189" src="https://rjlipton.files.wordpress.com/2018/12/KnechtRuprecht.jpg?w=189&amp;h=189" width="189"/></a>
</td>
</tr>
<tr>
<td class="caption alignright"><font size="-2">Wikimedia Commons <a href="https://commons.wikimedia.org/wiki/File:Das_festliche_Jahr_img398_(Ruprecht).jpg">source</a></font></td>
</tr>
</tbody>
</table>
<p>
Knecht Ruprecht accompanies Santa Claus in Germany. He brings gifts to good children but lumps of coal to naughty ones. He is regarded more generally as the German counterpart to England‚Äôs Robin Goodfellow, aka. <a href="https://en.wikipedia.org/wiki/Puck_(folklore)">Puck</a>. The Simpsons‚Äô <a href="https://en.wikipedia.org/wiki/Santa's_Little_Helper">dog</a> ‚ÄúSanta‚Äôs Little Helper‚Äù is named ‚ÄúKnecht Ruprecht‚Äù in the show‚Äôs German edition.</p>
<p>
Today we do a nice-or-naughty riff on technological gifts suggested by yesterday‚Äôs ACM TechNews mailing.</p>
<p>
The ACM mailings highlight the achievements of the whole field: from quantum to everything else. We thought it might be fun to be a bit puckish ourselves and deliver some ‚Äúcoal‚Äù to ACM. The stories can be sometimes a bit much. We hope that all involved are in good spirits and accept the ‚Äúcoal‚Äù as a holiday-inspired gift‚Äîwith some echo of the general discussion about naughty-or-nice effects of tech advances.</p>
<p>
</p><p/><h2> Our Versions of the Stories </h2><p/>
<p>
</p><p>
Here are some that could be reported in the near future. The originals are <a href="https://technews.acm.org/archives.cfm?fo=2018-12-dec/dec-26-2018.html">here</a>.</p>
<p>
<img alt="{\bullet }" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cbullet+%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\bullet }"/> <i>Real-Time Readouts of Thinking in Faculty</i>. <br/>
Mighty News<br/>
December 19, 2018<br/>
Researchers from a university consortium have developed an open source system delivering fast, precise neural decoding and real-time readouts of where CS faculty think they are. The neural decoding software decrypts hippocampal spatiotemporal patterns detected from tetrode recordings without requiring spike sorting, an error-prone computational process. Implementing this software on a graphical processing unit (GPU) chip demonstrated a 20- to 50-fold upgrade in decoding and analysis speed over conventional multicore central processing unit (CPU) chips. This builds on work previous done on rats as reported by ACM previously. The lab director says that the CS faculty work presented many challenges beyond that required for rats. The applications‚Äîshe says‚Äîare immense. Faculty currently cannot always tell where they are, and the new system could help them get to classes on time.</p>
<p>
<img alt="{\bullet }" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cbullet+%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\bullet }"/> <i>A Robotic Hand Able To Type At Desktop Keyboard At 20 Words Per Minute</i>.<br/>
New Yolk Times<br/>
December 19, 2018 <br/>
Researchers at Can‚Äôt-Abridge University have for the first time taught a robotic hand to type on a normal keyboard. The researchers claim that their system can type at rates in excess of 20 words per minute. They say, ‚Äúthis could change the way that computers interact with others.‚Äù The system, which now weighs about 500 pounds, could be reduced in size and cost in the future. That the robot sometimes destroys the keys by hitting them too hard continues to be a challenge.</p>
<p>
<img alt="{\bullet }" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cbullet+%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\bullet }"/> <i>How AI Spotted Every Solar Panel in the U.S.</i><br/>
Pretty Big Solar NewsHour<br/>
December 19, 2018<br/>
Engineers at the University of St. Anford have located every solar panel in the contiguous U.S. via a network built around a deep learning computer model called Inception. The network completed this task in less than a month, ascertaining that regions with more sun exposure had greater solar panel adoption than areas with less average sunlight. DeepSolar also learned that adoption was higher in locations of increasing average household income. Unbelievable‚Äîwho would have guessed this?</p>
<p>
<img alt="{\bullet }" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cbullet+%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\bullet }"/> <i>An Amoeba Just Found an Entirely New Way to Write Articles</i>. <br/>
ScienceAlarm <br/>
December 21, 2018<br/>
Researchers at Knockout University in Japan gave an assistant professorship to a ‚Äútrue slime mold‚Äù amoeba, and found as the papers-per-year target increased from four to eight, the single-celled organism only needed a linear amount of more time to generate minimum publishable units. This is part of an ongoing project on using lower-level organisms to do research. The project previously used graduate students. The leader of the multiple institution project said that using amoebae could reduce the costs of writing up research by up to 50%. He also said that the amoeba sometimes made various grammar errors, but that the project was attempting to fix this issue.</p>
<p>
<img alt="{\bullet }" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cbullet+%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\bullet }"/> <i>A Quantum Computer Just Found an Entirely Old Way to Visit Cities</i>. <br/>
ScienceAllure <br/>
December 21, 2018<br/>
Researchers at TKO University in Japan gave the Traveling Salesman Problem (TPS) to a vast array of noisy astronomical scale quantum (NASQ) processors, and found that as the cities increased from four to eight, the system only needed a linear amount of more time to determine a single reasonable route. This was fresh off its success at factoring numbers higher than 291,311 = 523*557 that it didn‚Äôt even <a href="https://en.wikipedia.org/wiki/Integer_factorization_records#Records_for_efforts_by_quantum_computers">know</a> it was factoring. TPS is an optimization problem requiring a computer to look at a list of cities and determine the shortest route in which each city is visited exactly once. The team said their results ‚Äúmay lead to the development of quantum algorithms for problems on as many as ten cities.‚Äù </p>
<p/><p/>
<table style="margin: auto;">
<tbody><tr>
<td>
<a href="https://rjlipton.files.wordpress.com/2018/12/SantasLittleHelperOrlando.jpg"><img alt="" class="aligncenter size-medium wp-image-15555" height="148" src="https://rjlipton.files.wordpress.com/2018/12/SantasLittleHelperOrlando.jpg?w=300&amp;h=148" width="300"/></a>
</td>
</tr>
<tr>
<td class="caption alignright">
<font size="-2">Modified from <a href="https://www.flickr.com/photos/jared422/11839818825">source</a><br/>
</font>
</td>
</tr>
</tbody></table>
<p><img alt="{\bullet}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cbullet%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\bullet}"/> <i>Programming Proteins to Pair Precisely</i>.<br/>
C++ News<br/>
December 19, 2018<br/>
The <b>std::pair</b> construct in C++ is a common annoyance because human programmers frequently forget its implicit presence when iterating over maps or inserting into sets. This necessitates the re-typing of millions of lines of source code per annum. Absent the development of a robotic hand able to type at a desktop keyboard at 20 words per minute, software companies can improve productivity by optimizing the nutritional intake of programmers. Nanosoft has partnered with CodeURIKA to provide protein-rich drinks worldwide, after a study of electronic sweatshops found that proteins minimize both syntactic and semantic bugs better over the long term than sugars and PEDs. </p>
<p>
<img alt="{\bullet}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cbullet%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\bullet}"/> <i>Room for Improvement? New Hotelier Tests an Algorithmic System</i>.<br/>
Wallbanger Street Journal<br/>
December 19, 2018<br/>
The Lite House hotelier is experimenting with an algorithmic pricing system to set different room rates for guests who arrive in self-driving cars. Once customers book for the first time at a standard rate, they fill out a questionnaire of 200 questions to specify how often they will need the car, how frequently they visit the hotel bar, and other details. The hotelier then activates a key to drive the car into an appropriate space. The optimized use of vertical space and savings from not hiring car valets will enable conference participants who are not staying at the hotel to park there at a rate low enough to include in the conference registration fee. A spokesman said, ‚ÄúMost of the big hotel operating companies are not focused on their conference guests,‚Äù while Lite House‚Äôs algorithmic rate-setting ‚Äúis next-generation.‚Äù</p>
<p>
<img alt="{\bullet}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cbullet%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\bullet}"/> <i>Companies Use VR to Train Employees for Difficult Customers</i>.<br/>
ESPN Technology Review<br/>
December 20, 2018.<br/>
Major corporations like Wallstore, ChippedPot, and Horizon are using virtual reality (VR) to prepare employees for potentially difficult situations on the job. For example, Horizon has more than 1,600 stores in the U.S. whose front-line employees participate in a digital scenario in which a customer asks to use the bathroom. In a ‚ÄúHarry Potter-Style Photos for Muggles‚Äù twist, researchers have developed software that can animate the central character in a photograph while leaving the rest of the image untouched. Its skeleton can then be animated to create the sense of movement, solving the problem of pose estimation for a limited set of circumstances in which bathroom requests occur. </p>
<p>
<img alt="{\bullet}" class="latex" src="https://s0.wp.com/latex.php?latex=%7B%5Cbullet%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0" title="{\bullet}"/> <i>New Attack Intercepts Keystrokes Via Digital Watches</i>.<br/>
TubeNet<br/>
December 19, 2018<br/>
A team of researchers from Burning Man University has developed a new side-channel attack that exploits the heat generated by people wearing Orange Digital Watches while working on their PCs. Heat amplifies the watches‚Äô ability to detect keystrokes from both hands. Videos known to generate large amounts of heat include comic videos and videos on carpet cleaning. The attack becomes more adept at guessing correct keys as the user gets hotter, as it amasses more key presses from graphic libraries. </p>
<p/><p><br/>
There are some other items, including one particularly chilling, that we chose not to parody.</p>
<p>
</p><p/><h2> Open Problems </h2><p/>
<p/><p>
Will the next year‚Äôs advances in AI and other areas of tech be anything like we imagine? Will they bring humanity more gifts than lumps of coal?</p>
<p/></font></font></div>
    </content>
    <updated>2018-12-28T01:39:40Z</updated>
    <published>2018-12-28T01:39:40Z</published>
    <category term="All Posts"/>
    <category term="Ideas"/>
    <category term="News"/>
    <category term="ACM"/>
    <category term="ACM TechNews"/>
    <category term="AI"/>
    <category term="Christmas"/>
    <category term="gifts"/>
    <category term="Knecht Ruprecht"/>
    <category term="tech"/>
    <author>
      <name>RJLipton+KWRegan</name>
    </author>
    <source>
      <id>https://rjlipton.wordpress.com</id>
      <logo>https://s0.wp.com/i/buttonw-com.png</logo>
      <link href="https://rjlipton.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="https://rjlipton.wordpress.com" rel="alternate" type="text/html"/>
      <link href="https://rjlipton.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="https://rjlipton.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>a personal view of the theory of computation</subtitle>
      <title>G√∂del‚Äôs Lost Letter and P=NP</title>
      <updated>2019-01-03T09:21:49Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://11011110.github.io/blog/2018/12/27/motorcycle-graphs-eventual</id>
    <link href="https://11011110.github.io/blog/2018/12/27/motorcycle-graphs-eventual.html" rel="alternate" type="text/html"/>
    <title>Motorcycle graphs and the eventual fate of sparse Life</title>
    <summary>The motorcycle graph is a geometric structure devised by Jeff Erickson as a simplified model for the behavior of straight skeletons, motivated by the light cycle game in the movie Tron. Its initial data consists of a set of points in the plane (the motorcycles), each with an initial velocity. The motorcycles leave a trail behind them as they move, and a motorcycle crashes (stopping the growth of its trail) when it hits the trail of another motorcycle.
      <div class="commentbar">
        <p/>
      </div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>The <a href="http://jeffe.cs.illinois.edu/open/cycles.html">motorcycle graph</a> is a geometric structure devised by Jeff Erickson as a simplified model for the behavior of <a href="https://en.wikipedia.org/wiki/Straight_skeleton">straight skeletons</a>, motivated by the light cycle game in the movie Tron. Its initial data consists of a set of points in the plane (the motorcycles), each with an initial velocity. The motorcycles leave a trail behind them as they move, and a motorcycle crashes (stopping the growth of its trail) when it hits the trail of another motorcycle.</p>

<p style="text-align: center;"><img alt="A motorcycle graph" src="https://11011110.github.io/blog/assets/2018/motorcycle-graph.svg"/></p>

<p>The motorcycles can be constrained in various ways, and one of these constrained variants is much older. It‚Äôs the <a href="https://en.wikipedia.org/wiki/Gilbert_tessellation">Gilbert tessellation</a>, a motorcycle graph in which the motorcycles start out in pairs traveling in opposite directions, all at the same speed, with a random initial placement for the pairs. Edgar Gilbert wrote about it in 1967, as a model for the growth of <a href="https://en.wikipedia.org/wiki/Acicular_(crystal_habit)">acicular (needle-shaped) crystals</a> and similar systems.</p>

<p style="text-align: center;"><a href="https://commons.wikimedia.org/wiki/File:Gilbert_tessellation.svg"><img alt="A Gilbert tessellation, by Claudio Rocchini" src="https://11011110.github.io/blog/assets/2018/Gilbert-tessellation.svg"/></a></p>

<p>One obvious difference between the Gilbert tessellation and more general types of motorcycle graph is that all the Gilbert tessellation cells are convex polygons. More general motorcycle graphs leave degree-one vertices at the starting position of each motorcycle, but this is hidden by the way the Gilbert graph starts motorcycles in pairs. If we constrain the motorcycles even more, to travel in axis-parallel directions, the polygons become rectangles.</p>

<p style="text-align: center;"><a href="https://commons.wikimedia.org/wiki/File:Gilbert_tessellation_axis.svg"><img alt="Axis-aligned Gilbert tessellation subdivides the plane into rectangles, by Claudio Rocchini" src="https://11011110.github.io/blog/assets/2018/Gilbert-rectangles.svg"/></a></p>

<p>In my paper ‚Äú<a href="https://arxiv.org/abs/0911.2890">Growth and decay in life-like cellular automata</a>‚Äù I noticed that the <a href="https://en.wikipedia.org/wiki/Life-like_cellular_automaton">Life-like cellular automaton</a> rule B017/S1 has a very simple <a href="https://en.wikipedia.org/wiki/Replicator_(cellular_automaton)">replicator</a> consisting of two orthogonally-adjacent live cells, and that initial fields consisting of very sparse randomly placed live cells become dominated by rows and columns of these replicators. Here‚Äôs an example for an initial random fill density of 1%, the lowest I can go in <a href="http://golly.sourceforge.net/">Golly</a>.</p>

<p style="text-align: center;"><img alt="Replicator chaos in B017/S1" src="https://11011110.github.io/blog/assets/2018/b017s1.png"/></p>

<p>Although I didn‚Äôt notice it at the time, this looks very similar to the rectangular Gilbert tessellation! I think that‚Äôs not a coincidence. With a fill density of , the most common constellation (connected group of live cells) of the initial configuration will be a single live cell, with density (number of constellations per unit area) approximately  . But the isolated cells all die off immediately. The second most common constellations,  with density , have two live cells. If the two cells are diagonally adjacent, they form a small oscillator, and if they are orthogonally adjacent, they form a replicator. The replicators will then grow either horizontally or vertically in both directions until they run into something, usually (but not always) another replicator. When two replicators collide, they tend to form a stable blob that blocks both of them. The one that was there first will usually (but not always) have copies of itself on both sides of the blob, so its line of copies stays more or less unchanged in place. The replicator that arrives second will usually (but not always) be blocked by the first replicator, and stay on one side of the collision point. And when replicators are bounded on both sides by stable blobs, they usually (but not always) turn into stable oscillators, continuing to fill the line they have already marked out. If all of the usual things always happened, we would get a Gilbert tessellation; instead, we get something that looks a lot like a Gilbert tessellation but with typically a constant number of oscillators in its rectangles and with occasional other differences from the expected behavior.</p>

<p>Could this happen for sparse initial conditions of <a href="https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life">Conway‚Äôs Game of Life</a>? Maybe!</p>

<p>In a sequence of papers from 1998 to his 2010 ‚Äú<a href="https://doi.org/10.1007/978-1-84996-217-9_20">Emergent Complexity in Conway‚Äôs Game of Life</a>‚Äù, Nick Gotts has explored the behavior of random Life initial conditions, in the limit as the fill density  goes to zero. We don‚Äôt know what happens to these patterns in the long term, but we can say something rigorous about their behavior in the short and medium terms. Here, by ‚Äúshort term‚Äù I mean what happens after a constant number of steps, and by ‚Äúmedium term‚Äù I mean a number of steps that‚Äôs polynomial in  with a small-enough exponent.</p>

<p>Initially, near most points of the plane, the nearest objects will be isolated cells, spaced  units from each other (the inverse square root of their density). However, these immediately die off. So in the short term, the nearest objects will usually be ‚Äúblonks‚Äù (blinkers and blocks, generated from initial constellations of three live cells), with density  and spacing . More widely scattered are gliders, either generated directly from constellations of five initial live cells, or from <a href="http://www.conwaylife.com/wiki/R-pentomino">R pentominos</a> which create a bounded number of gliders before stabilizing. Both possibilities give the gliders density . Even more widely scattered, at density , are the simplest patterns that produce infinite growth rather than stability or simple motion: the <a href="http://www.conwaylife.com/wiki/Block-laying_switch_engine">block-laying switch engines</a>, generated from initial constellations of ten live cells. These are puffer trains rather than replicators: they have a single live head that lays down a trail of blocks as it moves.</p>

<p>If the field stayed like this throughout the medium term, things would be boring. The gliders and switch engines would typically crash into blonks in  steps, in most cases stopping their motion. And so one might expect that at numbers of steps with higher exponents, most points would have only stable or low-period debris as their nearest live pattern. Occasionally there would be a trail of a crashed and dead switch engine but these would be very far apart, at a typical distance , compared to their typical length of . So from a high-level point of view, these trails would just look like randomly placed line segments rather than forming anything like a motorcycle graph or Gilbert tessellation.</p>

<p>However, what Gotts discovered is that something much more complicated and confusing happens. The gliders (with short-term density ) start crashing into blonks, but when they do they sometimes produce one or more new gliders. Those gliders, in turn, might crash into something else and produce even more gliders, perhaps including some that return to the previous crash site. Gotts defines a ‚Äústandard collision sequence‚Äù to be a sequence of events of this type, involving a single initial glider and a widely scattered collection of blonks. There are finitely many different standard collision sequences that involve a given number  of initial blonks. Any one of these sequences can happen to a given glider with a probability that tends to a constant as the number of time steps goes to , the expected time for any glider to complete its collision sequence in the absence of interactions with the crash debris of other gliders.</p>

<p>But the crash debris starts to add up, preventing this analysis from actually staying valid all the way to that limiting point. In particular, some standard collision sequences can produce infinite growth patterns like the block-laying switch engine. If we ignored interactions with other gliders and just considered standard collision sequences, it would appear that the density of switch engines constructed in this way would approach  as the number of time steps went to , and therefore that the density of blocks in switch engine trails would approach , much more dense than the density of initial blonks. That can‚Äôt happen, and our analysis breaks down. What‚Äôs less clear and not rigorously proven is exactly how it breaks down.</p>

<p>One possibility for the breakdown is the following. Switch engines or other puffer engines start being produced in increasing density by standard collision sequences, and they start growing trails of blocks behind them. As their trails grow and the typical distance between the puffers shrinks, at some point these two distances cross over, and the trails become longer than the typical distance. This crossover distance is well below the  distance one would expect a puffer to travel before hitting an initial blonk. Once this happens, most puffers will crash into the trail of another puffer, and their trails will divide up space into something resembling a motorcycle graph. (It‚Äôs not a Gilbert tessellation, because each puffer starts out moving in a single direction.) The cells of this graph prevent anything else from moving across it, leading to eventual stabilization.</p>

<p>Another possibility is that some other pattern (perhaps initial or perhaps produced by a standard collision sequence) does something quickly enough to disrupt the creation of a motorcycle graph before it happens, or breaks through it after it is constructed. We don‚Äôt know what these patterns might look like, but we also don‚Äôt know that they don‚Äôt exist. Life patterns can do complicated things. Because so much is still unknown, what Gotts actually proves is more cautious: either infinite-growth patterns created from collision sequences eventually cause the total population to be significantly denser than its original density, or the infinite-growth patterns created through standard collision sequences will themselves become more dense than they were in the initial field.</p>

<p>(<a href="https://mathstodon.xyz/@11011110/101316148318254282"/>, <a href="https://plus.google.com/100003628603413742554/posts/ehARHPdEkde">G+</a>)</p></div>
    </content>
    <updated>2018-12-27T17:24:00Z</updated>
    <published>2018-12-27T17:24:00Z</published>
    <author>
      <name>David Eppstein</name>
    </author>
    <source>
      <id>https://11011110.github.io/blog/feed.xml</id>
      <author>
        <name>David Eppstein</name>
      </author>
      <link href="https://11011110.github.io/blog/feed.xml" rel="self" type="application/atom+xml"/>
      <link href="https://11011110.github.io/blog/" rel="alternate" type="text/html"/>
      <subtitle>Geometry, graphs, algorithms, and more</subtitle>
      <title>11011110</title>
      <updated>2019-01-03T05:47:41Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://cstheory.stackexchange.com/q/42105</id>
    <link href="https://cstheory.stackexchange.com/questions/42105/lower-bound-on-the-support-size-of-an-epsilon-biased-distribution" rel="alternate" type="text/html"/>
    <title>Lower bound on the support size of an $\epsilon$-biased distribution</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Let <span class="math-container">$D$</span> be an <span class="math-container">$\epsilon$</span>-biased distribution we want to show that
<span class="math-container">$$\text{Supp}(D)\geq \Omega\bigg(\frac{n}{\epsilon^2\log(\frac{1}{\epsilon})}\bigg)$$</span>
I know that there are some proofs for this but I am intrested in the following particular way.</p>

<p>Let <span class="math-container">$X,Y$</span> be two distributions over <span class="math-container">$\{0,1\}^n$</span>. Consider the "convolution" of distributions <span class="math-container">$Z=X\circledast Y$</span> to be defined by sampling <span class="math-container">$x\sim X$</span> and <span class="math-container">$y\sim Y$</span> <strong>independently</strong> and outputting <span class="math-container">$x\oplus y$</span> where <span class="math-container">$\oplus$</span> is just bit-wise xor.</p>

<p>Now if we define a distribution <span class="math-container">$D^{(t)}=D\circledast\cdots\circledast D$</span> (<span class="math-container">$t$</span> times) we can use some Fourier analysis and combinatorics to show that</p>

<ol>
<li><span class="math-container">$D^{(t)}$</span> is <span class="math-container">$\epsilon^t$</span>-biased.</li>
<li><span class="math-container">$|\text{Supp}(D^{(t)})|\leq\binom{|\text{Supp}(D)|+t}{t}$</span></li>
</ol>

<p>We can also show that for every <span class="math-container">$\delta$</span>-biased distribution <span class="math-container">$Z$</span> we have <span class="math-container">$\lVert Z\rVert_2^2\leq\delta^2+2^{-n}$</span> when considering the distribution as a vector of probabilities. Now, I was told that I can use the latter to obtain a lower bound on <span class="math-container">$|\text{Supp}(D^{(t)})|$</span> and then choose <span class="math-container">$t$</span> accordingly to get the desired bound.</p>

<p>However, the only bound I can get for <span class="math-container">$|\text{Supp}(D^{(t)})|$</span> is 
<span class="math-container">$$|\text{Supp}(D^{(t)})|\geq\sqrt{\frac{1}{\epsilon^{2t}+2^{-n}}}$$</span>
And I don't see how that helps... </p></div>
    </summary>
    <updated>2018-12-27T15:38:27Z</updated>
    <published>2018-12-27T15:38:27Z</published>
    <category scheme="https://cstheory.stackexchange.com/tags" term="derandomization"/>
    <category scheme="https://cstheory.stackexchange.com/tags" term="fourier-analysis"/>
    <author>
      <name>user621824</name>
      <uri>https://cstheory.stackexchange.com/users/51592</uri>
    </author>
    <source>
      <id>https://cstheory.stackexchange.com/feeds/</id>
      <link href="https://cstheory.stackexchange.com/feeds/" rel="self" type="application/atom+xml"/>
      <link href="https://cstheory.stackexchange.com/questions" rel="alternate" type="text/html"/>
      <link href="http://www.creativecommons.org/licenses/by-sa/3.0/rdf" rel="license"/>
      <subtitle>most recent 30 from cstheory.stackexchange.com</subtitle>
      <title>Recent Questions - Theoretical Computer Science Stack Exchange</title>
      <updated>2019-01-03T09:20:39Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://cstheory.stackexchange.com/q/42104</id>
    <link href="https://cstheory.stackexchange.com/questions/42104/does-a-given-regular-language-contain-an-infinite-prefix-free-subset" rel="alternate" type="text/html"/>
    <title>Does a given regular language contain an infinite prefix-free subset?</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>A set of words over a finite alphabet is <code>prefix-free</code> if there are no two distinct words where one is a prefix of the other.</p>

<p>The question I have is: </p>

<p><strong>What is the complexity of checking whether a regular language given as an NFA contains an infinite prefix-free subset?</strong> It is in PSpace, but is it PSpace-hard?</p>

<p>Note that the the input is a <em>non-deterministic</em> fintie automaton. If the automaton was deterministic, the problem is in PTime: it suffices to remove all outgoing edges from final states and check whether the resulting language is finite.</p></div>
    </summary>
    <updated>2018-12-27T15:03:12Z</updated>
    <published>2018-12-27T15:03:12Z</published>
    <category scheme="https://cstheory.stackexchange.com/tags" term="fl.formal-languages"/>
    <category scheme="https://cstheory.stackexchange.com/tags" term="automata-theory"/>
    <category scheme="https://cstheory.stackexchange.com/tags" term="prefix-free-code"/>
    <category scheme="https://cstheory.stackexchange.com/tags" term="nfa"/>
    <author>
      <name>Googlo</name>
      <uri>https://cstheory.stackexchange.com/users/49964</uri>
    </author>
    <source>
      <id>https://cstheory.stackexchange.com/feeds/</id>
      <link href="https://cstheory.stackexchange.com/feeds/" rel="self" type="application/atom+xml"/>
      <link href="https://cstheory.stackexchange.com/questions" rel="alternate" type="text/html"/>
      <link href="http://www.creativecommons.org/licenses/by-sa/3.0/rdf" rel="license"/>
      <subtitle>most recent 30 from cstheory.stackexchange.com</subtitle>
      <title>Recent Questions - Theoretical Computer Science Stack Exchange</title>
      <updated>2019-01-03T09:20:39Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>https://www.scottaaronson.com/blog/?p=4043</id>
    <link href="https://www.scottaaronson.com/blog/?p=4043" rel="alternate" type="text/html"/>
    <link href="https://www.scottaaronson.com/blog/?p=4043#comments" rel="replies" type="text/html"/>
    <link href="https://www.scottaaronson.com/blog/?feed=atom&amp;p=4043" rel="replies" type="application/atom+xml"/>
    <title xml:lang="en-US">Announcements</title>
    <summary xml:lang="en-US">I‚Äôm planning to be in Australia soon‚Äîin Melbourne January 4-10 for a friend‚Äôs wedding, then in Sydney January 10-11 to meet colleagues and give a talk. It will be my first trip down under for 12 years (and Dana‚Äôs first ever). If there‚Äôs interest, I might be able to do a Shtetl-Optimized meetup in Melbourne [‚Ä¶]</summary>
    <content type="xhtml" xml:lang="en-US"><div xmlns="http://www.w3.org/1999/xhtml"><p>I‚Äôm planning to be in Australia soon‚Äîin Melbourne January 4-10 for a friend‚Äôs wedding, then in Sydney January 10-11 to meet colleagues and give a talk.  It will be my first trip down under for 12 years (and Dana‚Äôs first ever).  If there‚Äôs interest, I might be able to do a <em>Shtetl-Optimized</em> meetup in Melbourne the evening of Friday the 4th (or the morning of Saturday the 5th), and/or another one in Sydney the evening of Thursday the 10th.  Email me if you‚Äôd go, and then we‚Äôll figure out details.</p>



<p>The <a href="https://www.congress.gov/bill/115th-congress/house-bill/6227/text">National Quantum Initiative Act</a> is now law.  Seeing the photos of Trump signing it, I felt ‚Ä¶ well, whatever emotions you might imagine I felt.</p>



<p>Frank Verstraete asked me to announce that the University of Vienna is seeking a full professor in quantum algorithms; <a href="https://personalwesen.univie.ac.at/jobs-recruiting/professuren/detail-seite/news/quantum-algorithms-1/">see here</a> for details.</p></div>
    </content>
    <updated>2018-12-27T08:35:15Z</updated>
    <published>2018-12-27T08:35:15Z</published>
    <category scheme="https://www.scottaaronson.com/blog" term="Adventures in Meatspace"/>
    <category scheme="https://www.scottaaronson.com/blog" term="Announcements"/>
    <author>
      <name>Scott</name>
      <uri>http://www.scottaaronson.com</uri>
    </author>
    <source>
      <id>https://www.scottaaronson.com/blog/?feed=atom</id>
      <link href="https://www.scottaaronson.com/blog" rel="alternate" type="text/html"/>
      <link href="https://www.scottaaronson.com/blog/?feed=atom" rel="self" type="application/atom+xml"/>
      <subtitle xml:lang="en-US">The Blog of Scott Aaronson</subtitle>
      <title xml:lang="en-US">Shtetl-Optimized</title>
      <updated>2018-12-31T02:04:18Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-us">
    <id>https://eccc.weizmann.ac.il/report/2018/212</id>
    <link href="https://eccc.weizmann.ac.il/report/2018/212" rel="alternate" type="text/html"/>
    <title>TR18-212 |  Constructing Faithful Homomorphisms over Fields of Finite Characteristic | 

	Prerona Chatterjee, 

	Ramprasad Saptharishi</title>
    <summary>We study the question of algebraic rank or transcendence degree preserving homomorphisms over finite fields. This concept was first introduced by Beecken, Mittmann and Saxena (Information and Computing, 2013), and exploited by them, and Agrawal, Saha, Saptharishi and Saxena (Journal of Computing, 2016) to design algebraic independence based identity tests using the Jacobian criterion over characteristic zero fields. An analogue of such constructions over finite characteristic fields was unknown due to the failure of the Jacobian criterion over finite characteristic fields.
Building on a recent criterion of Pandey, Sinhababu and Saxena (MFCS, 2016), we construct explicit faithful maps for some natural classes of polynomials in the positive characteristic field setting, when a certain parameter called the inseparable degree of the underlying polynomials is bounded (this parameter is always 1 in fields of characteristic zero). This presents the first generalisation of some of the results of Beecken et al. and Agrawal et al. in the positive characteristic setting.</summary>
    <updated>2018-12-26T14:56:28Z</updated>
    <published>2018-12-26T14:56:28Z</published>
    <source>
      <id>https://example.com/</id>
      <author>
        <name>ECCC papers</name>
      </author>
      <link href="https://example.com/" rel="alternate" type="text/html"/>
      <link href="https://example.com/feeds/reports/" rel="self" type="application/atom+xml"/>
      <subtitle>Latest Reports published at https://eccc.weizmann.ac.il</subtitle>
      <title>ECCC - Reports</title>
      <updated>2019-01-03T09:21:56Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://gilkalai.wordpress.com/?p=16645</id>
    <link href="https://gilkalai.wordpress.com/2018/12/25/amazing-karim-adiprasito-proved-the-g-conjecture-for-spheres/" rel="alternate" type="text/html"/>
    <title>Amazing: Karim Adiprasito proved the g-conjecture for spheres!</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Karim in his youth with a fan Congratulations, Karim! Update: Here is the link to the paper From the arXive, Dec 26, 2018. (Link will be added tomorrow.) COMBINATORIAL LEFSCHETZ THEOREMS BEYOND POSITIVITY by Karim Adiprasito Abstract:¬†Consider a simplicial complex ‚Ä¶ <a href="https://gilkalai.wordpress.com/2018/12/25/amazing-karim-adiprasito-proved-the-g-conjecture-for-spheres/">Continue reading <span class="meta-nav">‚Üí</span></a></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://gilkalai.files.wordpress.com/2015/01/gilkarim.jpg"><img alt="" class="alignnone size-full wp-image-12390" height="853" src="https://gilkalai.files.wordpress.com/2015/01/gilkarim.jpg?w=640&amp;h=853" width="640"/></a></p>
<p style="text-align: center;"><span style="color: #ff0000;">Karim in his youth with a fan</span></p>
<p>Congratulations, Karim!</p>
<p><strong>Update</strong>: <a href="https://arxiv.org/abs/1812.10454">Here is the link to the paper</a></p>
<p><em>From the arXive, Dec 26, 2018. (Link will be added tomorrow.)</em></p>
<p>COMBINATORIAL LEFSCHETZ THEOREMS BEYOND POSITIVITY</p>
<p>by Karim Adiprasito</p>
<p><strong>Abstract:</strong>¬†Consider a simplicial complex that allows for an embedding into <img alt="\mathbb R^d" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathbb+R%5Ed&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\mathbb R^d"/>. How many faces of dimension <img alt="d/2" class="latex" src="https://s0.wp.com/latex.php?latex=d%2F2&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="d/2"/> or higher can it have? How dense can they be?</p>
<p>This basic question goes back to Descartes. Using it and other fundamental combinatorial<br/>
problems, we will introduce a version of the K√§hler package beyond positivity,<br/>
allowing us to prove the Lefschetz theorem for toric varieties even when the ample<br/>
cone is empty. A particular focus lies on replacing the Hodge-Riemann relations by a<br/>
non-degeneracy relation at torus-invariant subspaces, allowing us to state and prove a<br/>
generalization of the theorems of Hall and Laman in the setting of toric varieties. Of<br/>
the many applications, we highlight two main applications, one because it is the most<br/>
well-known, the other because it provided the most guiding light.</p>
<p>(1) We fully characterize the possible face numbers of simplicial spheres, resolving the<br/>
so called <em>g</em>-conjecture of McMullen in full generality and generalizing Stanley‚Äôs<br/>
earlier proof for simplicial polytopes.</p>
<p>(2) We prove that for a simplicial complex <em>K</em> that embeds into <img alt="\mathbb R^{2d}" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cmathbb+R%5E%7B2d%7D&amp;bg=ffffff&amp;fg=333333&amp;s=0" title="\mathbb R^{2d}"/>, the number of <em>d</em>-dimensional simplices exceeds the number of <em>(d ‚àí 1)</em>-dimensional simplices by a factor of at most <em>d + 2</em>. This generalizes a result of Descartes, and resolves the Gr√ºnbaum-Kalai-Sarkaria conjecture.</p>
<p>_______</p>
<p>(GK:) A few further comments.¬†Probably the <em>g</em>-conjecture for spheres is the single problem I knock my head against the most. It is great to see it settled and it is even greater to see it settled by my friend and colleague Karim Adiprasito.</p>
<p>To the three ingredients of the standard conjectures (See also the <a href="https://gilkalai.wordpress.com/2018/12/24/icm-2018-rio-4-huh-balog-morris-wormald/">previous post</a>), Poincare duality <strong>(PD</strong>), Hard Lefschetz (<strong>HL</strong>) and Hodge-Riemann (<strong>HR</strong>), Karim adds the <strong>Hall-Laman relations</strong>. Very roughly, the Hall-Laman relations¬† substitute<strong> (HR)</strong> and apply genericity (rather than definiteness) toward <strong>(HL)</strong>.</p>
<p>(We still need a good acronym for Hall-Laman, maybe <strong>(AHL)</strong>.)</p>
<p>One very nice feature of Karim‚Äôs proof is that <strong>vertex decomposable</strong> spheres play a special role in the path toward the proof. Those were introduced by Provan and Billera in the context of the Hirsch conjecture.</p>
<p>We have devoted <a href="https://gilkalai.wordpress.com/tag/g-conjecture/">plenty of posts</a> to the <em>g</em>-conjecture for spheres, and mentioned it in <a href="https://gilkalai.wordpress.com/page/2/?s=g-conjecture">even more posts</a>.¬† For an introduction to the conjecture see <a href="https://gilkalai.wordpress.com/2009/04/02/eran-nevo-the-g-conjecture-i/">Eran Nevo introductory post</a>, and the post¬†<a href="https://gilkalai.wordpress.com/2009/04/04/how-the-g-conjecture-came-about/" rel="bookmark">How the g-Conjecture Came¬†About</a>. There is also plenty left to be done¬†<a href="https://gilkalai.wordpress.com/2018/06/20/beyond-the-g-conjecture-algebraic-combinatorics-of-cellular-spaces-i/">beyond the g-conjecture</a>.</p>
<p><span style="color: #0000ff;">Merry X-mas and Happy new year 2019 to all our readers.</span></p></div>
    </content>
    <updated>2018-12-25T14:38:23Z</updated>
    <published>2018-12-25T14:38:23Z</published>
    <category term="Combinatorics"/>
    <category term="Updates"/>
    <category term="g-conjecture"/>
    <category term="Karim Adiprasito"/>
    <author>
      <name>Gil Kalai</name>
    </author>
    <source>
      <id>https://gilkalai.wordpress.com</id>
      <logo>https://s0.wp.com/i/buttonw-com.png</logo>
      <link href="https://gilkalai.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="https://gilkalai.wordpress.com" rel="alternate" type="text/html"/>
      <link href="https://gilkalai.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="https://gilkalai.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>Gil Kalai's blog</subtitle>
      <title>Combinatorics and more</title>
      <updated>2019-01-03T09:20:55Z</updated>
    </source>
  </entry>

  <entry>
    <id>https://cstheory.stackexchange.com/q/42094</id>
    <link href="https://cstheory.stackexchange.com/questions/42094/can-a-term-on-normal-form-prove-an-illogical-assertion" rel="alternate" type="text/html"/>
    <title>Can a term on normal form prove an illogical assertion?</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Suppose we take a language such as Agda and disable the features that make it consistent; for example, universe polymorphism, structural recursion checks and similar. Suppose then that we take a term in normal form, i.e., with no redex left. Could that term prove an absurd claim such as, for example, <code>1 = 2</code>, despite the fact it is normalised (and, thus, doesn't include infinite loops)?</p></div>
    </summary>
    <updated>2018-12-24T20:50:29Z</updated>
    <published>2018-12-24T20:50:29Z</published>
    <category scheme="https://cstheory.stackexchange.com/tags" term="type-theory"/>
    <category scheme="https://cstheory.stackexchange.com/tags" term="agda"/>
    <author>
      <name>MaiaVictor</name>
      <uri>https://cstheory.stackexchange.com/users/17388</uri>
    </author>
    <source>
      <id>https://cstheory.stackexchange.com/feeds/</id>
      <link href="https://cstheory.stackexchange.com/feeds/" rel="self" type="application/atom+xml"/>
      <link href="https://cstheory.stackexchange.com/questions" rel="alternate" type="text/html"/>
      <link href="http://www.creativecommons.org/licenses/by-sa/3.0/rdf" rel="license"/>
      <subtitle>most recent 30 from cstheory.stackexchange.com</subtitle>
      <title>Recent Questions - Theoretical Computer Science Stack Exchange</title>
      <updated>2019-01-03T09:20:39Z</updated>
    </source>
  </entry>
</feed>
